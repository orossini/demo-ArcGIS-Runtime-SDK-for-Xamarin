<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Esri.ArcGISRuntime</name>
    </assembly>
    <members>
        <member name="T:Esri.ArcGISRuntime.Internal.OpenGLExtensions">
            <summary>
            Provides extension methods related to Open GL
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.OpenGLExtensions.GetAttribute(Javax.Microedition.Khronos.Egl.EGLConfig,Javax.Microedition.Khronos.Egl.IEGL10,Javax.Microedition.Khronos.Egl.EGLDisplay,System.Int32)">
            <summary>
            Gets the value of the specified attribute from the EGLConfig object
            </summary>
            <returns>The value of the specified attribute or zero if the attribute cannot be retrieved</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.HorizontalAlignment">
            <summary>
            Provides horizontal alignment values
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.Geolocator">
            <summary>
            Provides access to the current geographic location
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.#ctor">
            <summary>
            Initializes a new Geolocator object
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geolocator.DesiredAccuracy">
            <summary>
            The accuracy level at which the Geolocator provides location updates
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geolocator.DesiredAccuracyInMeters">
            <summary>
            Gets or sets the desired accuracy in meters for data returned from the location service
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geolocator.MovementThreshold">
            <summary>
            Gets and sets the distance of movement, in meters, relative to the coordinate from the last
            PositionChanged event, that is required for the Geolocator to raise a PositionChanged event
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geolocator.ReportInterval">
            <summary>
            The requested minimum time interval between location updates, in milliseconds.  If your 
            application requires updates infrequently, set this value so that the location provider 
            can conserve power by calculating location only when needed
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.GetGeopositionAsync(System.TimeSpan,System.TimeSpan)">
            <summary>
            Starts an asynchronous operation to retrieve the current location
            </summary>
            <param name="maximumAge">The maximum acceptable age of cached location data</param>
            <param name="timeout">The timeout</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.OnLocationChanged(Android.Locations.Location)">
            <summary>
            Called when the location has changed
            </summary>
            <param name="location">The new location, as a Location object</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.OnProviderDisabled(System.String)">
            <summary>
            Called when the provider is disabled by the user
            </summary>
            <param name="provider">the name of the location provider associated with this update</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.OnProviderEnabled(System.String)">
            <summary>
            Called when the provider is enabled by the user
            </summary>
            <param name="provider">the name of the location provider associated with this update</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.OnStatusChanged(System.String,Android.Locations.Availability,Android.OS.Bundle)">
            <summary>
            Called when the provider status changes
            </summary>
            <param name="provider">the name of the location provider associated with this update</param>
            <param name="status">
            Android.Locations.Availability.OutOfService if the provider is out of service, and this is not 
            expected to change in the near future; Android.Locations.Availability.TemporarilyUnavailable if 
            the provider is temporarily unavailable but is expected to be available shortly; and 
            Android.Locations.Availability.Available if the provider is currently available
            </param>
            <param name="extras">an optional Bundle which will contain provider specific status variables</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Internal.Geolocator.PositionChanged">
            <summary>
            Raised when the location is updated
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.updateCurrentPosition(Android.Locations.Location)">
            <summary>
            Updates the current Geoposition based on the specified Android location and raises PositionChanged
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.OnPositionChanged">
            <summary>
            Raises PositionChanged
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.getLocationProviderName">
            <summary>
            Retrieves the name of the best available location provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geolocator.getLocationTimestamp(Android.Locations.Location)">
            <summary>
            Gets the timestamp of the specified Android location as a DateTime object
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.VerticalAlignment">
            <summary>
            Provides vertical alignment values
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreArrayExtensions.AsReadOnlyList``1(RuntimeCoreNet.GeneratedWrappers.CoreArray,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreElement,``0})">
            <summary>
            Generates a publicly exposable read-only list from a CoreArray, supply a function to map a CoreElement to a public API class. 
            This is usually the CreateFromCore method.
            </summary>
            <typeparam name="T">Public API type</typeparam>
            <param name="array">CoreArray</param>
            <param name="createObjectFunction">function to create public API class</param>
            <returns>Publicly exposable read-only List</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreArrayExtensions.AsReadOnlyListString(RuntimeCoreNet.GeneratedWrappers.CoreArray)">
            <summary>
            Generates a public API read-only list of strings from a CoreArray.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AsReadOnlyList``1(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreElement,``0})">
            <summary>
            Generates a public API read-only list from a CoreVector, supply a funciton to map a CoreElement to a public API class. 
            This is usually the CreateFromCore method.
            </summary>
            <typeparam name="T">Public API type</typeparam>
            <param name="vector">CoreVector or CoreObservableVector</param>
            <param name="createObjectFunction">funciton to create publci API class</param>
            <returns>Public API readOnly List</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AsReadOnlyListString(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Generates a public API read-only list of strings from a CoreVector.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AddRangeFromPublic``1(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Collections.Generic.IEnumerable{``0},System.Func{``0,RuntimeCoreNet.GeneratedWrappers.CoreElement})">
            <summary>
            Adds a range of public API classes to a CoreVector, uses a supplied function to map from publci API class to the right coreElement type
            </summary>
            <typeparam name="T">Public API type</typeparam>
            <param name="vector">CoreVector (or CoreObservableVector) to add too</param>
            <param name="input">public API collection </param>
            <param name="createCoreElementFunction">funciton to turn public api into the corresponding CoreElement</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AsCoreVector``1(System.Collections.Generic.IEnumerable{``0},RuntimeCoreNet.GeneratedWrappers.CoreElementType,System.Func{``0,RuntimeCoreNet.GeneratedWrappers.CoreElement})">
            <summary>
            Generates a CoreVector from an IEnumerable of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">IEnumerable of CLR objects</param>
            <param name="elemType">ElementType of new CoreVector</param>
            <param name="createCoreElement">Function to create a CoreElement from a CLR object</param>
            <returns>CoreVector initialized with items</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AsIEnumerable``1(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreElement,``0})">
            <summary>
            Generates a public API IEnumerable from a CoreVector. 
            This is usually the CreateFromCore method.
            </summary>
            <typeparam name="T">Public API type</typeparam>
            <param name="vector">CoreVector or CoreObservableVector</param>
            <param name="createObjectFunction">function to create public API class</param>
            <returns>Public API IEnumerable</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.CoreVectorExtensions.AsObservableCollection``1(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreElement,``0})">
            <summary>
            Creates an ObservableCollection of T from a CoreVector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector">CoreVector</param>
            <param name="collectionChanged">NotifyCollectionChanged event handler</param>
            <param name="createObject">Function for creating a CLR object of type T from a CoreElement</param>
            <returns>ObservableCollection of T initialized from CoreVector</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.DateUtils.Epoch">
            <summary>
            DateTime when UTC time starts 1st Jan 1970. This instance is of type UTC (not local time)
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.DateUtils.ToMillisecondsSinceEpoch(System.DateTimeOffset)">
            <summary>
            Converts a DateTime to milliseconds since UTC epoch (1st Jan 1970)
            </summary>
            <param name="time">A date time instance</param>
            <returns>milliseconds since UTC epoch</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.DateUtils.ToStringMillisecondsSinceEpoch(System.DateTimeOffset)">
            <summary>
            Converts a DateTime to milliseconds since UTC epoch (1st Jan 1970) as a string in culture invariant output
            </summary>
            <param name="time">A date time instance</param>
            <returns>milliseconds since UTC epoch</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.DateUtils.FromMillisecondsSinceEpoch(System.Int64)">
            <summary>
            Converts a number in milliseconds since UTC Epoch (1st Jan 1970) to a DateTime
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.DebugCheck">
            <summary>
            Provides cross platform equivalent of with Debug.Assert
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.DebugCheck.Assert(System.Boolean)">
            <summary>
            Provides a debug time check because System.Diagnostics.Debug.Assert is ignored in win store.
            </summary>
            <remarks>
            From http://www.danielmoth.com/Blog/DebugAssert-Replacement-For-Phone-And-Store-Apps.aspx
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.DebugCheck.Assert(System.Boolean,System.String)">
            <summary>
            Provides a debug time check because System.Diagnostics.Debug.Assert is ignored in win store.
            </summary>
            <remarks>
            From http://www.danielmoth.com/Blog/DebugAssert-Replacement-For-Phone-And-Store-Apps.aspx
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.DesignTime.IsDesignMode">
            <summary>
            Gets a value indicating if the process is in design mode (running in Blend
            or Visual Studio).
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.FileUtils">
            <summary>
            Utility class for handling file paths
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.GetTempPath">
            <summary>
            Returns full path to folder containing temporary files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.GetTempFileName">
            <summary>
            Returns a full path to a new temporary file name (doesn't create a file).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.GetExeDirectory">
            <summary>
            Returns the current exe's directory. This will handle EntryAssembly being null (if a native host exe is used)
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.MakeFullPath(System.String)">
            <summary>
            This method also retrnes the file system path in a "canonical" form so paths can be compared. This will lower cases the path
            and use "\" for separators. This resolves relative paths relative to the executing exe. 
            any http paths are not modified.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.IsHttp(System.String)">
            <summary>
            Returns true if this string looks like an url starting with http or https
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.IsValidPathCharacters(System.String)">
            <summary>
            Checks if the path contains any invalid characters.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.FileUtils.IsRelativePath(System.String)">
            <summary>
            Returns true if this looks like a relative file path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.ICoreElement`1">
            <summary>
            This interface is used by RuntmeCoreList and is implemented using internal implementation on API classes.
            It is provides a way to get a the right CoreElement for the core wrapper contained in the publci API class.
            </summary>
            <typeparam name="T">Type of Core class that's contained within the returned element</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.LoadableObjectHandler.LoadError">
            <summary>
            Gets the load error if the task failed to load.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.LoadableObjectHandler.LoadStatus">
            <summary>
            Gets the load status
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.LoadableObjectHandler.CancelLoad">
            <summary>
            Cancels a pending load
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.LoadableObjectHandler.LoadAsync">
            <summary>
            Initiates loading of a map
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.RequestRequiredHandler.Credential">
            <summary>Gets or sets the credentials for the message handler</summary>
            <value>The access credential.</value>
        </member>
        <member name="F:Esri.ArcGISRuntime.Internal.RuntimeCoreList`2._elements">
            <summary>
            Contains the list of created managed elements
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Internal.RuntimeCoreList`2._createObjectFunction">
            <summary>
            Function for creating objects of `T` from a CoreElement
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.RuntimeCoreList`2.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreElement,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Internal.RuntimeCoreList`2"/> class.
            </summary>
            <param name="coreVector">The core vector.</param>
            <param name="createObject">Function for creating objects of `T` from a CoreElement.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.RuntimeCoreList`2.SetOwner(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Replaces the internal vector with an owner vector - it will clear all items on 'newVector' and add the current items.
            </summary>
            <param name="newVector"></param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.SimpleCache`2">
            <summary>
             Thread safe cache mapping TKey to TItems using weak references on TItem.
            </summary>
             <remarks>
             This is designed for small numbers of items. TKey ideally be a struct or fixed size type for best performance.
             A linear scans are used to find keys and also in Add to release slots.
             This is not as bad as it sounds, linear scans can be very efficient on modern CPU due to pre-fetch optimizations. 
             So for bet perf if the TKey is a struct or integral type all keys will be packed sequentially into memory.
             To prevent a constantly growing table of released weak references, the cache will evict slots in an Add too.
             The assumption is there's a lot more Find than Add.
             </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.SimpleCache`2.CacheEntry">
            <summary>
            An internal struct used to hold an entry in the cache
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.SimpleCache`2.Find(`0)">
            <summary>Tries to find the item with specified key in the cache, if not found return null</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.SimpleCache`2.Add(`0,`1)">
            <summary>
            Adds item to the cache - 
            If key is not in the cache, it adds it and the value
            if the key and value is in the cache, does nothing
            this also releases empty slots.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.SimpleCache`2.Clear">
            <summary>
            Releases all the cached items
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.UriExtension.ToUrlOrPath(System.Uri)">
            <summary>Converts a uri to an http(s) or local file path string</summary>
            <param name="uri">Local, relative or online URI instance</param>
            <returns>Uri string or null</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.UriExtension.ToUrlOrPath(System.Uri,System.Boolean@)">
            <summary>Converts a uri to an http(s) or local file path string</summary>
            <param name="uri">Local, relative or online URI instance</param>
            <param name="isLocal">True if the returned value is a local path</param>
            <returns>Uri string or null</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.FormUrlEncodedContentInternal">
            <summary>
            This class implementation is identical to System.Net.Http.FormUrlEncodedContent  implementation
            EXCEPT that it handles encoding strings longer than the maximum limit of 32000;
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:Esri.ArcGISRuntime.Internal.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.WeakEventListener`1">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            
            USAGE:
            
            EventReceiver - the class that is listening for the event
            eventSource - the object that is firing a 'Changed' event.
            _eventListener - an instance of WeakEventListener.
            
            SUBSCRIBE TO EVENT:
            
            _eventListener = new WeakEventListener&lt;EventReceiver&gt;(this)
            	{
            		OnEventAction = l => /* do something to handle the event */,
            		OnDetachAction = wel => newValue.Changed -= wel.OnEvent
            	};
            eventSource.Changed += _eventListener.OnEvent;
            
            UNSUBSCRIBE FROM EVENT:
            
            _eventListener.Detach();
            _eventListener = null;
            
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
        </member>
        <member name="F:Esri.ArcGISRuntime.Internal.WeakEventListener`1._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.WeakEventListener`1.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.WeakEventListener`1.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`1.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`1.OnEvent">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.WeakEventListener`1.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.Dispatcher">
            <summary>
            Provides methods for invoking functionality on the Main (UI) thread
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Dispatcher.CheckAccess">
            <summary>
            Check whether execution is currently running on the UI thread
            </summary>
            <returns>true if currently executing on UI thread, false otherwise</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Dispatcher.RunAsyncAction(System.Action,System.Boolean)">
            <summary>
            Executes the specified action on the UI thread asynchronously
            </summary>
            <remarks>
            - Uses Xamarin.Forms Device class to invoke action on the UI thread
            - void return - fire and forget
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Dispatcher.InvokeAsync(System.Action)">
            <summary>
            Executes the specified action on the UI thread asynchronously
            </summary>
            <remarks>
            - Uses Xamarin.Forms Device class to invoke action on the UI thread
            - Returns a task that can be awaited if necessary
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Internal.DispatcherTimer">
            <summary>
            Timer for Xamarin use that mimics Windows DispatcherTimer in Android / iOS
            </summary>
            <remarks>
            - Raises Tick events on the UI thread
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.DispatcherTimer.Interval">
            <summary>
            Sets time interval of Tick event callbacks
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.DispatcherTimer.IsEnabled">
            <summary>
            Checks / starts / stops the timer
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Internal.DispatcherTimer.Tick">
            <summary>
            Event fired at each Interval
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.Accuracy">
            <summary>
            The accuracy of the location in meters
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.AltitudeAccuracy">
            <summary>
            The accuracy of the altitude, in meters
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.Heading">
            <summary>
            The current heading in degrees relative to true north
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.Point">
            <summary>
            The location of the geocoordinate
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.Speed">
            <summary>
            The speed in meters per second
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geocoordinate.Timestamp">
            <summary>
            The time at which the location was determined
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Internal.Geopoint.#ctor(Esri.ArcGISRuntime.Internal.BasicGeoposition)">
            <summary>
            Create a geographic point object for the given position
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geopoint.Position">
            <summary>
            The position of a geographic point
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geopoint.SpatialReferenceId">
            <summary>
            The spatial reference identifier for the geographic point, corresponding 
            to a spatial reference system based on the specific ellipsoid used for either
            flat-earth mapping or round-earth mapping.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Internal.Geoposition.Coordinate">
            <summary>
            The latitude and longitude associated with a geographic location
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.EnvelopeConverter">
            <summary>
             *FOR INTERNAL USE ONLY* Provides a way of converting <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> to and from a string representation.
            </summary>
            <exclude/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.EnvelopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.EnvelopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.EnvelopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.EnvelopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.MapConverter">
            <summary>
             *FOR INTERNAL USE ONLY* Provides a way of converting <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> to and from a string uri to a portal item, or from a portal item instance.
            </summary>
            <exclude/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.ViewpointConverter">
            <summary>
             *FOR INTERNAL USE ONLY* Provides a way of converting <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> extent to and from a string representation.
            </summary>
            <exclude/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewpointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to
            the type of this converter, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewpointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewpointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewpointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.AndroidDeviceInteractionHandler.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            OnTouchEvent handles Android MotionEvents
            </summary>
            <remarks>
            - Client should pass this method a synchronous stream of MotionEvents.
            - Ths method will call IMapGestureListener methods when correct gestures are identified.
            - Uses member detectors to actually identify the gestures
            </remarks>
            <param name="ev">Android MotionEvent</param>
            <returns>true if event was handled otherwise false</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GeoView">
            <summary>
            A base class for the map control.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.UI.MapView"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.OnMeasure(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.OnLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddView(Android.Views.View,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddView(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddView(Android.Views.View,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveAllViews">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveViewAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveViews(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveAllViewsInLayout">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveViewInLayout(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RemoveViewsInLayout(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.BringChildToFront(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.GetChildAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IndexOfChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddChildrenForAccessibility(System.Collections.Generic.IList{Android.Views.View})">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RequestChildFocus(Android.Views.View,Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ClearChildFocus(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ClearDisappearingChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.AddStatesFromChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ChildDrawableStateChanged(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.SetAddStatesFromChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.SetClipChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ShouldDelayChildPressedState">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ShowContextMenuForChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.FocusableViewAvailable(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RequestTransparentRegion(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.RecomputeViewAttributes(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.OnRequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.EndViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.StartViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.UpdateViewLayout(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.ChildCount">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.FocusedChild">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.GetScaleFactor">
            <summary>
            Gets the scale factor used between device independent units and pixels.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.OnCorePropertyChanged(RuntimeCoreNet.GeneratedWrappers.CoreState)">
            <summary>
            Called when whenever a core property changes
            </summary>
            <param name="coreProperty">Name of the core property.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.DrawStatusChanged">
            <summary>
            Occurs when the <see cref="P:Esri.ArcGISRuntime.UI.GeoView.DrawStatus"/> property of this instance changes.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.LayerViewStateChanged">
            <summary>
            Occurs when the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerViewState"/> of a contained layer changes.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.SpatialReferenceChanged">
            <summary>
            Occurs when spatial reference of the view changes.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.UI.GeoView.SpatialReference"/>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.ViewpointChanged">
            <summary>
            Occurs when the current viewpoint changes.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.UI.GeoView.GetCurrentViewpoint(Esri.ArcGISRuntime.Mapping.ViewpointType)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.ExportImageAsync">
            <summary>
            Creates an image snapshot of the current map view
            </summary>
            <returns>Task&lt;ImageSource&gt;.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.GraphicsOverlays">
            <summary>
            Gets or sets the GraphicsOverlayCollection.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.GetCurrentViewpoint(Esri.ArcGISRuntime.Mapping.ViewpointType)">
            <summary>
            Gets the current Viewpoint of the view.
            </summary>
            <param name="viewpointType">Type of Viewpoint</param>
            <returns>a Viewpoint.</returns>
            <remarks>
            To change the view viewpoint, you can use the <see cref="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint)"/> method available on the view.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpoint(Esri.ArcGISRuntime.Mapping.Viewpoint)">
            <summary>
            Sets the view to the given Viewpoint location
            </summary>
            <param name="viewpoint">Viewpoint object.</param>
            <remarks>
            <para>
            An in-depth discussion on the various options for changing the viewable extent of layers in the map can be found in the Fundamentals document: 
            <a href="ac4ddb3a-f1af-4a8a-b107-fb28790247b1.htm">Setting Extents</a>. 
            </para>
            </remarks>
            <seealso cref="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint)">
            <summary>
            Animates the view to the given Viewpoint location
            </summary>
            <param name="viewpoint">Viewpoint object</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpoint(Esri.ArcGISRuntime.Mapping.Viewpoint)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint,System.TimeSpan)">
            <summary>
            Animates the view to the given Viewpoint location
            </summary>
            <param name="viewpoint">Viewpoint object</param>
            <param name="duration">Duration of the animation</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.GeoView.SetViewpoint(Esri.ArcGISRuntime.Mapping.Viewpoint)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.GetLayerViewState(Esri.ArcGISRuntime.Mapping.Layer)">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerViewState"/> for the given layer.
            </summary>
            <param name="layer">Layer</param>
            <returns>LayerViewState</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyGraphicsOverlayAsync(Esri.ArcGISRuntime.UI.GraphicsOverlay,Android.Graphics.PointF,System.Double)">
            <summary>Initiates an identify operation on the specified graphics overlay which will return the visible topmost graphic.</summary>
            <param name="graphicsOverlay">The overlay on which to run the identify.</param>
            <param name="screenCoordinate">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
             <returns>A task that represents the asynchronous identify operation on the specified graphics overlay.
             The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/></returns>
             <exception cref="T:System.ArgumentNullException">graphicsOverlay</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyGraphicsOverlayAsync(Esri.ArcGISRuntime.UI.GraphicsOverlay,Android.Graphics.PointF,System.Double,System.Int64)">
            <summary>Initiates an identify operation on the specified graphics overlay.</summary>
            <param name="graphicsOverlay">The overlay on which to run the identify.</param>
            <param name="maximumResults">The maximum size of the result set to return.</param>
            <param name="screenCoordinate">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
             <returns>A task that represents the asynchronous identify operation on the specified graphics overlay.
             The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/></returns>
             <exception cref="T:System.ArgumentNullException">graphicsOverlay</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyGraphicsOverlaysAsync(Android.Graphics.PointF,System.Double)">
            <summary>Initiate an identify operation on all graphics overlays which will return the single visible topmost graphic per overlay only.</summary>
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
             <returns>A task that represents the asynchronous identify operation on all graphics overlays in the view
             The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult"/> in top to bottom order.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyGraphicsOverlaysAsync(Android.Graphics.PointF,System.Double,System.Int64)">
            <summary>Initiate an identify operation on all graphics overlays.</summary>
            <param name="maximumResultsPerOverlay">The maximum number of graphics to return per overlay..</param>
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
             <returns>A task that represents the asynchronous identify operation on all graphics overlays in the view
             The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult"/> in top to bottom order.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyLayerAsync(Esri.ArcGISRuntime.Mapping.Layer,Android.Graphics.PointF,System.Double)">
            <summary>Initiates an identify operation on the specified layer which will return the single visible topmost geolement only.</summary>
            <param name="layer">The layer on which to run the identify.</param>
            <param name="screenCoordinate">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
            <returns>A task that represents the asynchronous identify operation on the specified layer.
            The value of the TResult parameter contains <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/></returns>
            <exception cref="T:System.ArgumentNullException">layer</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyLayerAsync(Esri.ArcGISRuntime.Mapping.Layer,Android.Graphics.PointF,System.Double,System.Int64)">
            <summary>Initiates an identify operation on the specified layer.</summary>
            <param name="layer">The layer on which to run the identify.</param>
            <param name="maximumResults">The maximum size of the result set of geoelements.</param>
            <param name="screenCoordinate">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
            <returns>A task that represents the asynchronous identify operation on the specified layer.
            The value of the TResult parameter contains <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/></returns>
            <exception cref="T:System.ArgumentNullException">layer</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyLayersAsync(Android.Graphics.PointF,System.Double)">
            <summary>Initiates an identify operation on all layers in the view which will return the single visible topmost geoelement per layer only.</summary>        
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
            <returns>A task that represents the asynchronous identify operation on all layers in the view
            The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/> in top to bottom order.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyLayersAsync(Android.Graphics.PointF,System.Double,System.Int64)">
            <summary>Initiates an identify operation on all layers in the view.</summary>
            <param name="maximumResultsPerLayer">The maximum number of geoelements to return per layer.</param>
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">The width and height in screen coordinates of the square centered on screen coordinate that will be used in the identify.</param>
            <returns>A task that represents the asynchronous identify operation on all layers in the view
            The value of the TResult parameter contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/> in top to bottom order.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyPopupsAsync(Android.Graphics.PointF,System.Double)">
            <summary>
            Initiate an Identify popups operation on all layers in the view supporting popups. This overload will return the single
            visible topmost geoelement per layer only. NB: Layers are searched from top to bottom.
            </summary>
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the size of the circle used during the identify operation. 
            A tolerance of 0 corresponds to a circle with a diameter of 1 DIP, centered on the screen_coordinate. 
            Tolerance values above 0 increase the identify circle's radius by that amount in DIPs.</param>
            <returns>A task that represents the asynchronous identify popup operation on the view.
            The value of the TResult parameter contains a collection of <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult"/> with one result per layer.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.IdentifyPopupsAsync(Android.Graphics.PointF,System.Double,System.Int64)">
            <summary>
            Initiate an Identify popups operation on all layers in the view that support popups.
            </summary>
            <param name="maximumResultsPerLayer">The maximum number of results to return per layer.</param>
            <param name="screenCoordinate">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the size of the circle used during the identify operation. 
            A tolerance of 0 corresponds to a circle with a diameter of 1 DIP, centered on the screen_coordinate. 
            Tolerance values above 0 increase the identify circle's radius by that amount in DIPs.</param>
            <returns>A task that represents the asynchronous identify popup operation on the view.
            The value of the TResult parameter contains a collection of <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult"/></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GeoView.FindLayerByCoreLayer(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>
            Find a layer in the layer collections that matches the given CoreLayer or null if not found.
            </summary>
            <remarks>
            To be overridden by GeoView derived classes (MapView, SceneView)
            </remarks>
            <param name="coreLayer"></param>
            <returns>Layer</returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewTapped">
            <summary>
            Occurs when an otherwise unhandled Tap interaction occurs over the hit test
            area of the view.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewDoubleTapped">
            <summary>
            Occurs when an otherwise unhandled DoubleTap interaction occurs over the hit test
            area of the view.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewHolding">
            <summary>
            Occurs when an otherwise unhandled holding interaction occurs over the hit test
            area of the view.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The PropertyChanged event can indicate all properties on the object have changed by using
            either <c>null</c> or <see cref="F:System.String.Empty"/> as the property name in the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.IsLogoVisible">
            <summary>
            Gets or sets a value indicating whether the Esri Logo is visible.
            </summary>
            <remarks>
            If your application uses data served by Esri through ArcGIS Online, you must display this logo.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.TimeExtent">
            <summary>
            Gets or sets the view <see cref="T:Esri.ArcGISRuntime.Data.TimeExtent"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.SpatialReference">
            <summary>
            Gets the current spatial reference of the map
            </summary>
            <remarks>
            <para>You can observe changes to this property by listening to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.IsWrapAroundEnabled">
            <summary>
            Indicates whether the wrap around feature is currently active. For wrap around to be
            active the <see cref="P:Esri.ArcGISRuntime.UI.MapView.WrapAroundMode"/> property must be set to true and the SpatialReference 
            of the MapView control must be a SpatialReference that supports wrapping. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.IsNavigating">
            <summary>
            Gets a value indicating whether the map is currently navigating. 
            when navigation has finished the <see cref="E:Esri.ArcGISRuntime.UI.GeoView.NavigationCompleted"/> event will be raised.
            </summary>
            <value>
            <c>true</c> if this instance is navigating; otherwise, <c>false</c>.
            </value>
            <seealso cref="E:Esri.ArcGISRuntime.UI.GeoView.NavigationCompleted"/>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GeoView.NavigationCompleted">
            <summary>
            When navigation on the map has completed this event will be raised.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.UI.GeoView.IsNavigating"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoView.DrawStatus">
            <summary>
            Returns the current draw status
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.MapView">
            <summary>
            The MapView is a container that holds a <see cref="T:Esri.ArcGISRuntime.Mapping.Map">Map</see>. It is the mapping component of 
            the ArcGIS Runtime .NET SDK. It can contain mapping layers and responds to user interaction (touch, mouse, keyboard) and 
            provides behavior for map navigation. It has multiple properties such as its extent, scale, zoom factor, rotation, etc. 
            </summary>
            <remarks>
            <para>
            The MapView is a container that holds a <see cref="T:Esri.ArcGISRuntime.Mapping.Map">Map</see>. A Map holds a collection of 
            <a href="071b1757-82a0-4351-815a-9e14000eebe3.htm">operational layers</a> and <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/>. 
            Layers are visual representations of geographic information and come in many forms. The types of layers that are displayed 
            in a MapView are two dimensional in nature; meaning they are displayed in X/Y (a.k.a. Latitude/Longitude) coordinate space.
            </para>
            <para>
            There is only one Map per MapView and it is set by the <see cref="P:Esri.ArcGISRuntime.UI.MapView.Map">MapView.Map</see> Property. 
            Multiple Map objects can be created and swapped out dynamically as the application is running in the MapView.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.#ctor(Android.Content.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.MapView"/> class.
            </summary>
            <param name="context">The Context the view is running in, through which it can access resources, themes, etc</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.MapView"/> class.
            </summary>
            <param name="context">The Context the view is running in, through which it can access resources, themes, etc</param>
            <param name="attr">The attributes of the AXML element declaring the view</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.OnMeasure(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.OnLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddView(Android.Views.View,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddView(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddView(Android.Views.View,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveAllViews">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveViewAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveViews(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveAllViewsInLayout">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveViewInLayout(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RemoveViewsInLayout(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.BringChildToFront(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.GetChildAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.IndexOfChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddChildrenForAccessibility(System.Collections.Generic.IList{Android.Views.View})">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RequestChildFocus(Android.Views.View,Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ClearChildFocus(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ClearDisappearingChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.AddStatesFromChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ChildDrawableStateChanged(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetAddStatesFromChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetClipChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ShouldDelayChildPressedState">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ShowContextMenuForChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.FocusableViewAvailable(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RequestTransparentRegion(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.RecomputeViewAttributes(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.OnRequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.EndViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.StartViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.UpdateViewLayout(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.ChildCount">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.FocusedChild">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.#ctor">
            <summary>
            Initializes a new instance of the MapView class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.ScreenToLocation(Android.Graphics.PointF)">
            <summary>
            Converts a screen point relative to the upper left of the map into a location on the map.
            </summary>
            <param name="screenPoint">Screen point relative to the upper left</param>
            <returns>a location in map coordinates.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Converts a location in map coordinates to a screen coordinate relative to the
            upper-left corner of the map.
            </summary>
            <param name="location">The location in map coordinates to convert to screen coordinate.</param>
            <returns>
            Screen location in this map control's local display coordinate system
            </returns>
            <remarks>
            <para>
            The screen location returned is relative to the upper left corner of
            the map control. If you need a location relative to another visual
            element, use the TransformToVisual method to
            create a transformation between the map and another visual element.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,System.Boolean)">
            <summary>
            Converts a location in map coordinates to a screen coordinate relative to the
            upper-left corner of the map.
            </summary>
            <param name="location">The location in map coordinates to convert to screen coordinate.</param>
            <param name="adjustForWrapAround">if set to <c>true</c> takes the map's wrap around mode into consideration.</param>
            <returns>
            Screen location in this map control's local display coordinate system
            </returns>
            <remarks>
            <para>
            The screen location returned is relative to the upper left corner of
            the map control. If you need a location relative to another visual
            element, use the TransformToVisual method to
            create a transformation between the map and another visual element.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint,System.TimeSpan,Esri.ArcGISRuntime.UI.AnimationCurve)">
            <summary>
            Animates the view to the given Viewpoint location using the provided animation curve
            </summary>
            <param name="viewpoint">Viewpoint object</param>
            <param name="duration">Duration of the animation</param>
            <param name="animationCurve">The animation curve for controlling the acceleration and decelleration of the animation.</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Centers the view on the provided point.
            </summary>
            <param name="center">Point to center the view on.</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>		
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(System.Double,System.Double)">
            <summary>
            Centers the view on the provided point.
            </summary>
            <param name="latitude">Latitude in a WGS84 geographic coordinate system</param>
            <param name="longitude">Longitude in a WGS84 geographic coordinate system</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)">
            <summary>
            Centers the view on the provided point and zooms to the provided scale.
            </summary>
            <param name="center">Point to center the view on.</param>
            <param name="scale">The reference scale to zoom to</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(System.Double,System.Double,System.Double)">
            <summary>
            Centers the view on the provided point and zooms to the provided scale.
            </summary>
            <param name="latitude">Latitude in a WGS84 geographic coordinate system</param>
            <param name="longitude">Longitude in a WGS84 geographic coordinate system</param>
            <param name="scale">The reference scale to zoom to</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointScaleAsync(System.Double)">
            <summary>
            Zooms to the given scale.
            </summary>
            <param name="scale">The scale to zoom to, ie '50000' to zoom to 1:50,000 scale.</param>
            <returns><c>True</c> if the zoom animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointRotationAsync(System.Double)">
            <summary>
            Sets the rotation angle of the map
            </summary>
            <param name="rotation">Rotation angle in degrees.</param>
            <returns><c>True</c> if the rotation animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <remarks>
            Angle will be normalized between 0 and 360 degrees.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointGeometryAsync(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Zooms to the provided geometry.
            </summary>
            <param name="boundingGeometry">The geometry to zoom to. </param>
            <returns><c>True</c> if the zoom animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <remarks>
            If the bounding geometry is a point, the map will only pan. If you want to center and zoom on a point, use <see cref="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointGeometryAsync(Esri.ArcGISRuntime.Geometry.Geometry,System.Double)">
            <summary>
            Zooms to the provided geometry and leaves some padding around the geometry.
            </summary>
            <param name="boundingGeometry">The geometry to zoom to. </param>
            <param name="padding">Minimum amount of padding around the bounding geometry in pixels.</param>
            <returns><c>True</c> if the zoom animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <remarks>
            If the bounding geometry is a point, the map will only pan. If you want to center and zoom on a point, use <see cref="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointCenterAsync(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapView.OnCorePropertyChanged(RuntimeCoreNet.GeneratedWrappers.CoreState)">
            <summary>
            Called when whenever a core property changes
            </summary>
            <param name="coreProperty">Name of the core property.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.Map">
            <summary>
            Gets or sets the map the view is rendering.
            </summary>
            <value>The map the view renders.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.MapScale">
            <summary>
            Gets the current scale of the map
            </summary>
            <remarks>
            Returns <see cref="F:System.Double.NaN"/> if the map isn't in a ready-state.
            <para>You can observe changes to this property by listening to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.MapRotation">
            <summary>
            Gets the current rotational heading of the map
            </summary>
            <remarks>
            <para>You can observe changes to this property by listening to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.UnitsPerPixel">
            <summary>
            Gets the current size of each device independent pixel in map units.
            </summary>
            <remarks>
            Returns <see cref="F:System.Double.NaN"/> if the map isn't in a ready-state.
            <para>You can observe changes to this property by listening to the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.VisibleArea">
            <summary>
            Gets the view's visible area.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.WrapAroundMode">
            <summary>
            Gets or sets a whether the map will do continuous pan across the antimeridian
            </summary>
            <remarks>
            Note that not all spatial references supports this mode, and setting it to true in those cases,
            this property will have no effect. You can check the <see cref="P:Esri.ArcGISRuntime.UI.GeoView.IsWrapAroundEnabled"/> property
            to determine if this MapView is wrapping.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.IsMagnifierAllowedToPanMap">
            <summary>
            Gets or sets a value indicating whether magnifier is allowed to pan the map 
            when it touches a boundary of the map view.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.IsMagnifierEnabled">
            <summary>
            Gets or sets a value indicating whether magnifier is enabled on the map view.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.Labeling">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.UI.ViewLabelProperties"/>.
            </summary>
            <value>The <see cref="T:Esri.ArcGISRuntime.UI.ViewLabelProperties"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.LocationDisplay">
            <summary>
            Gets or sets the location display settings used for display the device's current location.
            </summary>
            <value>
            The location display settings.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.MapView.BackgroundGrid">
            <summary>Gets or sets the background grid rendered behind the map data.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapGLSurfaceView.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            Invokes a gesture on the <see cref="T:Esri.ArcGISRuntime.UI.MapView"/>
            </summary>
            <param name="e">The event data that describes the property that changed.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.MapGLSurfaceView.SurfaceDestroyed(Android.Views.ISurfaceHolder)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
            <param name="holder">An <see cref="T:Android.Views.ISurfaceHolder"/> object.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.SceneView">
            <summary>
            The SceneView is a container that holds a <see cref="T:Esri.ArcGISRuntime.Mapping.Scene">Scene</see>. It is the 3d mapping component of 
            the ArcGIS Runtime .NET SDK. It can contain mapping layers and responds to user interaction (touch, mouse, keyboard) and 
            provides behavior for scene navigation. It has multiple properties. 
            </summary>
            <remarks>
            <para>
            The SceneView is a container that holds a <see cref="T:Esri.ArcGISRuntime.Mapping.Scene">Scene</see>. A Scene holds a collection of 
            <a href="071b1757-82a0-4351-815a-9e14000eebe3.htm">operational layers</a>, <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/>.
            Layers are visual representations of geographic information and come in many forms. The types of layers that are displayed 
            in a SceneView are three dimensional.
            </para>
            <para>
            There is only one Scene per SceneView and it is set by the <see cref="P:Esri.ArcGISRuntime.UI.SceneView.Scene">SceneView.Scene</see> Property. 
            Multiple Scene objects can be created and swapped out dynamically as the application is running in the SceneView.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddView(Android.Views.View,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddView(Android.Views.View,System.Int32,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddView(Android.Views.View,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddView(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveAllViews">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveView(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveViewAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveViews(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveAllViewsInLayout">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveViewInLayout(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RemoveViewsInLayout(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.BringChildToFront(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.GetChildAt(System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.IndexOfChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddChildrenForAccessibility(System.Collections.Generic.IList{Android.Views.View})">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RequestChildFocus(Android.Views.View,Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RequestChildRectangleOnScreen(Android.Views.View,Android.Graphics.Rect,System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ClearChildFocus(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ClearDisappearingChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.AddStatesFromChildren">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ChildDrawableStateChanged(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.GetChildVisibleRect(Android.Views.View,Android.Graphics.Rect,Android.Graphics.Point)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.SetAddStatesFromChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.SetClipChildren(System.Boolean)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ShouldDelayChildPressedState">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ShowContextMenuForChild(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.StartActionModeForChild(Android.Views.View,Android.Views.ActionMode.ICallback)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.FocusableViewAvailable(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RequestTransparentRegion(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.RecomputeViewAttributes(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.OnRequestSendAccessibilityEvent(Android.Views.View,Android.Views.Accessibility.AccessibilityEvent)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.EndViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.FocusSearch(Android.Views.View,Android.Views.FocusSearchDirection)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.InvalidateChildInParent(System.Int32[],Android.Graphics.Rect)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.StartViewTransition(Android.Views.View)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.UpdateViewLayout(Android.Views.View,Android.Views.ViewGroup.LayoutParams)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.SceneView.ChildCount">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.SceneView.FocusedChild">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.#ctor(Android.Content.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/> class.
            </summary>
            <param name="context">The Context the view is running in, through which it can access resources, themes, etc</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.#ctor(Android.Content.Context,Android.Util.IAttributeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/> class.
            </summary>
            <param name="context">The Context the view is running in, through which it can access resources, themes, etc</param>
            <param name="attr">The attributes of the AXML element declaring the view</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.OnMeasure(System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.OnLayout(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToBaseSurface(Android.Graphics.PointF)">
            <summary>
            Converts a screen coordinate (in pixels) to a coordinate on the scene view's base surface.
            </summary>
            <param name="screenPoint">Screen point relative to the upper left</param>
            <returns>a location in map coordinates on the base surface of the scene.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToLocationAsync(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.UI.ScreenPointVisibility@)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Converts a location in map coordinates to a screen coordinate relative to the
            upper-left corner of the scene.
            </summary>
            <param name="location">The location in world coordinates to convert to screen coordinate.</param>
            <returns>
            Screen location in this scene view control's local display coordinate system
            </returns>
            <remarks>
            <para>
            The screen location returned is relative to the upper left corner of
            the scene view control. If you need a location relative to another visual
            element, use the TransformToVisual method to
            create a transformation between the map and another visual element.
            </para>
            </remarks>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToBaseSurface(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToLocationAsync(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.UI.ScreenPointVisibility@)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.UI.ScreenPointVisibility@)">
            <summary>
            Converts a location in map coordinates to a screen coordinate relative to the
            upper-left corner of the scene.
            </summary>
            <param name="location">The location in world coordinates to convert to screen coordinate.</param>
            <param name="visibility">The visibility of the point on the screen.</param>
            <returns>
            Screen location in this scene view control's local display coordinate system
            </returns>
            <exception cref="T:System.ArgumentNullException">location</exception>
            <remarks>
            The screen location returned is relative to the upper left corner of
            the scene view control. If you need a location relative to another visual
            element, use the TransformToVisual method to
            create a transformation between the map and another visual element.
            </remarks>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToBaseSurface(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToLocationAsync(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToLocationAsync(Android.Graphics.PointF)">
            <summary>
            Async method to convert a screen point relative to the upper left of the SceneView into a location 
            accounting for 3D features within the Scene.
            </summary>
            <remarks>
            This method checks for intersection between the input screen point and visible 3D features on the Scene.
            It returns a point with X, Y and Z values matching the intersection point. If the input point does not
            intersect a visible 3D feature, the Scene surface
            is used to retrieve the point values. If the input point does not intersect the Scene surface or 
            any visible 3D features a null value is returned.
            
            This method differs from <see cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToBaseSurface(Android.Graphics.PointF)"/> in that the latter only uses the Scene Surface and 
            ignores visible 3D features. The algorithm is inherently slower than ScreenToBaseSurface and is therefore an 
            async operation.
            </remarks>
            <param name="screenPoint">Screen point relative to the upper left</param>
            <returns>MapPoint</returns>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.ScreenToBaseSurface(Android.Graphics.PointF)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint)"/>
            <seealso cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.UI.ScreenPointVisibility@)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.SetViewpointCamera(Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Sets the viewpoint camera in the scene view.
            </summary>
            <param name="camera">The new camera information for the scene view.</param>
            <exception cref="T:System.ArgumentNullException">camera</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.SetViewpointCameraAsync(Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Changes the scene view to the new camera viewpoint asynchronously.
            </summary>        
            <param name="camera">The new camera information for the scene view.</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <exception cref="T:System.ArgumentNullException">camera</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.SetViewpointCameraAsync(Esri.ArcGISRuntime.Mapping.Camera,System.TimeSpan)">
            <summary>
            Changes the scene view to the new camera viewpoint asynchronously using the specified duration to arrive.
            </summary>
            <param name="camera">The new camera information for the scene view.</param>      
            <param name="duration">Duration of the animation</param>
            <returns><c>True</c> if the set view animation completed, <c>false</c> if it was interrupted by another view navigation.</returns>
            <exception cref="T:System.ArgumentNullException">camera</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneView.OnCorePropertyChanged(RuntimeCoreNet.GeneratedWrappers.CoreState)">
            <summary>
            Called when whenever a core property changes
            </summary>
            <param name="coreProperty">Name of the core property.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.SceneView.Scene">
            <summary>
            Gets or sets the scene the view is rendering.
            </summary>
            <value>The scene the view renders.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.SceneView.Camera">
            <summary>
            Gets the current Camera for the view.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.SceneView.AtmosphereEffect">
            <summary>
            Gets or sets the effect applied to the scene's atmosphere.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneGLSurfaceView.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            Invokes a gesture on the <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>
            </summary>
            <param name="e">The event data that describes the property that changed.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.SceneGLSurfaceView.SurfaceDestroyed(Android.Views.ISurfaceHolder)">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.RotateGestureDetector">
            <summary>
            Android gesture detector for two-finger rotation gestures
            </summary>
            <remarks>
            - Follows Android SDK GestureDetector pattern
            - Client must implement IOnRotateGestureListener to get OnRotate* callbacks
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.RotateGestureDetector.IOnRotateGestureListener">
            <summary>
            Interface that defines OnRotate* methods called by RotateGestureDetector
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.RotateGestureDetector.IsInProgress">
            <summary>Rotation gesture is in progress</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.RotateGestureDetector.Rotation">
            <summary>Rotation (in degrees) of the currently in-progress gesture</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.RotateGestureDetector.#ctor(Android.Content.Context,Esri.ArcGISRuntime.UI.RotateGestureDetector.IOnRotateGestureListener)">
            <summary>
            Creates a new RotateGestureDetector
            </summary>
            <param name="context">Android Context</param>
            <param name="listener">IOnRotateGestureListener implementation</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.RotateGestureDetector.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            OnTouchEvent handles Android MotionEvents
            </summary>
            <remarks>
            - Client should pass this method a synchronous stream of MotionEvents.
            - Ths method will call IOnRotateGestureListener.OnRotate* methods when a correct gesture is identified.
            - Will not start a rotation gesture until the gesture is known to be not sloppy and rotation is 
              greater than the InitialRotationThreshold value.
            </remarks>
            <param name="ev">Android MotionEvent</param>
            <returns>true if event was handled otherwise false</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.TwoFingerTapDetector">
            <summary>
            Android gesture detector for two-finger tap gestures
            </summary>
            <remarks>
            - Follows Android SDK GestureDetector pattern
            - Client must implement ITwoFingerTapListener to get OnTwoFingerTap callbacks
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.TwoFingerTapDetector.ITwoFingerTapListener">
            <summary>
            Interface that defines OnTwoFingerTap method used by TwoFingerTapDetector
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.TwoFingerTapDetector.#ctor(Android.Content.Context,Esri.ArcGISRuntime.UI.TwoFingerTapDetector.ITwoFingerTapListener)">
            <summary>
            Creates a new TwoFingerTapDetector
            </summary>
            <param name="context">Android Context</param>
            <param name="listener">ITwoFingerTapListener implementation</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.TwoFingerTapDetector.OnTouchEvent(Android.Views.MotionEvent)">
            <summary>
            OnTouchEvent handles Android MotionEvents
            </summary>
            <remarks>
            - Client should pass this method a synchronous stream of MotionEvents.
            - Ths method will call ITwoFingerTapListener.OnTwoFingerTap when the correct gesture is identified.
            </remarks>
            <param name="e">Android MotionEvent</param>
            <returns>true if event was handled otherwise false</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.AnimationCurve">
            <summary>
              Control how a the view is moved between positions.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.UI.MapView.SetViewpointAsync(Esri.ArcGISRuntime.Mapping.Viewpoint,System.TimeSpan,Esri.ArcGISRuntime.UI.AnimationCurve)"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.Linear">
            <summary>
              Move linear.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInQuad">
            <summary>
              Move in quadratically.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutQuad">
            <summary>
              Move out quadratically.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutQuad">
            <summary>
              Move in and out quadratically.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInCubic">
            <summary>
              Move in cubicly.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutCubic">
            <summary>
              Move out cubicly.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutCubic">
            <summary>
              Move in and out cubicly.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInQuart">
            <summary>
              Move in quartic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutQuart">
            <summary>
              Move out quartic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutQuart">
            <summary>
              Move in and out quartic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInQuint">
            <summary>
              Move in quintic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutQuint">
            <summary>
              Move out quintic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutQuint">
            <summary>
              Move in and out quintic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInSine">
            <summary>
              Move in sine.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutSine">
            <summary>
              Move out sine.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutSine">
            <summary>
              Move in and out sine.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInExpo">
            <summary>
              Move in exponentially.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutExpo">
            <summary>
              Move out exponentially.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutExpo">
            <summary>
              Move in and out exponentially.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInCirc">
            <summary>
              Move in circularly.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseOutCirc">
            <summary>
              Move out circularly.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AnimationCurve.EaseInOutCirc">
            <summary>
              Move in and out circularly.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.BackgroundGrid">
            <summary>
            A map background determines what the map view looks like without anything data available in the map view.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.BackgroundGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.BackgroundGrid"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.BackgroundGrid.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.BackgroundGrid"/> class.
             </summary>
            <param name="backgroundColor">The color of the background.</param>
            <param name="gridLineColor">The color of the lines for the grid.</param>
            <param name="gridLineWidth">The width of the lines for the grid, in pixels.</param>
            <param name="gridSize">The size of the grid squares, in pixels.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.BackgroundGrid.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The PropertyChanged event can indicate all properties on the object have changed by using
            either <c>null</c> or <see cref="F:System.String.Empty"/> as the property name in the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.BackgroundGrid.Color">
            <summary>Gets or sets the background color</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.BackgroundGrid.GridLineColor">
            <summary>Gets or sets the grid line color</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.BackgroundGrid.GridLineWidth">
            <summary>Gets or sets the grid line width, in pixels</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.BackgroundGrid.GridSize">
            <summary>Returns the size of each grid square, in pixels</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GeoViewInputEventArgs">
            <summary>
            Event argument used by the <see cref="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewHolding"/>, 
            <see cref="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewTapped"/> and <see cref="E:Esri.ArcGISRuntime.UI.GeoView.GeoViewDoubleTapped"/> events.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoViewInputEventArgs.Position">
            <summary>
            Gets the screen position on the view where the event occured.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoViewInputEventArgs.Location">
            <summary>
            Gets the location on the view where the event occured.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GeoViewInputEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling
            for a routed event as it travels the route.</summary>
            <value>
             If setting, set to <c>true</c> if the event is to be marked handled; otherwise <c>false</c>.
             If reading this value, true indicates that either a class handler, or some
             instance handler along the route, has already marked this event handled.
             <c>false</c> indicates that no such handler has marked the event handled. The default
             value is <c>false</c>.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.DrawStatus">
            <summary>The current status of the view's data drawing.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.DrawStatus.InProgress">
            <summary>Drawing of the view is still in progress.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.DrawStatus.Completed">
            <summary>Drawing of the viwe is complete.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.WrapAroundMode">
            <summary>
            Defines whether wrap around should be used on the map view.
            </summary>
            <remarks>
            <p><b>Remark</b>: Allows you to change the wrap around mode for the MapView.</p>
            </remarks>
            <seealso cref="P:Esri.ArcGISRuntime.UI.MapView.WrapAroundMode"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.WrapAroundMode.EnabledWhenSupported">
            <summary>
              Enable wrap around is supported. Not all data supports wrap around.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.WrapAroundMode.Disabled">
            <summary>
              Disable wrap around.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.AtmosphereEffect">
            <summary>
            Various atmosphere effects.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AtmosphereEffect.None">
            <summary>
            No atmosphere effect.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AtmosphereEffect.HorizonOnly">
            <summary>
            Applies the atmosphere effect at the horizon of the scene view. It is not applied to the surface.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.AtmosphereEffect.Realistic">
            <summary>
            Applies the atmosphere effect throughout the surface of the scene.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.ScreenPointVisibility">
            <summary>Various modes of visibility that can be applied to a <see cref="M:Esri.ArcGISRuntime.UI.SceneView.LocationToScreen(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.UI.ScreenPointVisibility@)"/> result.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.ScreenPointVisibility.Visible">
            <summary>Not visible.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.ScreenPointVisibility.HiddenByBaseSurface">
            <summary>Blocked by base_surface</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.ScreenPointVisibility.HiddenByEarth">
            <summary>Point is on other side of globe</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.ScreenPointVisibility.HiddenByElevation">
            <summary>Elevation layer is blocking visibility</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.ScreenPointVisibility.NotOnScreen">
            <summary>Not within current viewport</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.ViewLabelProperties">
            <summary>
            Specifies the label properties for the view.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewLabelProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.ViewLabelProperties" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewLabelProperties.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.ViewLabelProperties" /> class.
            </summary>
            <param name="isAnimationEnabled">A value indicating whether animation is enabled.</param>
            <param name="isLabelingEnabled">A value indicating whether labeling is enabled.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.ViewLabelProperties.IsAnimationEnabled">
            <summary>
             Gets or sets a value indicating whether animation is enabled in the view.
             </summary>
             <value>A value indicating whether animation is enabled in the view.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.ViewLabelProperties.IsLabelingEnabled">
            <summary>
             Gets or sets a value indicating whether labeling is enabled in the view.
             </summary>
             <value>A value indicating whether labeling is enabled in the view.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ViewLabelProperties.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.ViewLabelProperties.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.Graphic">
            <summary>Instances of this class represent graphics. Graphics can be displayed 
            on the map through a GraphicsOverlay. Graphics can be used as input to a task,
            or they can be used to display output from a task, or in response to user interaction.
            </summary>
            <remarks>
            <para>Each graphic must contain an <see cref="P:Esri.ArcGISRuntime.UI.Graphic.Geometry"/> describing the location and 
            the shape of the graphic.</para>
            <para>A graphic can be associated with an <see cref="P:Esri.ArcGISRuntime.UI.Graphic.Symbol"/> which determines how 
            the graphic looks. Alternatively, the graphics layer can be assigned an <see cref="T:Esri.ArcGISRuntime.Symbology.Renderer"/>
            which determines the appearance of all graphics in the layer. Note, symbols associated with 
            individual graphics take precedence over the symbols chosen by the renderer. The symbol used 
            depends upon the geometry type associated with the graphic. A <see cref="T:Esri.ArcGISRuntime.Symbology.MarkerSymbol"/> is 
            used for <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> and <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint"/> geometries, 
            <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol"/> for <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> geometries,  and <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol"/> for 
            <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> geometries.</para>
            <para>A graphic can contain a set of attributes (key-value pairs) providing more information 
            about the graphic.</para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class and setting 
            the geometry.
            </summary>
            <param name="geometry">Graphic geometry.</param>
            <exception cref="T:System.ArgumentNullException">geometry</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class and setting 
            the attributes.
            </summary>
            <param name="attributes">Attributes as a key value pair.</param>
            <exception cref="T:System.ArgumentNullException">attributes</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class and setting 
            the geometry.
            </summary>
            <param name="geometry">Graphic geometry.</param>
            <param name="attributes">Attributes as a key value pair.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class and setting 
            the geometry and symbol.
            </summary>
            <param name="geometry">Graphic geometry.</param>
            <param name="symbol">Symbol to draw the graphic.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.Graphic" /> class and setting 
            the geometry, attributes and symbol.
            </summary>
            <param name="geometry">Graphic geometry.</param>
            <param name="attributes">The attributes.</param>
            <param name="symbol">Symbol to draw the graphic.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.Graphic.Geometry">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the graphic.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the graphic.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.Graphic.Symbol">
            <summary>
            Gets or sets the symbol for the graphic.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.Graphic.IsVisible">
            <summary>
            Gets or sets whether this graphic is rendered on a map.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.Graphic.IsSelected">
            <summary>
            Gets or sets whether this graphic is selected.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.Graphic.ZIndex">
            <summary>
            Gets or sets the Z index this graphic is rendered at within the
            GraphicsOverlay it belongs to.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.Graphic.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.Graphic.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GraphicCollection">
            <summary>
            An observable collection of <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicCollection.FromJsonAsync(System.String)">
            <summary>
            Deserializes the graphics from a JSON string containing the result of a query.
            </summary>
            <param name="json">
            The JSON string with the result of a query.
            </param>
            <returns>
            The task object representing the asynchronous 'from json' operation. The value of the task result is an IEnumerable of <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/> objects.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GraphicsOverlay">
            <summary>
            A collection of vector <see cref="T:Esri.ArcGISRuntime.UI.Graphic">graphics</see> for overlaying on the map
            </summary>	
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlay" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.Extent">
            <summary>
            Gets the extent of the GraphicsOverlay.
            </summary>
            <value>The extent of the GraphicsOverlay.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.RenderingMode">
            <summary>
            Gets or sets a value indicating which rendering mode to use
            </summary>
            <remarks>
            <para>
            To render very large amounts of features, set the rendering mode to
            <see cref="F:Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Static"/>.
            When static, graphics will not refresh during pan and zoom operations,
            but can better maintain a good map responsiveness. The amount of graphics
            the layer can handle in this mode is mainly limited by the system memory.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectionColor">
            <summary>
            Gets or sets the color for selected graphics. 
            </summary>
            <remarks>The color is used to highlight graphics that have <see cref="P:Esri.ArcGISRuntime.UI.Graphic.IsSelected"/> property set to true.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.Renderer">
            <summary>
            Gets or sets the renderer used for generating symbols.
            </summary>
            <remarks>Symbols set on the individual graphics will override the renderer.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.IsVisible">
            <summary>
            Gets or sets the overlay visibility.
            </summary>
            <value>
            The visibility.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.Opacity">
            <summary>
            Gets or sets the opacity.  Must be a value between 0 and 1.
            </summary>
            <value>
            The opacity.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.IsPopupEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.PopupDefinition"/> defined is enabled.
            </summary>
            <remarks>
            Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.PopupDefinition">
            <summary>
            Gets or sets the pop-up definition for the graphics overlay.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.MinScale">
            <summary>
            Gets or sets the minimum scale to render this layer at.
            A large number allows the map to display the layer when zooming further out.
            </summary>
            <value>
            The minimum scale.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">MinScale</exception>
            <remarks>
            <para>
            A scale is usually referred to as 1:X, where X is the scale specified here.
            This value is the relative scale to the real world, where on inch on the screen is
            X inches in the real world. Note that this is only an approximation and is dependent
            on the map's projection that can add some distortion, as well as the system's
            reported DPI setting which doesn't necessarily match the actual DPI of the screen.
            </para>
            <para>The default value of this property is <see cref="F:System.Double.NaN"/>
            which makes the layer unbounded by any scale.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.MaxScale">
            <summary>
            Gets or sets the maximum scale to display this layer at.
            A small number allows the map to display the layer when zooming further in.
            </summary>
            <value>
            The maximum scale.
            </value>
            <remarks>
            <para>
            A scale is usually referred to as 1:X, where X is the scale specified here.
            This value is the relative scale to the real world, where on inch on the screen is
            X inches in the real world. Note that this is only an approximation and is dependent
            on the map's projection that can add some distortion, as well as the system's
            reported DPI setting which doesn't necessarily match the actual DPI of the screen.
            </para>
            <para>The default value of this property is <see cref="F:System.Double.NaN"/>
            which makes the layer unbounded by any scale.</para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.SceneProperties">
            <summary>Gets or sets the scene properties for the graphics overlay.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.Graphics">
            <summary>
            Gets the graphics collection.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.SelectedGraphics">
            <summary>
            Gets the selected graphics.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlay.ClearSelection">
            <summary>
            Unselects all graphics in the layer
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GraphicsOverlay.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlay.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection">
            <summary>
            A collection of GraphicsOverlays
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection"/> class.
            </summary>
            <param name="graphicsOverlays">The core vector of GraphicsOverlays.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event  />).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
             Raises the <see cref="E:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.IndexOf(Esri.ArcGISRuntime.UI.GraphicsOverlay)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Insert(System.Int32,Esri.ArcGISRuntime.UI.GraphicsOverlay)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Layer.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Add(Esri.ArcGISRuntime.UI.GraphicsOverlay)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Contains(Esri.ArcGISRuntime.UI.GraphicsOverlay)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.CopyTo(Esri.ArcGISRuntime.UI.GraphicsOverlay[],System.Int32)">
            <summary>
            Copies to list to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.Remove(Esri.ArcGISRuntime.UI.GraphicsOverlay)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.GraphicsOverlayCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.GraphicsRenderingMode">
            <summary>
            Enumeration for setting the <see cref="P:Esri.ArcGISRuntime.UI.GraphicsOverlay.RenderingMode"/> on <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlay"/>
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Dynamic">
            <summary>
            Update graphics as the map zooms and pans in an immediate mode.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Static">
            <summary>
            Only update graphics between zoom and pan operations in a retained mode.
            Use this mode to handle large amount of graphics.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.ColorConverter">
            <summary>
             *FOR INTERNAL USE ONLY* Provides a way of converting to a strongly-typed color from a string representation.
            </summary>
            <exclude/>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns a value indicating whether the converter can convert from the specified type
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type,
            using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>Returns whether this converter can convert the object to the specified type.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.UI.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified
            context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.UI.PointerDeviceType">
            <summary>
            Source device type of an input (eg. Mouse, Stylus, Touch)
            </summary>
            <remarks>
            Enum may be reused by other Xamarin platforms
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISException">
            <summary>
            An ArcGIS specific runtime exception
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISException.ErrorCode">
            <summary>
            Gets the ArcGIS error code
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISException.HandleCoreError(RuntimeCoreNet.GeneratedWrappers.CoreError,System.Boolean)">
            <summary>
            Handler for core errors from native method calls, throws a managed exception.
            </summary>
            <param name="error">the core error</param>
            <param name="throwException">if false means shouldn't throw the exception for example cleanup during a finalizer thread destructor</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISRuntimeException">
            <summary>
            An ArcGIS Runtime exception
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServerException">
            <summary>
            An ArcGIS Server exception
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment">
            <summary>
            This class is used to control Initialization and process wide settings for the ArcGIS Runtime. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.OnBeforeFirstUseOfGeneratedWrapper">
            <summary>Called by first native wrapper class is created (from a static constructor). 
            Used to trigger automatic call to Initialize</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.Version">
            <summary>
            Initializes static state (pickup version number from assembly) for use in ArcGISRuntime class
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.Initialize">
            <summary>
            Initializes the ArcGIS Runtime environment.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:System.Exception">Thrown when a problem is encountered during initialization of the runtime deployment.</exception>
            <seealso cref="T:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment">For example usage see Esri.ArcGISRuntime.ArcGISRuntimeEnvironment</seealso>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.IsInitialized">
            <summary>
            Gets a value indicating whether the runtime environment is initialized.
            </summary>
            <value>
            	<see langword='true' /> if this runtime environment is initialized; otherwise, <see langword='false' />.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.ClientId">
            <summary>
            A unique client Id for this application. setting this allows the application to allow basic level functionality.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.License">
            <summary>
            Returns a class related to licensing the ArcGIS Runtime
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo">
            <summary>
            Defines editor tracking settings of a service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo.AllowOthersToDelete">
            <summary>
            Gets a value indicating whether others are allowed to delete features.
            </summary>
            <value>A value indicating whether others are allowed to delete features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo.AllowOthersToUpdate">
            <summary>
            Gets a value indicating whether others are allowed to update features.
            </summary>
            <value>A value indicating whether others are allowed to update features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo.EditorTrackingEnabled">
            <summary>
            Gets a value indicating whether editor tracking is enabled.
            </summary>
            <value>A value indicating whether editor tracking is enabled.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo.OwnershipBasedAccessControlEnabled">
            <summary>
            Gets a value indicating whether ownership-based access control is enabled.
            </summary>
            <value>A value indicating whether ownership-based access control is enabled.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities">
            <summary>
            Identifies the various synchronization capabilities of an ArcGIS Feature Service
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsAsync">
            <summary>
            Gets a value indicating whether sync operations for generate geodatabase and sync geodatabase can be run asynchronously.
            </summary>
            <value>A value indicating whether asynchronous operation is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsSyncModelGeodatabase">
            <summary>
            Gets a value indicating whether per replica synchronization is supported.
            </summary>
            <value>A value indicating whether per replica synchronization is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsSyncModelLayer">
            <summary>
            Gets a value indicating whether per layer synchronization is supported.
            </summary>
            <value>A value indicating whether per layer synchronization is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsRegisteringExistingData">
            <summary>
            Gets a value indicating whether registering existing data is supported.
            </summary>
            <value>A value indicating whether registering existing data is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsRollbackOnFailure">
            <summary>Gets if rollback on failure is supported.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsSyncDirectionControl">
            <summary>
            Gets a value indicating whether synchronization direction control is supported.
            </summary>
            <value>A value indicating whether synchronization direction control is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities.SupportsSyncModelNone">
            <summary>
            Gets a value indicating whether a sync model is supported.
            </summary>
            <value>A value indicating whether a sync model is supported.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo">
            <summary>
            Represents the service metadata for an ArcGIS Feature Service
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.CreateAsync(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Creates a feature service info from a URI.
            </summary>
            <param name="uri">Uri to the feature service.</param>
            <param name="credential">An optional credential.</param>
            <returns>The feature service metadata.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.Source">
            <summary>
            Gets or sets the ArcGIS REST service endpoint.
            </summary>
            <value>The ArcGIS REST service endpoint.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.AllowGeometryUpdates">
            <summary>
            Gets a value indicating whether the service allows geometry updates.
            </summary>
            <value>A value indicating whether the service allows geometry updates.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.CopyrightText">
            <summary>
            Gets the copyright of the service.
            </summary>
            <value>The copyright of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.Version">
            <summary>
            Gets the version of the service.
            </summary>
            <value>The version of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.Description">
            <summary>
            Gets the description of the service.
            </summary>
            <value>The description of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.DocumentInfo">
            <summary>
            Gets the document information of the service.
            </summary>
            <value>The document information of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.EditorTrackingInfo">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo"/>.
            </summary>
            <value>The <see cref="T:Esri.ArcGISRuntime.ArcGISServices.EditorTrackingInfo"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.IsZDefaultsEnabled">
            <summary>
            Gets a value indicating whether the service has default z values.
            </summary>
            <value>A value indicating whether the service has default z values.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FullExtent">
            <summary>
            Gets the full extent of the service.
            </summary>
            <value>The full extent of the service.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.HasStaticData">
            <summary>
            Gets a value indicating whether the service has static data.
            </summary>
            <value>A value indicating whether the service has static data.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.HasVersionedData">
            <summary>
            Gets a value indicating whether the service has versioned data.
            </summary>
            <value>A value indicating whether the service has versioned data.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.InitialExtent">
            <summary>
            Gets the initial extent of the service.
            </summary>
            <value>The initial extent of the service.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FeatureLayerInfos">
            <summary>
            Gets the collection of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> that represent layers of the service.
            </summary>
            <value>The collection of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> that represent layers of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.MaxRecordCount">
            <summary>
            Gets the maximum record count of the service.
            </summary>
            <value>The maximum record count of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FeatureServiceCapabilities">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FeatureServiceCapabilities"/> of the service.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FeatureServiceCapabilities"/> of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.ServiceDescription">
            <summary>
            Gets the service description of the service.
            </summary>
            <value>The service description of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SpatialReference">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SpatialReference"/> of the service.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SpatialReference"/> of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SupportsDisconnectedEditing">
            <summary>
            Gets a value indicating whether the service supports disconnected editing.
            </summary>
            <value>A value indicating whether the service supports disconnected editing.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SyncCapabilities">
            <summary>
            Gets the supported <see cref="T:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities"/> of the service.
            </summary>
            <value>The supported <see cref="T:Esri.ArcGISRuntime.ArcGISServices.SyncCapabilities"/> of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.SyncEnabled">
            <summary>
            Gets a value indicating whether the service supports synchronization.
            </summary>
            <value>A value indicating whether the service supports synchronization.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.TableInfos">
            <summary>
            Gets the collection of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> that represent tables of the service.
            </summary>
            <value>The collection of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> that represent tables of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.Unit">
            <summary>
            Gets the units supported by the service.
            </summary>
            <value>The units supported by the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.DefaultZ">
            <summary>
            Gets the default Z-value for the service.
            </summary>
            <value>The default Z-value for the service.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TextAntialiasingMode">
            <summary>
             An enumeration of various text antialiasing modes.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TextAntialiasingMode.Unknown">
            <summary>
             An unknown antialiasing mode.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TextAntialiasingMode.None">
            <summary>
             No text antialiasing is performed.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TextAntialiasingMode.Normal">
            <summary>
             Text antialiasing is performed as determined by the font.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TextAntialiasingMode.Force">
            <summary>
             Text is always drawn with antialiasing regardless of individual font parameters.
             </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo">
            <summary>
            Represents the service layer metadata for an ArcGIS Feature Layer
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.CreateAsync(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Creates a feature layer info from a URI.
            </summary>
            <param name="uri">Uri to the map service.</param>
            <param name="credential">An optional credential.</param>
            <returns>The map service metadata.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.ServiceLayerID">
            <summary>
            Gets the ID of the layer.
            </summary>
            <value>ID of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Source">
            <summary>
            Gets the ArcGIS REST service endpoint.
            </summary>
            <value>The ArcGIS REST service endpoint.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.AllowGeometryUpdates">
            <summary>
            Gets a value indicating whether geometry is allowed for update. 
            </summary>
            <value>A value indicating whether geometry is allowed for update.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.CopyrightText">
            <summary>
            Gets the copyright information.
            </summary>
            <value>The copyright information.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Capabilities">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities"/> of the layer.
            </summary>
            <value>The <see cref="T:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities"/> of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DataVersioned">
            <summary>
            Gets a value indicating whether data is versioned.
            </summary>
            <value>A value indicating whether data is versioned.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DefaultVisibility">
            <summary>
            Gets a value indicating whether layer is visible by default.
            </summary>
            <value>A value indicating whether layer is visible by default.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.ZDefault">
            <summary>
            Gets the default Z-value for the layer.
            </summary>
            <value>The default Z-value for the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.IsZDefaultsEnabled">
            <summary>
            Gets a value indicating whether layer defaults Z-values.
            </summary>
            <value>A value indicating whether layer defaults Z-values.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Description">
            <summary>
            Gets the description of the layer.
            </summary>
            <value>The description of the layer</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DisplayFieldName">
            <summary>
            Gets the name of the display field.
            </summary>
            <value>The name of the display field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DrawingInfo">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DrawingInfo"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.DrawingInfo"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.EditFieldsInfo">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.EditFieldsInfo"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.EditFieldsInfo"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.EffectiveMaxScale">
            <summary>
            Gets the effective maximum scale of the layer.
            </summary>
            <value>The effective maximum scale of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.EffectiveMinScale">
            <summary>
            Gets the effective minimum scale of the layer.
            </summary>
            <value>The effective minimum scale of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Extent">
            <summary>
            Gets the extent of the layer.
            </summary>
            <value>The extent of the layer.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.FeatureTemplates">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of this layer.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of this layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.FeatureTypes">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> of this layer.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> of this layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Fields">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.Field"/> of this layer.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.Data.Field"/> of this layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GeometryType">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GeometryType"/> of features in this layer.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GeometryType"/> of features in this layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GlobalIdFieldName">
            <summary>
            Gets the name of the global ID field.
            </summary>
            <value>The name of the global ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.HasAttachments">
            <summary>
            Gets a value indicating whether layer supports attachments.
            </summary>
            <value>A value indicating whether layer supports attachments</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.HasM">
            <summary>
            Gets a value indicating whether layer supports m-ordinates.
            </summary>
            <value>A value indicating whether layer supports m-ordinates</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.HasZ">
            <summary>
            Gets a value indicating whether layer supports z-ordinates.
            </summary>
            <value>A value indicating whether layer supports z-ordinates</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.LayerOrTableType">
            <summary>
            Gets the type of the layer, which is either layer or table.
            </summary>
            <value>The type of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.MaxRecordCount">
            <summary>
            Gets the maximum record count of the layer.
            </summary>
            <value>The maximum record count of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.MaxScale">
            <summary>
            Gets the maximum scale of the layer.
            </summary>
            <value>The maximum scale of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.MinScale">
            <summary>
            Gets the minimum scale of the layer.
            </summary>
            <value>The minimum scale of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.ServiceLayerName">
            <summary>
            Gets the name of the layer.
            </summary>
            <value>The name of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.ServiceSourceType">
            <summary>
            Gets the service type of the layer.
            </summary>
            <value>The service type of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.ObjectIdFieldName">
            <summary>
            Gets the name of the object ID field.
            </summary>
            <value>The name of the object ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.OwnershipBasedAccessControl">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo"/>.
            </summary>
            <value>The <see cref="T:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.SupportsAdvancedQueries">
            <summary>
            Gets a value indicating whether layer supports advanced queries.
            </summary>
            <value>A value indicating whether layer supports advanced queries.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.SupportsRollbackOnFailureParameter">
            <summary>
            Gets a value indicating whether layer supports rollback on failure parameter.
            </summary>
            <value>A value indicating whether layer supports rollback on failure parameter.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.SupportsStatistics">
            <summary>
            Gets a value indicating whether layer supports statistics.
            </summary>
            <value>A value indicating whether layer supports statistics.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.TimeInfo">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.TimeInfo"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.TimeInfo"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.TypeIdFieldName">
            <summary>
            Gets the name of the type ID field.
            </summary>
            <value>The name of the type ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.Version">
            <summary>
            Gets the version of the layer.
            </summary>
            <value>The version of the layer.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GetFeatureType(System.String)">
            <summary>
            Returns the feature type of the specified feature type name.
            </summary>
            <param name="name">The name of feature type to retrieve.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/>associated with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo.GetField(System.String)">
            <summary>
            Returns the field definition of the specified field name.
            </summary>
            <param name="fieldName">The name of field to retrieve.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.Field"/>associated with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode">
            <summary>
             An enumeration of various antialiasing modes.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.Unknown">
            <summary>
             An unknown antialiasing mode
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.None">
            <summary>
             No antialiasing is performed.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.Fastest">
            <summary>
             Minimal antialiasing is performed, optimized for speed.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.Fast">
            <summary>
             Some antialiasing is performed, optimized for speed with better quality than can be achieved with Fastest.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.Normal">
            <summary>
             A good balance of speed and quality.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.AntialiasingMode.Best">
            <summary>
             The best quality antialiasing. This option takes the longest to render.
             </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo">
            <summary>
            Contains detailed metadata information about an ArcGIS Server MapServer when a map service is published. Some of 
            the document information for the service include: title, author, keywords, whether to use anti-aliasing on graphics, etc..
            </summary>
            <remarks>  
            <para>
            Use either the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.DocumentInfo">ArcGISMapServiceInfo.ServiceDocumentInfo</see>
            or <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.DocumentInfo">FeatureServiceInfo.ServiceDocumentInfo</see>
            Properties to obtain a ServiceDocumentInfo object. 
            </para>
            <para>
            <b>TIP:</b> You can verify that various Properties of the ServiceDocumentInfo by comparing it to what is displayed in the ArcGIS Server
            REST Services Directory page by copying the Url of the MapServer into the address bar of an Internet web browser and scrolling
            down to the <b>Document Info</b> section. See the following screen shot:
            </para>
            <para>
            <img border="0" alt="Getting detailed metadata for ArcGIS Server MapServer web services." src="../media/DocumentInfo_AGS_REST.png"/>
            </para>
            </remarks>
            <seealso cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.DocumentInfo"/>
            <seealso cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.DocumentInfo"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.AntialiasingMode">
            <summary>
            Gets the anti aliasing mode of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Author">
            <summary>
            Gets the author of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Category">
            <summary>
            Gets the category of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Comments">
            <summary>
            Gets the comments of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Keywords">
            <summary>
            Gets the keywords of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Subject">
            <summary>
            Gets the subject of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.TextAntialiasingMode">
            <summary>
            Gets the text aliasing mode of the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceDocumentInfo.Title">
            <summary>
            Gets the title of the document information.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo">
            <summary>
            Provides various information on how to render features in a feature layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.LabelingInfo">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo"/> of this drawing info.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo"/> of this drawing info.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.Renderer">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.Renderer"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.Renderer"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.ScaleSymbols">
            <summary>
            Gets a value indicating whether symbols should be scaled.
            </summary>
            <value>a value indicating whether symbols should be scaled.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.ShowLabels">
            <summary>
            Gets a value indicating whether labels should be displayed.
            </summary>
            <value>a value indicating whether labels should be displayed.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.DrawingInfo.Transparency">
            <summary>
            Gets the transparency.
            </summary>
            <value>The transparency.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo">
            <summary>
            Provides the field names for the edit fields.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo.CreationDateField">
            <summary>
            Gets the name of the creation date field.
            </summary>
            <value>The name of the creation date field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo.CreatorField">
            <summary>
            Gets the name of the creator field.
            </summary>
            <value>The name of the creator field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo.EditDateField">
            <summary>
            Gets the name of the edit date field.
            </summary>
            <value>The name of the edit date field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo.EditorField">
            <summary>
            Gets the name of the editor field.
            </summary>
            <value>The name of the editor field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.EditFieldsInfo.Realm">
            <summary>
            Gets the name of the realm field.
            </summary>
            <value>The name of the realm field.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo">
            <summary>
            Specifies the label definition for a given scale range.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.LabelExpression">
            <summary>
             Gets the expression of the label, which may specify and/or format string or attribute field value.
             </summary>
             <value>The expression of the label.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.LabelPlacement">
            <summary>
             Gets the placement of the label with respect to that of its feature.
             </summary>
             <value>The placement of the label.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.MaxScale">
            <summary>
             Gets the maximum scale of the label.
             </summary>
             <value>The maximum scale of the label.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.MinScale">
            <summary>
             Gets the minimum scale of the label.
             </summary>
             <value>The maximum scale of the label.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.Symbol">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Symbology.TextSymbol"/> of the label.
            </summary>
            <value>The <see cref="T:Esri.ArcGISRuntime.Symbology.TextSymbol"/> of the label.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.UseCodedValues">
            <summary>
             Gets a value indicating whether label should use coded values.
             </summary>
             <value>A value indicating whether label should use coded values.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LabelingInfo.Where">
            <summary>
             Gets the where clause used to filter which features will be labeled.
             </summary>
             <value>The where clause used to filter which features will be labeled.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement">
            <summary>
             An enumeration of labeling placement options, which is used to determine 
             where the label for a feature should be positioned.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineAboveAfter">
            <summary>Line above after</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineAboveAlong">
            <summary>Line above along</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineAboveBefore">
            <summary>Line above before</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineAboveEnd">
            <summary>Line above end</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineAboveStart">
            <summary>Line above start</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineBelowAfter">
            <summary>Line below after</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineBelowAlong">
            <summary>Line below along</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineBelowBefore">
            <summary>Line below before</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineBelowEnd">
            <summary>Line below end</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineBelowStart">
            <summary>Line below start</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineCenterAfter">
            <summary>Line center after</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineCenterAlong">
            <summary>Line center along</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineCenterBefore">
            <summary>Line center before</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineCenterEnd">
            <summary>Line center end</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.LineCenterStart">
            <summary>Line center start</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointAboveCenter">
            <summary>Point above center</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointAboveLeft">
            <summary>Point above left</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointAboveRight">
            <summary>Point above right</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointBelowCenter">
            <summary>Point below center</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointBelowLeft">
            <summary>Point below left</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointBelowRight">
            <summary>Point below right</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointCenterCenter">
            <summary>Point center center</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointCenterLeft">
            <summary>Point center left</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PointCenterRight">
            <summary>Point center right</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.LabelingPlacement.PolygonAlwaysHorizontal">
            <summary>Polygon always horizontal</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.MapServiceCapabilities">
            <summary>
            Describes the capabilities of a map service.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.MapServiceCapabilities.SupportsData">
            <summary>
            Gets a value indicating whether this service supports getting data.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.MapServiceCapabilities.SupportsMap">
            <summary>
            Gets a value indicating whether this service supports exporting map images for use in an <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.MapServiceCapabilities.SupportsQuery">
            <summary>
            Gets a value indicating whether this service supports querying features.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo">
            <summary>
            Contains detailed ArcGIS Server MapServer metadata information about a 
            <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer"/> 
            or <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer"/> 
            web service (ex: what version of ArcGIS Server is being used, document information (ex: title, author, keywords, etc.),
            sub-layer information (ex: name, id, visibility, etc.), if the layer support dynamic rendering, etc.
            </summary>
            <remarks>  
            <para>
            Use either the <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.ServiceInfo">ArcGISMapImageLayer.ServiceInfo</see> 
            or <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.ServiceInfo">ArcGISTiledLayer.ServiceInfo</see> Properties to 
            obtain a ArcGISMapServiceInfo object. 
            </para>
            </remarks>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.ServiceInfo"/>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.ServiceInfo"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.CreateAsync(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Creates a map service info from a URI.
            </summary>
            <param name="uri">Uri to the map service.</param>
            <param name="credential">An optional credential.</param>
            <returns>The map service metadata.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.AttributionText">
            <summary>
            Gets the map service's copyright information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.Capabilities">
            <summary>
            Gets the map service capabilities.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.CurrentVersion">
            <summary>
            Gets the map service version.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.Description">
            <summary>
            Gets the map description.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.DocumentInfo">
            <summary>
            Gets the document information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.ExportTilesAllowed">
            <summary>
            Gets the value indicating whether the map service allows exporting tiles.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.FullExtent">
            <summary>
            Gets the full extent of the map service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.InitialExtent">
            <summary>
            Gets the initial extent of the map service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MapName">
            <summary>
            Gets the map name.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MaxExportTilesCount">
            <summary>
            Gets the maximum number of tiles supported for exporting tiles.
            </summary>
            <value>The maximum export tiles count.</value>
            <seealso cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.ExportTilesAllowed"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MaxImageHeight">
            <summary>
            Gets the max height supported for an image export.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MaxImageWidth">
            <summary>
            Gets the max width supported for an image export.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MaxRecordCount">
            <summary>
            Gets the maximum number of records that will be returned at once for a query
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MaxScale">
            <summary>
            Gets the maximum scale for the map service.
            </summary> 
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.MinScale">
            <summary>
            Gets the minimum scale for the map service.
            </summary> 
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.ServiceDescription">
            <summary>
            Gets the map service description.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SupportedImageFormatTypes">
            <summary>
            Gets the list of supported image format types.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SupportsDynamicLayers">
            <summary>
            Gets a value indicating whether the service supports dynamically defined layers.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.TileInfo">
            <summary>
            Gets the information about the map tile cache if the map service is cached.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.TileServers">
            <summary>
            Gets the tile servers that allow distributing load to multiple endpoints (optional)
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.TimeInfo">
            <summary>
            Gets the time information for a time-enabled map service.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.Unit">
            <summary>
            Gets the unit map service uses for it's default spatial reference.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.ServiceSourceType">
            <summary>
            Gets the service type of the service info.
            </summary>
            <value>The service type of the service info.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SingleFusedMapCache">
            <summary>
            Gets a value indicating whether map service has a single fused map cache.
            </summary>
            <value>A value indicating whether map service has a single fused map cache.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SpatialReference">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SpatialReference"/> of the service.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.SpatialReference"/> of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo.Source">
            <summary>
            Gets the ArcGIS REST service endpoint.
            </summary>
            <value>The ArcGIS REST service endpoint.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities">
            <summary>
            Identifies the various capabilities of an ArcGIS Feature Service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsCreate">
            <summary>
            Gets a value indicating whether creation of features is supported.
            </summary>
            <value>A value indicating whether creation of features is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsDelete">
            <summary>
            Gets a value indicating whether deletion of features is supported.
            </summary>
            <value>A value indicating whether deletion of features is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsEditing">
            <summary>
            Gets a value indicating whether editing of features is supported.
            </summary>
            <value>A value indicating whether editing of features is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsQuery">
            <summary>
            Gets a value indicating whether querying of features is supported.
            </summary>
            <value>A value indicating whether querying of features is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsSync">
            <summary>
            Gets a value indicating whether synchronization is supported.
            </summary>
            <value>A value indicating whether synchronization is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.FeatureServiceCapabilities.SupportsUpdate">
            <summary>
            Gets a value indicating whether updating features is supported.
            </summary>
            <value>A value indicating whether updating features is supported.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo">
            <summary>
            Defines ownership-based access control settings of a service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo.AllowOthersToDelete">
            <summary>
            Gets a value indicating whether others are allowed to delete features.
            </summary>
            <value>A value indicating whether others are allowed to delete features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo.AllowOthersToQuery">
            <summary>
            Gets a value indicating whether others are allowed to query features.
            </summary>
            <value>A value indicating whether others are allowed to query features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.OwnershipBasedAccessControlInfo.AllowOthersToUpdate">
            <summary>
            Gets a value indicating whether others are allowed to update features.
            </summary>
            <value>A value indicating whether others are allowed to update features.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.QueryFormats">
            <summary>
            Identifies the supported formats in which query results can be returned from a feature service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.QueryFormats.SupportsAmf">
            <summary>
            Gets a value indicating whether AMF is supported.
            </summary>
            <value>A value indicating whether AMF is supported.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.QueryFormats.SupportsJson">
            <summary>
            Gets a value indicating whether JSON is supported.
            </summary>
            <value>A value indicating whether JSON is supported.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TimeOptions">
            <summary>
            Defines various time options.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.IsTimeDataCumulative">
            <summary>
            Gets a value indicating whether time data is cumulative.
            </summary>
            <value>A value indicating whether time data is cumulative.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffset">
            <summary>
            Gets the time offset value in <see cref="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffsetUnit"/>.
            </summary>
            <value>The time offset value in <see cref="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffsetUnit"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffsetUnit">
            <summary>
            The unit of measurement for <see cref="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffset"/>.
            </summary>
            <value>The unit of measurement for <see cref="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.TimeOffset"/>.</value>
            <see cref="T:Esri.ArcGISRuntime.ArcGISServices.TimeUnit"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeOptions.UseTime">
            <summary>
            Gets a value indicating whether time should be used.
            </summary>
            <value>A value indicating whether time should be used.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo">
            <summary>
            Defines various temporal settings on a feature service layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.EndTimeField">
            <summary>
            Gets the name of the end time field.
            </summary>
            <value>The name of the end time field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.HasLiveData">
            <summary>
            Gets a value indicating whether there is live data.
            </summary>
            <value>A value indicating whether there is live data.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.StartTimeField">
            <summary>
            Gets the name of the start time field.
            </summary>
            <value>The name of the start time field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeExtent">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeExtent"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeExtent"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeInterval">
            <summary>
            Gets the time interval in <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeUnit"/>.
            </summary>
            <value>The time interval in <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeUnit"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeUnit">
            <summary>
            Gets the unit of measurement used for <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeInterval"/>.
            </summary>
            <value>the unit of measurement used for <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeInterval"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeReference">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeReference"/>.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TimeReference"/></value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LayerTimeInfo.TrackIdField">
            <summary>
            Gets the name of the track ID field.
            </summary>
            <value>The name of the track ID field.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail">
            <summary>
            A <see cref="T:Esri.ArcGISRuntime.Mapping.ImageTiledLayer"/> has a number of LODs (Levels of Detail). 
            Each LOD corresponds to a map at a given scale or resolution.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail.#ctor(System.Int32,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail" /> class.
             </summary>
            <param name="level">The level of the LOD.</param>
            <param name="resolution">The resolution of the LOD.</param>
            <param name="scale">The scale of the LOD.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail.Level">
            <summary>
            ID for the level. The top most level is 0.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail.Resolution">
            <summary>
            Gets the resolution in map units of each pixel for the level.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail.Scale">
            <summary>
            Gets the scale for the level.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TileInfo">
            <summary>
            Describes a map tile cache.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.TileInfo.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference,Esri.ArcGISRuntime.Geometry.MapPoint,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail},Esri.ArcGISRuntime.Geometry.Envelope)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.TileInfo" /> class.
             </summary>
            <param name="dpi">The DPI of each tile.</param>
            <param name="fullExtent">The full extent of the tiles.</param>
            <param name="levelsOfDetail">A list of <see cref="T:Esri.ArcGISRuntime.ArcGISServices.LevelOfDetail"/>.</param>
            <param name="origin">The origin of the tiles.</param>
            <param name="spatialReference">The spatial reference of the tiles.</param>
            <param name="tileHeight">Height of a tile, in pixels.</param>
            <param name="tileWidth">Width of a tile, in pixels.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.Dpi">
            <summary>
            The DPI (dots per inch) that the tile cache has been generated for.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.FullExtent">
            <summary>
            Returns the full extent of the tiles within the spatial reference.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.LevelsOfDetail">
            <summary>
            The levels of details contained in the map cache.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.Origin">
            <summary>
            The origin (upper left corner) of the tiling scheme.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.SpatialReference">
            <summary>
            The spatial reference of the map cache.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.TileHeight">
            <summary>
            Returns the height of each tile, in pixels.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TileInfo.TileWidth">
            <summary>
            Returns the width of each tile, in pixels.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo">
            <summary>
            Service Time Info
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.DefaultTimeInterval">
            <summary>
            Gets the initial time slider step size.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.DefaultTimeIntervalUnit">
            <summary>
            Gets the default time interval units.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.DefaultTimeWindow">
            <summary>
            Gets the the default time slider window size.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.HasLiveData">
            <summary>
            Gets the value indicating whether service has live data.
            </summary>      
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.TimeExtent">
            <summary>
            Gets the field that defines the time extent.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.TimeReference">
            <summary>
            Gets the time reference.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.ServiceTimeInfo.TimeRelation">
            <summary>
            Gets the value that indicates how the start and end time of the time slider extent are processed.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TimeReference">
            <summary>
            Time Reference Info
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeReference.TimeZone">
            <summary>
            Gets the name of the time zone.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.TimeReference.RespectsDaylightSaving">
            <summary>
            Gets a value indicating whether the time reference respects daylight savings time.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TimeRelation">
            <summary>
            TimeRelation
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeRelation.Unknown">
            <summary>
              Unknown time relation.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeRelation.Overlaps">
            <summary>
            Overlaps
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeRelation.OverlapsStartWithinEnd">
            <summary>
            OverlapsStartWithinEnd
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeRelation.AfterStartOverlapsEnd">
            <summary>
            AfterStartOverlapsEnd
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.ServiceType">
            <summary>
            An enumeration of various types of web services.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.ServiceType.Unknown">
            <summary>
             An unknown service type.
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.ServiceType.FeatureService">
            <summary>
            FeatureService
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.ServiceType.ImageService">
            <summary>
            ImageService
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.ServiceType.MapService">
            <summary>
            MapService
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.TimeUnit">
            <summary>
            TimeUnit
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Milliseconds">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Weeks">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Months">
            <summary>
            Months
            </summary>         
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Years">
            <summary>
            Years
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Decades">
            <summary>
            Decades
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.ArcGISServices.TimeUnit.Centuries">
            <summary>
            Centuries
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo">
            <summary>This object represents the source metadata for an <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer"/>.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo" /> class.
            </summary>
            <param name="source">Uri path to the source metadata</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.DefaultStyle">
            <summary>Gets the default style object.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.DefaultStyleUri">
            <summary>Gets the vector tile source URI.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.ExportTilesAllowed">
            <summary>Determines if this source supports exporting tiles.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.FullExtent">
            <summary>
            Gets the full extent of the service.
            </summary>
            <value>The full extent of the service.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.InitialExtent">
            <summary>
            Gets the Initial extent of the service.
            </summary>
            <value>The Initial extent of the service.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.Uri">
            <summary>Gets the vector tile source URI.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.Version">
            <summary>Gets the source version.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.SpatialReference">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.SpatialReference"/> of the service.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.SpatialReference"/> of the service.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.Origin">
            <summary>
            Gets the origin of the source data.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.Name">
            <summary>
            Gets the source name.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.MaxScale">
            <summary>
            Gets the maximum scale of the layer.
            </summary>
            <value>The maximum scale of the layer.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.ArcGISServices.VectorTileSourceInfo.MinScale">
            <summary>
            Gets the minimum scale of the layer.
            </summary>
            <value>The minimum scale of the layer.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.ImageLayerGeoElement">
            <summary>
            Result object from an identify operation on an image layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ImageLayerGeoElement.Geometry">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the ImageLayerGeoElement.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the ImageLayerGeoElement.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.QueryFeatureOptions">
            <summary>
            Various options that can be specified with calling <see cref="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.QueryFeaturesAsync(Esri.ArcGISRuntime.Data.QueryParameters,Esri.ArcGISRuntime.Data.QueryFeatureOptions)"/>.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.QueryFeatureOptions.IdOnly">
            <summary>
            Returns only the object id in the query result.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.QueryFeatureOptions.MinimalFieldsWithGeometry">
            <summary>
            Requests only the minimal set of fields in the query result.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.QueryFeatureOptions.LoadAllFeatures">
            <summary>
            Requests all available fields to be returned in the query result.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.Geodatabase">
            <summary>
            Represents an ArcGIS Geodatabase.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.Geodatabase" /> class.
            </summary>
            <param name="pathToGeodatabase">The path to the geodatabase.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.OpenAsync(System.String)">
            <summary>
            Opens a <see cref="T:Esri.ArcGISRuntime.Data.Geodatabase"/> at the specified path.
            </summary>
            <param name="pathToGeodatabase">The feature service REST endpoint</param>
            <returns>
            A task that represents the asynchronous open operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Data.Geodatabase"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.LoadAsync">
            <summary>
            Initiates loading of the geodatabase.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Geodatabase.GenerateGeodatabaseExtent">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> used to generate the sync enabled geodatabase.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Geodatabase.GeodatabaseFeatureTables">
            <summary>
            Gets the collection of <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/> available in the database.
            </summary>
            <value>The collection of <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/> available in the database.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Geodatabase.Source">
            <summary>
            Gets the ArcGIS REST feature service endpoint.
            </summary>
            <value>The ArcGIS REST feature service endpoint.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Geodatabase.Path">
            <summary>
            Gets the path to the database.
            </summary>
            <value>The path to the database.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Geodatabase.SyncModel">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.Geodatabase.SyncModel"/> used to generate the geodatabase.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.Geodatabase.SyncModel"/> used to generate the geodatabase.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.GeodatabaseFeatureTable(System.String)">
             <summary>
             Returns the <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/> that corresponds to the specified table name.
             </summary>
            <param name="tableName">The name of the geodatabase feature table.</param>
            <returns>
             A <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.GeodatabaseFeatureTable(System.Int64)">
             <summary>
             Returns the <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/> that corresponds to the specified service layer ID.
             </summary>
            <param name="serviceLayerID">The ID of the service layer associated with the geodatabase feature table.</param>
            <returns>
             A <see cref="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.HasLocalEdits">
            <summary>
            Returns a value indicating whether database has local edits.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value where true means the database has local edits, false means no edits.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Geodatabase.IsSyncEnabled">
            <summary>
            Returns a value indicating sync is enabled for the database.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> value where true means the database has sync enabled, false means no sync.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable">
            <summary>
            Represents a local ArcGIS Geodatabase table.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable.Geodatabase">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable.Geodatabase"/> associated with this table.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable.Geodatabase"/> associated with this table.</value>
            <see cref="P:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable.Geodatabase"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.GeodatabaseFeatureTable.HasLocalEditsSince(System.DateTimeOffset)">
            <summary>
             Returns a value indicating whether local edits were made since the specified date.
            </summary>
            <param name="date">The date to check for local edits.</param>
             <returns>
             A <see cref="T:System.Boolean"/> value where true means the database has local edits since the specified date, false means no edits.
             </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult">
            <summary>
            Represents the identify result containing a layer and the identified elements of that layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult.Graphics">
            <summary>
            Gets a list of identified <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/>.
            </summary>
            <value>Gets a list of identified <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult.GraphicsOverlay">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult.GraphicsOverlay"/> that contains the identified graphics.
            </summary>
            <value>Gets the <see cref="P:Esri.ArcGISRuntime.Data.IdentifyGraphicsOverlayResult.GraphicsOverlay"/> that contains the identified graphics.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult">
            <summary>
            Represents the identify result containing a layer and the identified elements of that layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.IdentifyLayerResult.GeoElements">
            <summary>
            Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Data.GeoElement"/>.
            </summary>
            <value>Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Data.GeoElement"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.IdentifyLayerResult.LayerContent">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Mapping.Layer"/> that contains the identified objects.
            </summary>
            <value>Gets the <see cref="T:Esri.ArcGISRuntime.Mapping.Layer"/> that contains the identified objects.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.IdentifyLayerResult.SublayerResults">
            <summary>
            Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/>.
            </summary>
            <value>Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Data.IdentifyLayerResult"/>.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.GeoElement">
            <summary>
            A marker interface implemented by objects that can be returned from an identify operation.
            </summary>
            <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>
            <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.GeoElement.Attributes">
            <summary>
            Gets all attributes of the geo element.
            </summary>
            <value>All attributes of the geo element.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.GeoElement.Geometry">
            <summary>
            Gets the geometry of a geoelement.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureEditResult">
            <summary>
            Represents the results of an attempt to push an feature update to a feature service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureEditResult.AttachmentResults">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.EditResult"/> for any attachment changes.
            </summary>
            <value>A list of <see cref="T:Esri.ArcGISRuntime.Data.EditResult"/> for any attachment changes.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable">
            <summary>
            Represents a table from a database.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.EditCapabilities">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Data.EditCapabilities"/> of this feature table.
            </summary>
            <Value>The <see cref="T:Esri.ArcGISRuntime.Data.EditCapabilities"/> of this feature table.</Value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.EditableAttributeFields">
            <summary>
            Gets the editable fields of this feature table.
            </summary>
            <value>The editable fields of this feature table.</value>
            <see cref="T:Esri.ArcGISRuntime.Data.Field"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.FeatureTemplates">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of this feature table.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of this feature table.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.FeatureTypes">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> of this feature table.
            </summary>
            <value>a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> of this feature table.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GlobalIdField">
            <summary>
            Gets the name of the global ID field.
            </summary>
            <value>The name of the global ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.HasAttachments">
            <summary>
            Gets a value indicating whether table supports attachments.
            </summary>
            <value>A value indicating whether table supports attachments</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.ObjectIdField">
            <summary>
            Gets the name of the object ID field.
            </summary>
            <value>The name of the object ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.LayerInfo">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> of this feature table.
            </summary>
            <Value>The <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureLayerInfo"/> of this feature table.</Value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.TypeIdField">
            <summary>
            Gets the name of the type ID field.
            </summary>
            <value>The name of the type ID field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.UseAdvancedSymbology">
            <summary>
            Gets or sets a value indicating whether advanced symbology is used.
            </summary>
            <value>true if the advanced symbology is used; otherwise, false.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.CreateFeature(Esri.ArcGISRuntime.Data.FeatureTemplate)">
            <summary>
            Creates and returns a new <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/> based on the specified <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/>.
            </summary>
            <param name="featureTemplate">The <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> used for creating the new feature.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/></returns>
            <exception cref="T:System.ArgumentNullException">featureTemplate</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.CreateFeature(Esri.ArcGISRuntime.Data.FeatureTemplate,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Creates and returns a new <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/> based on the specified <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> and <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>.
            </summary>
            <param name="featureTemplate">The <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> used for creating the new feature.</param>
            <param name="geometry">The <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used for creating the new feature.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/></returns>
            <exception cref="T:System.ArgumentNullException">featureTemplate</exception>
            <exception cref="T:System.ArgumentNullException">geometry</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.CreateFeature(Esri.ArcGISRuntime.Data.FeatureType)">
            <summary>
            Creates and returns a new <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/> based on the specified <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/>.
            </summary>
            <param name="featureType">The <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> used for creating the new feature.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/></returns>
            <exception cref="T:System.ArgumentNullException">featureType</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.CreateFeature(Esri.ArcGISRuntime.Data.FeatureType,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Creates and returns a new <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/> based on the specified <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> and <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>.
            </summary>
            <param name="featureType">The <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> used for creating the new feature.</param>
            <param name="geometry">The <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used for creating the new feature.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeature"/></returns>
            <exception cref="T:System.ArgumentNullException">featureType</exception>
            <exception cref="T:System.ArgumentNullException">geometry</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetAddedFeatures">
            <summary>
            Retrieves the features added since the last sync.
            </summary>
            <returns>The <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> which iterates through added features since last sync.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetAddedFeaturesCount">
            <summary>
            Retrieves the number of features added since the last sync.
            </summary>
            <returns>The number of features added since the last sync.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetDeletedFeatures">
            <summary>
            Retrieves the features deleted since the last sync.
            </summary>	
            <returns>The <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> which iterates through deleted features since last sync.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetDeletedFeaturesCount">
            <summary>
            Retrieves the number of features deleted since the last sync.
            </summary>
            <returns>The number of features deleted since the last sync.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetFeatureTemplate(System.String)">
            <summary>
            Retrieves the <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> associated with the specified feature template name.
            </summary>
            <param name="name">The name of the <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/>.</param>
            <returns>The <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> associated with the specified feature template name.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetFeatureType(System.String)">
            <summary>
            Retrieves the <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> associated with the specified feature type name.
            </summary>
            <param name="name">The name of the <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/>.</param>
            <returns>The <see cref="T:Esri.ArcGISRuntime.Data.FeatureType"/> associated with the specified feature type name.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetUpdatedFeatures">
            <summary>
            Retrieves the features updated since the last sync.
            </summary>
            <returns>The <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> which iterates through updated features since last sync.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeatureTable.GetUpdatedFeaturesCount">
            <summary>
            Retrieves the number of features updated since the last sync.
            </summary>
            <returns>The number of features updated since the last sync.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.CodedValueDomain">
            <summary>
            Specifies an explicit set of valid values for a <see cref="T:Esri.ArcGISRuntime.Data.Field"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.CodedValueDomain.CodedValues">
            <summary>
            Gets the set of valid values.
            </summary>
            <value>The set of valid values.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.Domain">
            <summary>
            Specifies the set of valid values for a <see cref="T:Esri.ArcGISRuntime.Data.Field"/>. 
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Data.CodedValueDomain"/>
            <seealso cref="T:Esri.ArcGISRuntime.Data.RangeDomain`1"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Domain.Name">
            <summary>
            Gets the name of the domain.
            </summary>
            <value>Name of the domain</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.ArcGISFeature">
            <summary>
            Represents a row in a <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeature.CanEditAttachments">
            <summary>
            Gets a value indicating whether attachments on this feature can be edited.
            </summary>
            <value>A value indicating whether attachments on this feature can be edited.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeature.CanUpdateGeometry">
            <summary>
            Gets a value indicating whether geometry on this feature can be edited.
            </summary>
            <value>A value indicating whether geometry on this feature can be edited.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeature.LoadStatus">
            <summary>
            Gets the load status of feature.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ArcGISFeature.LoadError">
            <summary>
            Gets the load status of feature.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.AddAttachmentAsync(System.String,System.String,System.Byte[])">
            <summary>
            Asynchronously adds a new attachment to this feature.
            </summary>
            <param name="name">The name for the attachment.</param>
            <param name="contentType">The content type for the attachment.</param> 
            <param name="data">The data for the attachment.</param>
            <returns>
            A task that represents the asynchronous add attachment operation. The value of the task result is an <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.DeleteAttachmentAsync(Esri.ArcGISRuntime.Data.Attachment)">
            <summary>
            Asynchronously deletes the specified attachment from this feature.
            </summary>
            <param name="attachment">The associated <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> for the attachment to delete.</param>
            <returns>A task that represents the asynchronous delete attachment operation.</returns>
            <exception cref="T:System.ArgumentNullException">attachment</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.DeleteAttachmentsAsync(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Attachment})">
            <summary>
            Asynchronously deletes the specified attachment from this feature.
            </summary>
            <param name="attachments">The associated <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/>s to delete.</param>
            <returns>A task that represents the asynchronous delete attachments operation.</returns>
            <exception cref="T:System.ArgumentNullException">attachments</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.GetAttachmentsAsync">
            <summary>
            Asynchronously retrieves a collection of <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> associated with this feature.
            </summary>
            <returns>
            A task that represents the asynchronous get attachment infos operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.UpdateAttachmentAsync(Esri.ArcGISRuntime.Data.Attachment,System.String,System.String,System.Byte[])">
            <summary>
            Asynchronously updates the specified <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> of this feature.
            </summary>
            <param name="attachment">The <see cref="T:Esri.ArcGISRuntime.Data.Attachment"/> of the attachment to update.</param>
            <param name="name">The name for the attachment.</param>
            <param name="contentType">The content type for the attachment.</param> 
            <param name="data">The data for the attachment.</param>
            <returns>A task that represents the asynchronous update attachment operation.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.LoadAsync">
            <summary>
            Initiates loading of feature.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ArcGISFeature.RetryLoadAsync">
            <summary>
            Retry loading feature.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the task is in the failed
            to load state. Does nothing if the task is in any other state.</p>
            </remarks>
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.ArcGISFeature.Loaded">
            <summary>
            Occurs when feature is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.ArcGISFeature.LoadStatusChanged">
            <summary>
            Occurs feature's LoadStatus is changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.Attachment">
            <summary>
            Represents a geodatabase attachment type.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Attachment.ContentType">
            <summary>
            Gets the content type of the attachment.
            </summary>
            <value>The content type of the attachment.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Attachment.HasFetchedData">
            <summary>
            Gets a value indicating whether data has been retrieved.
            </summary>
            <value>A value indicating whether data has been retrieved.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Attachment.Name">
            <summary>
            Gets the name of the attachment.
            </summary>
            <value>The name of the attachment.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Attachment.Size">
            <summary>
            Gets the size of the attachment's data.
            </summary>
            <value>The size of the attachment's data.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Attachment.GetDataAsync">
            <summary>
            Asynchronously retrieves attachment's data.
            </summary>
            <returns>
            A task that represents the asynchronous get data operation. The value of the task result is a <see cref="T:System.IO.Stream"/> object.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.EditResult">
            <summary>
            Represents the results of an attempt to push an update to a service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditResult.CompletedWithErrors">
            <summary>
            Gets a value indicating whether attempt to edit resulted to any error.
            </summary>
            <value>A value indicating whether attemped to edit resulted to any error.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditResult.EditOperation">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.EditResult.EditOperation"/> applied to the row.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.EditResult.EditOperation"/> applied to the row.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditResult.Error">
            <summary>
            Gets the error that resulted from the failed attempt to edit.
            </summary>
            <value>The error that resulted from the failed attempt to edit.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditResult.GlobalID">
            <summary>
            Gets the global ID field of the row being edited.
            </summary>
            <value>The global ID field of the row being edited.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditResult.ObjectID">
            <summary>
            Gets the ID that identifies the row being edited.
            </summary>
            <value>The ID that identifies the row being edited.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.EditOperation">
            <summary>
            The various types of edits in a <see cref="T:Esri.ArcGISRuntime.Data.FeatureTable"/>.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.EditOperation.Add">
            <summary>
            An add operation.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.EditOperation.Update">
            <summary>
            An update operation.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.EditOperation.Delete">
            <summary>
            A delete operation.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureType">
            <summary>
            Defines a feature type.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureType.ID">
            <summary>
            Gets the ID of the feature type.
            </summary>
            <value>The ID of the feature type.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureType.Domains">
            <summary>
            Gets the associated <see cref="T:Esri.ArcGISRuntime.Data.Domain"/>s with this feature type.
            </summary>
            <value>The associated <see cref="T:Esri.ArcGISRuntime.Data.Domain"/>s with this feature type.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureType.Name">
            <summary>
            Gets the name of the feature type.
            </summary>
            <value>The name of the feature type.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureType.Templates">
            <summary>
            Gets a list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of the feature type.
            </summary>
            <value>A list of <see cref="T:Esri.ArcGISRuntime.Data.FeatureTemplate"/> of the feature type.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureTemplate">
            <summary>
            Provides a template for creating a new feature.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTemplate.Description">
            <summary>
            Gets the description of the feature template.
            </summary>
            <value>The description of the feature template.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTemplate.DrawingTool">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.FeatureTemplate.DrawingTool"/> of the feature template.
            </summary>
            <value>the <see cref="P:Esri.ArcGISRuntime.Data.FeatureTemplate.DrawingTool"/> of the feature template.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTemplate.Name">
            <summary>
            Gets the name of the feature template.
            </summary>
            <value>The name of the feature template.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTemplate.PrototypeAttributes">
            <summary>
            Gets the prototype for creating a <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>
            </summary>
            <value>The prototoype for creating a <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.EditCapabilities">
            <summary>
            Identifies the various capabilities of an ArcGIS Feature Service Layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditCapabilities.SupportsAdd">
            <summary>
            Gets a value indicating whether the layer supports creation of features.
            </summary>
            <value>A value indicating whether the layer supports creation of features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditCapabilities.SupportsAddAttachments">
            <summary>
            Gets a value indicating whether the layer supports adding attachments.
            </summary>
            <value>A value indicating whether the layer supports adding attachments.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditCapabilities.SupportsDelete">
            <summary>
            Gets a value indicating whether the layer supports deletion of features.
            </summary>
            <value>A value indicating whether the layer supports deletion of features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditCapabilities.SupportsUpdate">
            <summary>
            Gets a value indicating whether the layer supports updating features.
            </summary>
            <value>A value indicating whether the layer supports updating features.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.EditCapabilities.SupportsUpdateGeometry">
            <summary>
            Gets a value indicating whether the layer supports editing geometry of features.
            </summary>
            <value>A value indicating whether the layer supports editing geometry features.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.Feature">
            <summary>
            Represents a row in a <see cref="P:Esri.ArcGISRuntime.Data.Feature.FeatureTable"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Feature.FeatureTable">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.Feature.FeatureTable"/> that contains feature.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.Feature.FeatureTable"/> that contains feature.</value>
            <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable"/>
            <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Feature.Geometry">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the feature.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> of the feature.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Feature.GetAttributeValue(System.String)">
            <summary>
            Looks up attribute by name and returns its current value.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <returns>
            The current value of the attribute expressed as an <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Feature.GetAttributeValue(Esri.ArcGISRuntime.Data.Field)">
            <summary>
            Looks up attribute by <see cref="T:Esri.ArcGISRuntime.Data.Field"/> and returns its current value.
            </summary>
            <param name="field">The <see cref="T:Esri.ArcGISRuntime.Data.Field"/> that corresponds to the attribute.</param>
            <exception cref="T:System.ArgumentNullException">field</exception> 
            <returns>
            The current value of the attribute expressed as an <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Feature.SetAttributeValue(System.String,System.Object)">
            <summary>
            Looks up attribute by name and updates attribute to the specified value.
            </summary>
            <param name="attributeName">The name of the attribute.</param>
            <param name="attributeValue">Value to be set on the attribute.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Feature.SetAttributeValue(Esri.ArcGISRuntime.Data.Field,System.Object)">
            <summary>
            Looks up attribute by <see cref="T:Esri.ArcGISRuntime.Data.Field"/> and updates attribute to the specified value.
            </summary>
            <param name="field">The <see cref="T:Esri.ArcGISRuntime.Data.Field"/> that corresponds to the attribute.</param>
            <param name="attributeValue">Value to be set on the attribute.</param>
            <exception cref="T:System.ArgumentNullException">field</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Feature.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.Feature.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureQueryResult">
            <summary>
            Represents the results of a feature query.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureQueryResult.ExceededTransferLimit">
            <summary>
            Gets a value indicating whether the number of features returned exceeded the maximum transfer limit.
            </summary>
            <value>A value indicating whether the number of features returned exceeded the maximum transfer limit.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureQueryResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>.
            </summary>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> enumerator.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureRequestMode">
            <summary>
            Describes the different modes for requesting features in a <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.Undefined">
            <summary>
            Indicates the feature table has not been loaded and the mode has yet to be set.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.OnInteractionCache">
            <summary>
            The features are requested and populated into the table as and when they are needed 
            based on the user or developer interacting with the layer (map pan, zoom) and the 
            features will be cached.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.OnInteractionNoCache">
            <summary>
            The features are explicitly requested for the layer work in this mode. 
            It is suitable for always working against the latest data and will therefore have 
            a high network bandwith. Queries always go to the server for all interactions 
            (pans, zooms, selects or queries).
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.ManualCache">
            <summary>
            Data is requested when the user explicity calls 
            <see cref="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.PopulateFromServiceAsync(Esri.ArcGISRuntime.Data.QueryParameters,System.Boolean,System.Collections.Generic.IEnumerable{System.String})"/>.
            All queries performed on the table will be done locally.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FeatureTable">
            <summary>
            Represents a table from a database
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.Extent">
            <summary>
            Gets the extent of the table.
            </summary>
            <value>The extent of the table.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.Fields">
            <summary>
            Gets the fields of the feature table.
            </summary>
            <value>The fields of the feature table.</value>
            <see cref="T:Esri.ArcGISRuntime.Data.Field"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.GeometryType">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Data.FeatureTable.GeometryType"/> of features in this table.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.FeatureTable.GeometryType"/> of features in this table.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.HasGeometry">
            <summary>
            Gets a value indicating whether this table has geometry data.
            </summary>
            <value>A value indicating whether this table has geometry data.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.IsEditable">
            <summary>
            Gets a value indicating whether this table is editable.
            </summary>
            <value>A value indicating whether this table is editable.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.LoadError">
            <summary>
            Gets the exception associated with a failed load. This property remains null if load is successful.
            </summary>
            <value>The exception associated with a failed load.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.LoadStatus">
            <summary>
            Gets the current load status.
            </summary>
            <value>The current load status.</value>
            <see cref="T:Esri.ArcGISRuntime.LoadStatus"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.NumberOfFeatures">
            <summary>
            Gets the number of features in this table.
            </summary>
            <value>The number of features in this table.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.SpatialReference">
            <summary>
            Gets the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of this table.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of this table.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.FeatureTable.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.LoadAsync">
            <summary>
            Asynchronously initiates loading of this table.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.RetryLoadAsync">
            <summary>
            Asynchronously retries loading of this table table.
            </summary>
            <returns>A task that represents the asynchronous reload operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the table is in the failed
            to load state. Does nothing if the table is in any other state.</p>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.AddFeatureAsync(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Asynchronously adds new <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to the table.
            </summary>
            <param name="feature"><see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to add to the table.</param>
            <returns>
            A task that represents the asynchronous add feature operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.AddFeaturesAsync(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})">
            <summary>
            Asynchronously adds the set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s to the table.
            </summary>
            <param name="features">set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s to add to the table.</param>
            <returns>
            A task that represents the asynchronous add features operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">features</exception>
            <exception cref="T:System.ArgumentException">Elements of features cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CanAdd(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Determines if the specified <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> can be added to the table.
            </summary>
            <param name="feature">The <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to evaluate for add.</param>
            <returns>The associated <see cref="T:System.Exception"/> if add is not allowed.</returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CanDelete(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Determines if the specified <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> can be deleted from the table.
            </summary>
            <param name="feature">The <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to evaluate for delete.</param>
            <returns>The associated <see cref="T:System.Exception"/> if delete is not allowed.</returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CanUpdate(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Determines if the specified <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> can be updated on the table.
            </summary>
            <param name="feature">The <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to evaluate for update.</param>
            <returns>The associated <see cref="T:System.Exception"/> if update is not allowed.</returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CancelLoad">
            <summary>
            Cancel the previous load operation,
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CreateFeature">
            <summary>
            Creates a new feature.
            </summary>
            <returns>New <see cref="T:Esri.ArcGISRuntime.Data.Feature"/></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.CreateFeature(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Creates a new feature with specified attributes and geometry.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="geometry">The geometry.</param>
            <exception cref="T:System.ArgumentNullException">attributes</exception>
            <returns>New <see cref="T:Esri.ArcGISRuntime.Data.Feature"/></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.DeleteFeatureAsync(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Asynchronously deletes new <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> from the table.
            </summary>
            <param name="feature"><see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to delete from the table.</param>
            <returns>
            A task that represents the asynchronous delete feature operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.DeleteFeaturesAsync(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})">
            <summary>
            Asynchronously deletes the set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s from the table.
            </summary>
            <param name="features">set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s to delete from the table.</param>
            <returns>
            A task that represents the asynchronous delete features operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">features</exception>
            <exception cref="T:System.ArgumentException">Elements of features cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.GetField(System.String)">
            <summary>
            Gets the associated <see cref="T:Esri.ArcGISRuntime.Data.Field"/> with specified field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Data.Field"/> associated with the specified field name.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.QueryFeaturesAsync(Esri.ArcGISRuntime.Data.QueryParameters)">
            <summary>
            Asynchronously performs query against the table.
            </summary>
            <param name="parameters">The <see cref="T:Esri.ArcGISRuntime.Data.QueryParameters"/> used to filter feature results.</param>
            <returns>
            A task that represents the asynchronous query features operation. The value of the task result contains a <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.UpdateFeatureAsync(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Asynchronously updates new <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> on the table.
            </summary>
            <param name="feature"><see cref="T:Esri.ArcGISRuntime.Data.Feature"/> to update on the table.</param>
            <returns>
            A task that represents the asynchronous update feature operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">feature</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.UpdateFeaturesAsync(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})">
            <summary>
            Asynchronously updates the set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s on the table.
            </summary>
            <param name="features">set of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/>s to update on the table.</param>
            <returns>
            A task that represents the asynchronous update features operation. 
            </returns>
            <exception cref="T:System.ArgumentNullException">features</exception>
            <exception cref="T:System.ArgumentException">Elements of features cannot be null.</exception>
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.FeatureTable.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.FeatureTable.Loaded">
            <summary>
            Occurs when the table is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.RaiseLoaded">
            <summary>
             Raises the Loaded event.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Data.FeatureTable.LoadStatusChanged">
            <summary>
            Occurs when the table LoadStatus is changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.FeatureTable.RaiseLoadStatusChanged(Esri.ArcGISRuntime.LoadStatusEventArgs)">
            <summary>
             Raises the LoadStatusChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.Field">
            <summary>
            Contains information about an attribute field in a <see cref="T:Esri.ArcGISRuntime.Data.Feature" />
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.Alias">
            <summary>
            Gets the alias of field.
            </summary>
            <value>The alias of field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.Domain">
            <summary>
            Gets the domain of field.
            </summary>
            <value>The domain of the field.</value>
            <see cref="T:Esri.ArcGISRuntime.Data.CodedValueDomain"/>
            <see cref="T:Esri.ArcGISRuntime.Data.RangeDomain`1"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.FieldType">
            <summary>
            Gets the data type of field.
            </summary>
            <value>The data type of field.</value>
            <see cref="P:Esri.ArcGISRuntime.Data.Field.FieldType"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.IsEditable">
            <summary>
            Gets a value indicating whether field is editable.
            </summary>
            <value>Value indicating whether field is editable.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.IsNullable">
            <summary>
            Gets a value indicating whether field is nullable.
            </summary>
            <value>Value indicating whether field is nullable.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.Length">
            <summary>
            Gets the length of the field.
            </summary>
            <value>The length of the field.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.Field.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Field.FromJson(System.String)">
            <summary>
            Creates a Field from the JSON string.
            </summary>
            <param name="json">JSON string that represents a Field</param>
            <returns>Field.</returns>
            <exception cref="T:System.ArgumentNullException">json</exception>
            <seealso cref="M:Esri.ArcGISRuntime.Data.Field.ToJson" />
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Field.ToJson">
            <summary>
            Serializes the Field to JSON string.
            </summary>
            <returns>JSON string.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Data.Field.FromJson(System.String)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.Field.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.DrawingTool">
            <summary>
            An enumeration of available drawing tools.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.AutoCompletePolygon">
            <summary>
            Auto complete polygon
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.DownArrow">
            <summary>
            Down arrow
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.FreeHand">
            <summary>
            Free hand
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.LeftArrow">
            <summary>
            Left arrow
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.RightArrow">
            <summary>
            Right arrow
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.DrawingTool.UpArrow">
            <summary>
            Up arrow
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.FieldType">
            <summary>
            The data format of an attribute field.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Unknown">
            <summary>
            Unknown field type.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Int16">
            <summary>
            A 16-bit integer value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Int32">
            <summary>
            A 32-bit integer value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Int64">
            <summary>
            A 64-bit integer value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Guid">
            <summary>
            Globally Unique Identifier value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Float32">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Float64">
            <summary>
            A double value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Date">
            <summary>
            A date time value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Text">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.OID">
            <summary>
            An object ID value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.GlobalID">
            <summary>
            An esri global ID value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Blob">
            <summary>
            A binary large object.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Geometry">
            <summary>
            A geometry value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Raster">
            <summary>
            A raster value.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.FieldType.Xml">
            <summary>
            An xml value.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.OrderBy">
            <summary>
            Represents an ordering in a query's order by clause.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.OrderBy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.OrderBy" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.OrderBy.#ctor(System.String,Esri.ArcGISRuntime.Data.SortOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.OrderBy" /> class.
            </summary>
            <param name="fieldName">The name of the field being ordered.</param>
            <param name="sortOrder">The type of ordering that should be applied.</param>
            <see cref="P:Esri.ArcGISRuntime.Data.OrderBy.SortOrder"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.OrderBy.FieldName">
            <summary>
            Gets or sets the name of the field being ordered.
            </summary>
            <value>The name of the field being ordered.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.OrderBy.SortOrder">
            <summary>
            Gets or sets the type of ordering that should be applied.
            </summary>
            <value>The type of ordering that should be applied.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.QueryParameters">
            <summary>
            Represents the parameters for a query.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.QueryParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.QueryParameters" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.UrlParameters">
            <summary>
            Gets a read-only dictionary of parameters used in the query request
            </summary>
            <value>A read-only dictionary of parameters used in the query request</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used to filter the results.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used to filter the results.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.MaxAllowableOffset">
            <summary>
            Gets or sets the maximum allowable offset.
            </summary>
            <value>The maximum allowable offset.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.MaxFeatures">
            <summary>
            Gets or sets the maximum number of features the query should return.
            </summary>
            <value>The maximum number of features the query should return.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.ObjectIDs">
            <summary>
            Gets the object IDs of the features to query.
            </summary>
            <value>The object IDs of features to query.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.OrderByFields">
            <summary>
            Gets a the field names that describe how the results are ordered.
            </summary>
            <value>The field names that describe how results are ordered.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.OutSpatialReference">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of feature results' geometry.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of feature results' geometry.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/>
            <see cref="P:Esri.ArcGISRuntime.Data.Feature.Geometry"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.ReturnGeometry">
            <summary>
            Gets or sets a value indicating whether to return <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry"/> in the feature results.
            </summary>
            <value>A value indicating whether to return <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry"/> in the feature results.</value>
            <see cref="P:Esri.ArcGISRuntime.Data.Feature.Geometry"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.ReturnIDsOnly">
            <summary>
            Gets or sets a value indicating whether to return only IDs of the feature results.
            </summary>
            <Value>A value indicating whether to return only IDs of the feature results.</Value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.SpatialRelationship">
            <summary>
            Gets or sets the type of <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.SpatialRelationship"/> between the <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry"/> parameter and the features.
            </summary> 
            <Value>The type of <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.SpatialRelationship"/> between the <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry"/> parameter and the features.</Value>
            <remarks>This would be only be used if <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.Geometry"/> filter is also provided.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.TimeExtent">
            <summary>
            Gets or sets the <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.TimeExtent"/> of the query.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Data.QueryParameters.TimeExtent"/> of the query.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.QueryParameters.WhereClause">
            <summary>
            Gets or sets the where clause of the query.
            </summary>
            <value>The where clause of the query.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.InheritedDomain">
            <summary>
            Apply to domains on subtypes. It implies that the domain for a field at the subtype level is the same as the domain for the field at the layer level.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.RangeDomain`1">
            <summary>
            Specifies a valid range of values for a <see cref="T:Esri.ArcGISRuntime.Data.Field"/>.
            </summary>
            <typeparam name="T">Data type that is IComparable.</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RangeDomain`1.MaxValue">
            <summary>
            Gets the maximum value of range.
            </summary>
            <value>The maximum value of range.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RangeDomain`1.MinValue">
            <summary>
            Gets the minimum value of range.
            </summary>
            <value>The minimum value of range.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable">
            <summary>
            Represents a table in an ArcGIS Server Feature Service.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable" /> class.
            </summary>
            <param name="source">The service URI.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.Credential">
            <summary>Gets or sets the security credential used to access the remote table</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.Source">
            <summary>
            Gets or sets the ArcGIS REST service endpoint.
            </summary>
            <value>The ArcGIS REST service endpoint.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.BufferFactor">
            <summary>
            Gets or sets the factor used to calculate a buffered extent around the current visible area when requesting new features from the service.
            </summary>
            <value>A double representing the buffer factor.</value>
            <remarks>
            Any interaction with the MapView which results in a Viewpoint change, such as a pan or zoom action, 
            will request features only if the new visible area exceeds the buffered extent. 
            The BufferFactor is applied only when the <see cref="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.FeatureRequestMode"/> is in either 
            <see cref="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.OnInteractionCache">OnInteractionCache</see> 
            or <see cref="F:Esri.ArcGISRuntime.Data.FeatureRequestMode.OnInteractionNoCache">OnInteractionNoCache</see>. 
            By default it is 2.0 (twice the current extent).
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.FeatureRequestMode">
            <summary>
            Gets or sets the mode defining when features are requested from the service.
            </summary>
            <value>The mode defining when features are requested from the service.</value>
            <see cref="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.FeatureRequestMode"/>
            <exception cref="T:System.ArgumentException">FeatureRequestMode cannot be set to Undefined by user code.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.ServiceFeatureTable.GeodatabaseVersion">
            <summary>
            Gets or sets the geodatabase version.
            </summary>
            <value>The geodatadabase version.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.ApplyEditsAsync">
            <summary>
            Asynchronously uploads any changes to the local table to the feature service.
            </summary>
            <returns>
            A task that represents the asynchronous apply edits operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Data.EditResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.ClearCache">
            <summary>
            Clears cached data.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.PopulateFromServiceAsync(Esri.ArcGISRuntime.Data.QueryParameters,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Asynchronously performs manual query of data from the service and imports feature results into the table.
            </summary>
            <param name="parameters">The <see cref="T:Esri.ArcGISRuntime.Data.QueryParameters"/> used to filter feature results.</param>
            <param name="clearCache">A value indicating whether to clear cache before populating the table.</param>
            <param name="outFields">The attribute fields to include in the result.</param>
            <returns>
            A task that represents the asynchronous populate from service operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.QueryFeaturesAsync(Esri.ArcGISRuntime.Data.QueryParameters,Esri.ArcGISRuntime.Data.QueryFeatureOptions)">
             <summary>
             Asynchronously submits a query against the table.
             </summary>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="queryFeatureOption">Options for controlling what data is in the query result.</param>
             <returns>
             A task that represents the asynchronous query features operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> object.
             </returns>
             <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.ServiceFeatureTable.RefreshDataAsync">
            <summary>
            Asynchronously refreshes the tables data.
            </summary>
            <returns>A task that represents the asynchronous refresh operation.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.SortOrder">
            <summary>
            Describes the various ways a query result can be ordered by.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SortOrder.Ascending">
            <summary>
            Sort the query results in an ascending order.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SortOrder.Descending">
            <summary>
            Sort the query results in a descending order.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.SpatialRelationship">
            <summary>
            Defines the various operators for spatially relating geometries.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Relate">
            <summary>
            Relates operator which indicates that a spatial relationship function will be used.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Equals">
            <summary>
            Equals operator.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Disjoint">
            <summary>
            Disjoint operator.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Intersects">
            <summary>
            Intersects operator where part of a feature from class 1 is contained ina feature from feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Touches">
            <summary>
            Touches operator where the feature from class 1 touches the border of a feature from class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Crosses">
            <summary>
            Crosses operator where the feature from class 1 crosses a feature from feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Within">
            <summary>
            Within operator where the feature from class 1 is completely enclosed by the feature from feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Contains">
            <summary>
            Contains operator where part or all of a feature from feature class 1 is contained within a feature from feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.Overlaps">
            <summary>
            Overlaps operator where features from feature class 1 overlap features in feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.EnvelopeIntersects">
            <summary>
            Envelope intersects operator where the envelope of feature class 1 intersects with the envelope of a feature class 2.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Data.SpatialRelationship.IndexIntersects">
            <summary>
            Index intersects operator where the envelope of the query feature class intersects the index entry for the target feature class.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.TimeExtent">
            <summary>
            A period of time based upon <a href="https://msdn.microsoft.com/en-us/library/03ybds8y" target="_top">.NET DateTime Structure</a>. 
            The period of time can be a specific moment or cover a duration.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.TimeExtent"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.TimeExtent"/> class.
            </summary>
            <param name="time">The start and end time.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Data.TimeExtent"/> class.ø
            </summary>
            <param name="startTime">The start.</param>
            <param name="endTime">The end.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.TimeExtent.Start">
            <summary>
            Gets or sets the start of the extent.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.TimeExtent.End">
            <summary>
            Gets or sets the end of the extent.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.TimeExtent.IsInfinite">
            <summary>
            Gets a value indicating whether TimeExtent is infinite.
            </summary>
            <returns>A value indicating whether TimeExtent is infinite.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.TimeExtent.IsEndTimeUnlimited">
            <summary>
            Gets a value indicating whether TimeExtent has an unlimited end time.
            </summary>
            <returns>A value indicating whether TimeExtent has an unlimited end time.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.TimeExtent.IsStartTimeUnlimited">
            <summary>
            Gets a value indicating whether TimeExtent has an unlimited start time.
            </summary>
            <returns>A value indicating whether TimeExtent has an unlimited start time.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.Contains(System.DateTimeOffset)">
            <summary>
            Returns a value indicating whether the specified time is contained in the TimeExtent.
            </summary>
            <param name="time"> The <see cref="T:System.DateTimeOffset"/> being evaluated.</param>
            <returns>A value indicating whether the specified time is contained in the TimeExtent.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.Offset(System.TimeSpan)">
            <summary>
            Returns a new time extent with the given offset from "this" time extent.
            </summary>
            <param name="offset">The offset applied.</param>
            <returns>Returns a <see cref="T:Esri.ArcGISRuntime.Data.TimeExtent"/> with the added offset.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.Intersects(Esri.ArcGISRuntime.Data.TimeExtent)">
            <summary>
            Checks if this instance intersects the specified extent.
            </summary>
            <param name="extent">The extent to intersect with.</param>
            <returns>True if this instance intesects the specified extent.</returns>
            <exception cref="T:System.ArgumentNullException">extent</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.Intersects(System.DateTimeOffset)">
            <summary>
            Checks if this instance intersects the specified date.
            </summary>
            <param name="date">The date to intersect.</param>
            <returns>True if the date is within the time extent.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.TimeExtent.ToJson">
            <summary>
            Convert to a UTC date, milliseconds since 1970
            If Start and End are the same - a single value is written. If they are different the Start,End is written out
            </summary>
            <returns></returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.DateTimeTypeConverter">
            <summary>
            *FOR INTERNAL USE ONLY* DateTime Converter for specifying <see cref="T:System.DateTimeOffset"/> in XAML.
            </summary>
            <exclude/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="destinationType">The type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified value object to the specified type.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.NotImplementedException">
            	<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>  not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.TimeExtentTypeConverter">
            <summary>
            *FOR INTERNAL USE ONLY*
            </summary>
            <exclude/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.RequestAttachment">
            <summary>
            Represents a file attachment that might be included in a multi-part request.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RequestAttachment.ContentType">
            <summary>
            Gets the content type (mime type) of the attachment.
            </summary>
            <value>The content type (mime type) of the attachment.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RequestAttachment.Data">
            <summary>
            Gets the data of the attachment. May be empty if the file name refers to a file on disk.
            </summary>
            <value>The data of the attachment.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RequestAttachment.FileName">
            <summary>
            Gets the file name of the attachment.
            </summary>
            <value>The file name of the attachment.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.RequestAttachment.ParameterName">
            <summary>
            Gets the HTTP parameter name of the attachment.
            </summary>
            <value>The HTTP parameter name of the attachment.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Data.RequestAttachment.GetEncodedData">
            <summary>
            Returns the data of the attachment encoded using base64 encoding.
            </summary>
            <value>The data of attachment encoded using base64 encoding.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Data.SyncLayerResult">
            <summary>
            Represents the result of sync operation on a table or layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.SyncLayerResult.EditResults">
            <summary>
            Gets an array of any errors from sync feature edit results representing the result of a sync
            </summary>
            <remarks>
             If there's an error the return value is NULL.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.SyncLayerResult.LayerID">
            <summary>
            Gets the ID of layer or table
            </summary>
            <remarks>
            If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Data.SyncLayerResult.TableName">
            <summary>
            Gets the table name for the sync result
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlFeature">
            <summary>
            A KML Feature object.
            </summary>
            <remarks>
            KML is a file format used to display geographic data (geometric shapes, symbology and attributes). KML uses a tag-based
            structure with nested elements and attributes and is based on the XML standard. The KML files are often distributed in
            KMZ files, which are zipped KML files with a .kmz extension
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.BalloonStyle">
            <summary>Gets the balloon style of the KML feature.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.LabelStyle">
            <summary>Gets the Label style of the KML feature.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.ChildFeatures">
            <summary>
            Return the KML features's child features.
            </summary>
            <remarks>
            This collection will raise a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event if the child collection's items change.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.IsHighlighted">
            <summary>
            Checks whether the KML feature is highlighted.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.Symbol">
            <summary>
            Gets the KML feature's icon symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.Viewpoint">
            <summary>Retrieve the KML feature's viewpoint.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.CanChangeVisibility">
            <summary>
            Gets a value indicating whether the layer content's visibility can be changed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.IsVisible">
            <summary>
            Gets or sets a value indicating whether the layer content is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.Name">
            <summary>
            Gets or sets the name of the layer content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.ShowInLegend">
            <summary>
            Get or sets a value indicating whether the layer content participates in the legend.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlFeature.SublayerContents">
            <summary>
            Gets the sub layer contents of a layer content.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlFeature.GetLegendInfosAsync">
            <summary>
            Returns an immutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/>.
            </summary>
            <returns>
            The task object representing the asynchronous get legend infos operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlFeature.IsVisibleAtScale(System.Double)">
            <summary>
            Returns the layer content's effective visibility at the specified scale.
            </summary>
            <remarks>
            The effective visibility returned takes care of the effective visibility of the parents at the specified scale. 
            Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value where true means layers visibility can be displayed, false means an error has occurred.
            </returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.KmlFeature.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlFeature.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlFeature.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlBalloonStyle">
            <summary>
            A KML balloon style object.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlBalloonStyle.BackgroundColor">
            <summary>
            Return the KML balloon style's background color.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlBalloonStyle.FormattedText">
            <summary>
            Returns a formatted textual representation of KML balloon style.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlColorStyle">
            <summary>A KML color style object.</summary>
            <remarks>
             Specifies a KML feature's color style in terms of color, color_mode.
             </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlColorStyle.Color">
            <summary>
            Gets the KML color style's color.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlColorStyle.ColorMode">
            <summary>
            Gets the KML color mode.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlColorMode">
            <summary>The list of KML color modes.</summary>
            <remarks>
              This is used to determine the KML color mode.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlColorMode.Normal">
            <summary>No effect on color specified in color style.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlColorMode.Random">
            <summary>
              Randomize R, G &amp; B of the base color specified in color style with a random linear scale ranging from 00 to FF.
              Alpha is never randomized.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlColorMode.Unknown">
            <summary>Unknown color mode.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlLabelStyle">
            <summary>
            A KML label style object.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlLabelStyle.Scale">
            <summary>
            Gets the KML label's scale.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlContainer">
            <summary>A KML Container object.</summary>
            <remarks>
              A KML container element holds one or more KML features and allows the creation of nested hierarchies.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlContainer.ListItemType">
            <summary>Returns the container's list item type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlContainer.IsOpen">
            <summary>Gets or sets a vlue indiciating if the KML container should be shown expanded in a tree view.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlContainer.IsPartiallyVisible">
            <summary>Returns true if only some of the KML container's child features are visible, false otherwise.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlListItemType">
            <summary>The list of KML list item types.</summary>
            <remarks>
              This is used to determine how a KML feature is displayed in a list view.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlListItemType.Check">
            <summary>(default) - The KML feature's visibility is tied to its item's checkbox.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlListItemType.RadioFolder">
            <summary>When specified for a Container, only one of the Container's items is visible at a time.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlListItemType.CheckOffOnly">
            <summary>
              When specified for a Container or Network Link, prevents all items from being made visible at once. The user can turn
              everything in the Container or Network Link off but cannot turn everything on at the same time. This setting is useful
              for Containers or Network Links containing large amounts of data.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlListItemType.CheckHideChildren">
            <summary>
              Use a normal checkbox for visibility but do not display the Container or Network Link's children in the list view. A
              checkbox allows the user to toggle visibility of the child objects in the viewer.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlListItemType.Unknown">
            <summary>Unknown KML list item type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlDocument">
            <summary>A KML Document object.</summary>
            <remarks>
            A KML document is a container for features and styles.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlFolder">
            <summary>A KML Folder object.</summary>
            <remarks>
              A KML folder is used to arrange other Features hierarchically (Folders, Placemarks, NetworkLinks, or Overlays). A KML
              Feature is visible only if it and all its ancestors are visible.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlNetworkLink">
            <summary>A KML Network Link object.</summary>
            <remarks>
              A KML container element holds one or more KML features and allows the creation of nested hierarchies.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlNetworkLink.ListItemType">
            <summary>Returns the network link's list item type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlNetworkLink.IsOpen">
            <summary>Gets or sets a vlue indiciating if the KML container should be shown expanded in a tree view.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlNetworkLink.IsPartiallyVisible">
            <summary>Returns true if the network link is partially visible, false otherwise.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlNetworkLink.RefreshStatus">
            <summary>Returns the network link's refresh status.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlNetworkLinkRefreshStatus">
            <summary>Specifies the condition a network link is in while refreshing.</summary>
            <remarks>
              This is used to determine when to fetch and update KML features.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlNetworkLinkRefreshStatus.Error">
            <summary>This status is returned when the network link could not be reached</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlNetworkLinkRefreshStatus.Done">
            <summary>This status is returned when the network link is done refreshing successfully.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlNetworkLinkRefreshStatus.Fetching">
            <summary>This status is returned when the refreshing is in process</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlNetworkLinkRefreshStatus.Unknown">
            <summary>The refresh status is unknown.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlPlacemark">
            <summary>A KML Placemark object.</summary>
            <remarks>
              A KML Placemark is a KML Feature with associated Geometry.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlPlacemark.KmlGeometryType">
            <summary>The type of the geometry in the KML placemark.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlPlacemark.GetGeometry">
            <summary>Retrieve the geometry for the KML placemark.</summary>
            <remarks>
              For non multi-geometry this will return a point, polyline or polygon geometry. For a multi-geometry not having a
              specified point, it will return the center of the geometry extent. For a multi-geometry with a point geometries, it will
              return first point in the collection.
            </remarks>
             <returns>A geometry as per the remarks.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlPlacemark.GetKmlGeometries">
            <summary>Retrieves the KML geometries for the KML placemark.</summary>
            <remarks>
              Returns a collection of Geometries. The collection will contain one Geometry for non multi-
              geometry.
            </remarks>
            <returns>A collection of geometries.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlPlacemark.GetKmlGeometryExtent">
            <summary>Retrieves the extent of the geometry for KML placemark.</summary>
            <remarks>
              Creates the extent of the geometry associated with the KML placemark. For multi-geometry it will create union of of all
              geometries in the multi-geometry.
            </remarks>
            <returns>An envelope.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlGeometryType">
            <summary>The list of KML geometry types.</summary>
            <remarks>
              This is used to determine KML feature type.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.None">
            <summary>There is no geometry present.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.Point">
            <summary>A point.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.Polyline">
            <summary>A polyline.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.Polygon">
            <summary>A polygon.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.Model">
            <summary>A model.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.MultiGeometry">
            <summary>A multi-geometry. This is a container for geometries.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlGeometryType.Unknown">
            <summary>Unknown KML geometry type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlOverlay">
            <summary>A KML Overlay object.</summary>
            <remarks>
              KML Overlay is the base type for image overlays drawn on the planet surface or on the screen.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlGroundOverlay">
            <summary>A KML GroundOverlay object.</summary>
            <remarks>
              KML GroundOverlay is an image overlay draped on to the terrain. 
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlGroundOverlay.GetGeometry">
            <summary>
            Retrieve the geometry for the KML GroundOverlay.
            </summary>
            <returns>A geometry.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlGroundOverlay.AltitudeMode">
            <summary>
            Gets the KML altitude mode.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlGroundOverlay.GetKMLOverlayExtent">
            <summary>
            Retrieves the extent of the geometry for KML overlay.
            </summary>
            <returns>An envelope.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlScreenOverlay">
            <summary>A KML ScreenOverlay object.</summary>
            <remarks>
              KML ScreenOverlay is an image overlay fixed to the screen. ScreenOverlays may be used for compasses, logos and heads-up
              displays.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlGeometry">
            <summary>A KML geometry object.</summary>
            <remarks>
              A KML geometry contains all the KML specific information associated with a Geometry.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlGeometry.AltitudeMode">
            <summary>
            Gets the KML altitude mode.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlGeometry.IsExtruded">
            <summary>
            Gets a value indicating if the KML geometry is extruded.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlGeometry.Symbol">
            <summary>
            Gets the KML geometry's symbol.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlGeometry.GetGeometry">
            <summary>
            Retrieve the geometry for the KML geometry.
            </summary>
            <returns>A geometry.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlAltitudeMode">
            <summary>The list of grid types.</summary>
            <remarks>
              This is used to determine the KML altitude mode.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlAltitudeMode.ClampToGround">
            <summary>The &lt;altitude&gt; specification is ignored, and the object will be draped over the ground.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlAltitudeMode.RelativeToGround">
            <summary>
              (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the
              &lt;altitude&gt; will be interpreted as a value in meters above sea level.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlAltitudeMode.Absolute">
            <summary>Interprets the &lt;altitude&gt; as a value in meters above sea level.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.KmlAltitudeMode.Unknown">
            <summary>Unknown altitude mode.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.KmlLayer">
            <summary>
            Renders KML data directly from a locally stored or online KML/KMZ file.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.KmlLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.KmlLayer"/> class.
            </summary>
            <param name="source">The service URI.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlLayer.Source">
            <summary>
            Gets the data source location of the KML Layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlLayer.RootFeature">
            <summary>Gets the <see cref="T:Esri.ArcGISRuntime.Mapping.KmlLayer"/>'s root features.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.KmlLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LayerSceneProperties">
            <summary>
            Collection of properties for layers or overlays that participate in a <see cref="T:Esri.ArcGISRuntime.Mapping.Scene"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.#ctor">
            <summary>Creates a new layer scene properties object with default values.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.#ctor(Esri.ArcGISRuntime.Mapping.SurfacePlacement)">
            <summary>
            Creates a new layer scene properties object with the specified <see cref="P:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.SurfacePlacement"/>.
            </summary>
            <param name="surfacePlacement">The surface placement.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.SurfacePlacement">
            <summary>Gets the <see cref="P:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.SurfacePlacement"/> for the layer scene properties.</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.LayerSceneProperties.OnPropertyChanged(System.String)">
            <summary>Notifies listeners that a property value has changed.</summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LayerViewStateChangedEventArgs">
            <summary>
            Event arguments for the GeoView.LayerViewStateChanged event
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LayerViewStateChangedEventArgs.Layer">
            <summary>
            Gets the layer for which the view state has changed
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LayerViewStateChangedEventArgs.LayerViewState">
            <summary>
            Gets the updated view state
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.RasterLayer">
            <summary>
            An instance of this class allows you to display raster data (from a raster data source).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.RasterLayer.#ctor(Esri.ArcGISRuntime.Rasters.Raster)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.RasterLayer"/> class.
            </summary>
            <param name="raster">The service URI.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.RasterLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.RasterLayer"/> class.
            </summary>
            <param name="path">Local path to a raster data source.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer">
            <summary>
            Gets or sets the raster renderer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.RasterLayer.IsPopupEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.PopupDefinition"/> defined is enabled.
            </summary>
            <remarks>
            Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.RasterLayer.PopupDefinition">
            <summary>
            Gets or sets the pop-up definition for the RasterLayer.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledSublayer">
            <summary>
            An ArcGIS tiled sublayer.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer">
            <summary>
            A Vector Tile ArcGIS layer that rnders either vector tile services, or local vector tile packages.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer"/> class.
            </summary>
            <remarks>
            See the <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.Source"/> property for examples of supported <see cref="T:System.Uri"/> sources.
            </remarks>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <param name="source">The service <see cref="T:System.Uri"/>.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.Source">
            <summary>
            Gets or sets the endpoint of the vector tiled map service or vector tile package.
            </summary>
            <value>The service endpoint.</value>
            <remarks>
            <para>
            The source uri can point to either a local file path (ie file://c:/data/mapdata.vtpk) or a map 
            service url (ie http://basemaps.arcgis.com/arcgis/rest/services/World_Basemap/VectorTileServer/).
            </para>
            <para>
            In Windows Universal apps you can also use ms-appx:/// and ms-appdata:/// paths to point to local
            tile packages in the app or app data folders.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.SourceInfo">
            <summary>
            Gets the vector tile source metadata
            </summary>
            <remarks>This property is not available until after successful load of the layer.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.VectorTileStyle">
            <summary>
            This object represents the style information for an <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISVectorTiledLayer"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.VectorTileStyle.Uri">
            <summary>Returns the vector tile Source Uri.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.VectorTileStyle.Version">
            <summary>Gets the style version.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer">
            <summary>
            An ArcGIS Scene layer that renders scene services, or local scene packages.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer" /> class
            </summary>
            <param name="source">The service URI.</param>
            <exception cref="T:System.ArgumentNullException">sceneLayerUrl</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSceneLayer.Source">
            <summary>
            Gets or sets the endpoint of the scene service layer.
            </summary>
            <value>The service endpoint.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ILayerContent">
            <summary>
            An interface for building a Table of Content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ILayerContent.CanChangeVisibility">
            <summary>
            Gets a value indicating whether the layer content's visibility can be changed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ILayerContent.IsVisible">
            <summary>
            Gets or sets a value indicating whether the layer content is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ILayerContent.Name">
            <summary>
            Get the name of the layer content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ILayerContent.ShowInLegend">
            <summary>
            Get or sets a value indicating whether the layer content participates in the legend.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ILayerContent.SublayerContents">
            <summary>
            Gets the sub layer contents of a layer content.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ILayerContent.GetLegendInfosAsync">
            <summary>
            Returns an immutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/>.
            </summary>
            <returns>
            The task object representing the asynchronous get legend infos operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ILayerContent.IsVisibleAtScale(System.Double)">
            <summary>
            Returns the layer content's effective visibility at the specified scale.
            </summary>
            <remarks>
            The effective visibility returned takes care of the effective visibility of the parents at the specified scale. 
            Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
            <returns>
            A boolean value where true means layers visibility can be displayed, false means an error has occurred.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.SurfacePlacement">
            <summary>The options for handling altitude values.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SurfacePlacement.Draped">
            <summary>Drape the data on the surface.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SurfacePlacement.Absolute">
            <summary>Treat the Z values as absolute altitude values.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SurfacePlacement.Relative">
            <summary>Treat the Z values as relative to the surface altitude values.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledElevationSource">
            <summary>
             Class that represents an elevation source that can visualize an ArcGIS elevation image service.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledElevationSource.#ctor">
            <summary>Creates a ArcGIS tiled elevation source object.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledElevationSource.#ctor(System.Uri)">
            <summary>Creates a ArcGIS tiled elevation source object from the given URI.</summary>
            <param name="source">The external source URL of an elevation service or elevation service portal item.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledElevationSource.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this service.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledElevationSource.Source">
            <summary>
            Gets or sets the endpoint of the ArcGIS elevation service.
            </summary>
            <value>The service endpoint.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ElevationSource">
            <summary>Base class for all elevation sources.</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.ElevationSource.Loaded">
            <summary>
            Occurs when the elevation source is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.ElevationSource.LoadStatusChanged">
            <summary>
            Occurs when the elevation source LoadStatus property is changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ElevationSource.LoadStatus">
            <summary>
            Gets the load status of the elevation source.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ElevationSource.LoadError">
            <summary>
            Gets the load error of the elevation source (null if loading was successful).
            </summary>
            <value>The load exception.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ElevationSource.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ElevationSource.LoadAsync">
            <summary>
            Initiates loading of the elevation source.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ElevationSource.RetryLoadAsync">
            <summary>
            Retry loading the elevation source.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the task is in the failed
            to load state. Does nothing if the task is in any other state.</p>
            </remarks>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.ElevationSource.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ElevationSource.RuntimeCoreNet#GeneratedWrappers#ICoreInstanceId#InstanceId">
            <summary>
            Returns the internal instance Id of the elevation source.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ElevationSource.IsEnabled">
            <summary>Gets or sets the enabled state of the elevation source.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ElevationSource.Name">
            <summary>Gets or sets the name of the elevation source.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ElevationSourceCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Mapping.ElevationSource">elevation sources</see>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ElevationSourceCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ElevationSourceCollection"/> class.
            </summary>
            <param name="elevationSources">The core vector of elevation sources.</param>
            <param name="context">Context to ensure INPC is raised on the thread this instance was created on.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult">
            <summary>
            Identify result containing a layer content and the identified popups of that layer content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult.LayerContent">
            <summary>Get the identify result's layer content (a RT_LayerContentInterface)</summary>
            <remarks>
              The element will contain an object that implements RT_LayerContentInterface. This may be either a
              RT_ArcGISSublayerHandle or a RT_LayerHandle.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult.Popups">
            <summary>
            Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.Popup"/>.
            </summary>
            <value>Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.Popup"/>.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult.SublayerResults">
            <summary>
            Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult"/>.
            </summary>
            <value>Gets a list of identified <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.IdentifyPopupResult"/>.</value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.IPopupSource">
            <summary>
            An interface to type any classes such as <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISSublayer"/>, <see cref="T:Esri.ArcGISRuntime.Mapping.FeatureLayer"/>, <see cref="T:Esri.ArcGISRuntime.Mapping.RasterLayer"/>, and <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlay"/> that support popup 
            and have PopupDefinition.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.IPopupSource.IsPopupEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Esri.ArcGISRuntime.Mapping.Popup.IPopupSource.PopupDefinition"/> defined is enabled.
            </summary>
            <remarks>
            Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.IPopupSource.PopupDefinition">
            <summary>
            Gets or sets the pop-up definition
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.Popup">
            <summary>
            Represents a pop-up which is basically a pair (GeoElement, PopupDefinition).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.Popup.#ctor(Esri.ArcGISRuntime.Data.GeoElement,Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.Popup" /> class.
            </summary>
            <param name="geoElement">A <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> or <see cref="T:Esri.ArcGISRuntime.UI.Graphic"/></param>
            <param name="popupDefinition"><see cref="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.PopupDefinition"/></param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.EditSummary">
            <summary>
            Gets or sets the popup edit summary.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.GeoElement">
            <summary>
            Gets the geo element of the popup.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.PopupDefinition">
            <summary>
            Gets the popup definition of the popup.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.Symbol">
            <summary>
            Gets the popup symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.Title">
            <summary>
            Gets or sets the popup title.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.Popup.FromGeoElement(Esri.ArcGISRuntime.Data.GeoElement)">
            <summary>
            Creates a new popup from a GeoElement. 
            </summary>
            <param name="geoElement">A <see cref="P:Esri.ArcGISRuntime.Mapping.Popup.Popup.GeoElement"/>.</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.Popup"/> from the GeoElement.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.Popup.GetFormattedValue(Esri.ArcGISRuntime.Mapping.Popup.PopupField)">
            <summary>
            Returns the formatted value of the popup field.
            </summary>
            <param name="popupField">The popup field.</param>
            <returns>
            A string that has been formatted.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat">
            <summary>
            Format of a date field in a pop-up.
            </summary>
            <remarks>
            Controls how a date field is displayed a pop-up.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.DayShortMonthYear">
            <summary>
            Example: 30 Dec 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.LongDate">
            <summary>
            Example: Tuesday, December 30, 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.LongMonthDayYear">
            <summary>
            Example: December 30, 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.LongMonthYear">
            <summary>
            Example: December 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDate">
            <summary>
            Example: 12/30/1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLE">
            <summary>
            Example: 30/12/1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLELongTime">
            <summary>
            Example: 30/12/1997 5:59:59 PM
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLELongTime24">
            <summary>
            Example: 30/12/1997 17:59:59
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLEShortTime">
            <summary>
            Example: 30/12/1997 6:00 PM
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLEShortTime24">
            <summary>
            Example: 30/12/1997 18:00
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLongTime">
            <summary>
            Example: 12/30/1997 5:59:59 PM
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateLongTime24">
            <summary>
            Example: 12/30/1997 17:59:59
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateShortTime">
            <summary>
            Example: 12/30/1997 6:00 PM
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortDateShortTime24">
            <summary>
            Example: 12/30/1997 18:00
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.ShortMonthYear">
            <summary>
            Example: Dec 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.Year">
            <summary>
            Example: 1997
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupDateFormat.Unknown">
            <summary>
            Unknown date format.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition">
            <summary>
            Represents the look and feel of pop-ups.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.AllowDelete">
            <summary>
            Gets or sets a value indicating whether the popup should allow the associated GeoElement to be deleted.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.AllowEdit">
            <summary>
            Gets or sets a value indicating whether the popup should allow the associated GeoElement to be edited.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.AllowEditGeometry">
            <summary>
            Gets or sets a value indicating whether the popup should allow the geometry of the associated GeoElement to be edited.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.Description">
            <summary>
            Gets or sets a string that appears in the body of the pop-up window as a description.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.Fields">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupField"/> which defines how each field participates in the pop-up window.
            </summary>
            <remarks>
            The order of the field in this collection is the order that fields are shown in the pop-up window.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.Medias">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia"/> which defines images and charts displayed in the pop-up window.
            </summary>
            <remarks>
            The order of the field in this collection is the order that fields are shown in the pop-up window.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.ShowAttachments">
            <summary>
            Gets or sets a value indicating whether attachments will be loaded for feature layers that have attachments.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.ShowEditSummary">
            <summary>
            Gets or sets a value indicating whether the popup should display the edit summary of the associated GeoElement.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.ShowRelatedRecords">
            <summary>
            Gets or sets a value indicating whether the popup should display the related records summary of the associated GeoElement.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.Title">
            <summary>
            Gets or sets a string that appears at the top of the pop-up window as a title.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.FromGeoElement(Esri.ArcGISRuntime.Data.GeoElement)">
            <summary>
            Creates a new popup definition from a geo element.
            </summary>
            <param name="geoElement">A <see cref="T:Esri.ArcGISRuntime.Data.GeoElement"/>.</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition"/> from the GeoElement.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition.FromPopupSource(Esri.ArcGISRuntime.Mapping.Popup.IPopupSource)">
            <summary>
            Creates a new popup definition from a popup source.
            </summary>
            <param name="popupSource">A class that implements <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.IPopupSource"/></param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupDefinition"/> from the popup source.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupField">
            <summary>
            Represents how a geoelement's attribute (field) should be displayed in a pop-up.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupField" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.Format">
            <summary>
            Gets or sets the format used to display the field.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.IsEditable">
            <summary>
            Gets or sets a value indicating whether users can edit the field.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.IsVisible">
            <summary>
            Gets or sets a value indicating whether the field is visible in the pop-up.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.Label">
            <summary>
            Gets or sets the field label. The field label (alias) can be overriden by the web map author.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.StringFieldOption">
            <summary>
            Gets the type of input box editors see when editing the field.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupField.Tooltip">
            <summary>
            Gets or sets a string providing hints for editors of the field. 
            This string can provide a short description of the field and how editors should format or supply its value.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat">
            <summary>
            Represents the formatting of a field when used in the application. Applies only to fields of type date or number (float, double, integer).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat.DateFormat">
            <summary>
            Gets or sets the format used to display a date field in a pop-up.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat.DecimalPlaces">
            <summary>
            Gets or sets the number of supported decimal places that should appear for displaying a numerical field in a pop-up.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupFieldFormat.UseThousandsSeparator">
            <summary>
            Gets or sets a value indicating whether a numerical field may use the thousands (or digit) separator when the field is displayed in a pop-up.
            </summary>
            <remarks>
             Depending on the locale, the thousands separator is a decimal point, a comma or a blank.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia">
            <summary>
            Represents how a geoelement's attribute (field) should be displayed in a pop-up.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia.Caption">
            <summary>
            Gets or sets the caption that is displayed for the media.
            </summary>
            <remarks>
            This can contain a literal value, or a placeholder for value from the geoelement's attribute for which the pop-up is
            displayed. The placeholder needs to be of the form {field_name} where field_name is a key in the geoelement's
            attributes.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia.Title">
            <summary>
            Gets or sets the title that is displayed for the media.
            </summary>
            <remarks>
            This can contain a literal value, or a placeholder for value from the geoelement's attribute for which the pop-up is
            displayed. The placeholder needs to be of the form {field_name} where field_name is a key in the geoelement's attributes.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia.Type">
            <summary>
            Gets or sets the type of media.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMedia.Value">
            <summary>
            Gets or sets the optional popup media value that are depending on the type of media.
            </summary>
            <remarks>
            Returns NULL if an error occurs or if the popup media has no associated value.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType">
            <summary>
            Type of media in a pop-up.
            </summary>
            <remarks>
            Controls the type of media inside a pop-up.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.BarChart">
            <summary>
            Bar chart.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.ColumnChart">
            <summary>
            Column chart.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.LineChart">
            <summary>
            Line chart.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.PieChart">
            <summary>
            Pie chart.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaType.Unknown">
            <summary>
            Unknown media type.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue">
            <summary>
            Represents the popup media values that are depending on the type of media.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.FieldNames">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Data.Field"/> which defines fields used in the chart.
            </summary>  
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.LinkUrl">
            <summary>
            Gets or sets the link URL for an image media.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.NormalizeFieldName">
            <summary>
            Gets or sets the optional field used to normalize the chart.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.SourceUrl">
            <summary>
            Gets or sets the source URL for an image media.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Popup.PopupMediaValue.TooltipFieldName">
            <summary>
            Gets or sets the tooltip field.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Popup.PopupStringFieldOption">
             <summary>
             Type of input box editors see when editing the field in a pop-up.
             </summary>
            <remarks>
             Controls the type of input box editors inside a pop-up.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupStringFieldOption.SingleLine">
            <summary>
            A single-line input box.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupStringFieldOption.MultiLine">
            <summary>
            A multi-line input box.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupStringFieldOption.RichText">
            <summary>
            A rich text editor allowing for bold text, highlighting, and so forth.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.Popup.PopupStringFieldOption.Unknown">
            <summary>
            Unknown string field option.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Scene">
            <summary>
            The scene contains layers and additional properties and can be displayed in a <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.LoadAsync">
            <summary>
            Initiates loading of a scene
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.RetryLoadAsync">
            <summary>
            Retries the load operation in case of a load error.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Scene.LoadError"/>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Scene.LoadStatus"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.LoadStatus">
            <summary>
            Gets the current load status of the scene.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Scene.LoadError"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.LoadError">
            <summary>
            Gets the load error for this instance - if any.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Scene.LoadStatus"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Scene.Loaded">
            <summary>
            Occurs when this instance is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Scene.LoadStatusChanged">
            <summary>
            Occurs when the instance's LoadStatus has changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Scene"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.#ctor(Esri.ArcGISRuntime.Mapping.Basemap)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Scene"/> class with a <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/>.
            </summary>
            <param name="basemap">The basemap for the scene.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.#ctor(Esri.ArcGISRuntime.Mapping.BasemapType)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Scene"/> class with a <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/>.
            </summary>
            <param name="basemapType">Type of the basemap.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreScene,System.Boolean,Esri.ArcGISRuntime.Mapping.Basemap)">
            <summary>
            Creates a scene from a CoreScene instance
            </summary>
            <param name="coreScene">The core reference object</param>
            <param name="delayCreateLayers">Does not create the operational layers and basemap until load completes</param>
            <param name="basemap">The basemap to associate with the scene</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.BaseSurface">
            <summary>Gets or sets the base surface for the scene.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.Basemap">
            <summary>
            Gets or sets the basemap for the Scene
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.OperationalLayers">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerCollection">collection</see> of operational <see cref="T:Esri.ArcGISRuntime.Mapping.Layer">layers</see> in the scene.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.AllLayers">
            <summary>
            Gets all layers in the order they are rendered (bottom-most first).
            </summary>
            <value>All layers.</value>
            <remarks>
            Layers are returned in the following order:<br/>
            - Basemap Layers<br/>
            - Operational Layers<br/>
            - Basemap Reference layers<br/>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.SpatialReference">
            <summary>
            Gets the spatial reference for the scene
            </summary>
            <remarks>
            This value only available after the scene has loaded.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.InitialViewpoint">
            <summary>
            Gets or sets the view point where the scene should start up at.
            </summary>
            <remarks>
            <para>
            Set this view point prior to loading the scene in a sceneview. It will be ignored after that point.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Scene.Bookmarks">
            <summary>
            Gets or sets the bookmarks associated with the scene.
            </summary>
            <value>The the bookmarks associated with the scene.</value>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Scene.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The PropertyChanged event can indicate all properties on the object have changed by using
            either <c>null</c> or <see cref="F:System.String.Empty"/> as the property name in the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Scene.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Surface">
            <summary>
             Surface contains elevation sources and defines a surface upon which layers and overlays can be draped.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Surface.#ctor">
            <summary>Creates a new Surface instance</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Surface.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Surface.Loaded">
            <summary>
            Occurs when the surface is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Surface.LoadStatusChanged">
            <summary>
            Occurs when the surface LoadStatus property is changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.LoadStatus">
            <summary>
            Gets the load status of the surface.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.LoadError">
            <summary>
            Gets the load error of the surface (null if loading was successful).
            </summary>
            <value>The load exception.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Surface.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Surface.LoadAsync">
            <summary>
            Initiates loading of the surface.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Surface.RetryLoadAsync">
            <summary>
            Retry loading the surface.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the task is in the failed
            to load state. Does nothing if the task is in any other state.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.ElevationExaggeration">
            <summary>Gets or sets the exaggeration for the surface.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.ElevationSources">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Mapping.ElevationSourceCollection">collection</see> of 
            <see cref="T:Esri.ArcGISRuntime.Mapping.ElevationSource">elevation sources</see> in the surface.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.IsEnabled">
            <summary>Gets or sets whether this surface is enabled.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.Name">
            <summary>Gets or sets the name for the surface.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Surface.RuntimeCoreNet#GeneratedWrappers#ICoreInstanceId#InstanceId">
            <summary>
            Returns the internal instance Id of the surface.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.MobileMapPackage">
            <summary>A mobile map package.</summary>
            <remarks>
              Allows to read maps, networks and locator from mobile map package. 
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.MobileMapPackage.OpenAsync(System.String)">
            <summary>Opens a mobile map package.</summary>
            <param name="path">A path to mobile map package.</param>
            <returns>
            The task object representing the asynchronous open operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Mapping.MobileMapPackage"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.MobileMapPackage.Item">
            <summary>Gets mobile map package's item.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.MobileMapPackage.Locator">
            <summary>Gets locator task.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.MobileMapPackage.Maps">
            <summary>Gets array of maps.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.MobileMapPackage.Path">
            <summary>Gets mobile map package's path.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.MobileMapPackage.Version">
            <summary>Gets mobile map package's version.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer">
            <summary>
            Dynamic ArcGIS REST map service layer.
            </summary>
            <remarks>
            <para>
            An ArcGISDynamicMapServiceLayer is a dynamic map service published by ArcGIS Server (version 9.3 and higher) using REST. An ArcGISDynamicMapServiceLayer 
            has the following characteristics:
            </para>
            <list type="bullet">
             <item>
             It is composed of one or more sub-layers that display some geographic phenomena in a map image.
             </item>
             <item>
             Map images are generated on-the-fly from ArcGIS Server when requested by the client application.
             </item>
             <item>
             The background color for the map image will always be transparent when the 
             <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.ImageFormat">ArcGISMapImageLayer.ImageFormat</see> 
             is set to use a lossless data compression such as PNG.
             </item>
             <item>
             The drawing performance is not as fast as cached map images using the 
             <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer">ArcGISTiledMapServiceLayer</see> but may be 
             more appropriate for highly focused intra-net applications and applications that are based on real-time 
             or frequently updated data.
             </item>
            </list>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer"/> class.
            </summary>
            <param name="source">The service URI.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.#ctor(Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer"/> class from a service info description.
            </summary>
            <param name="serviceInfo">The service info description.</param>
            <exception cref="T:System.ArgumentNullException">serviceInfo</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.Source">
            <summary>
            Gets or sets the endpoint of the map service.
            </summary>
            <value>The service endpoint.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.ServiceInfo">
            <summary>
            Service metadata
            </summary>
            <remarks>This property is not available until after successful load of the layer.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.GeodatabaseVersion">
            <summary>
              Gets the geodatabase version of the map image layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.ImageFormat">
            <summary>
              Gets the image format of the map image layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.Sublayers">
            <summary>Returns one or more sublayer of a map image layer.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageLayer.FromJSON(System.String)">
            <summary>
              Creates a map image layer object.
            </summary>
            <param name="json">The JSON data describing the service.</param>
            <returns>ArcGISMapImageLayer.</returns>
            <exception cref="T:System.ArgumentNullException">json</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageSublayer">
            <summary>
            An ArcGIS map image sub layer.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageSublayer.#ctor(System.Int32)">
            <summary>
              Create a map image sublayer with the specified id.
            </summary>
            <remarks>		
            <p><b>Remark</b>: The id should be zero or greater.</p>
            </remarks>
            <param name="id">The sublayer id.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISMapImageSublayer.DefaultVisibility">
            <summary>
              Gets the sublayer's default visibility.
            </summary>
            <remarks>
            <p><b>Remark</b>: Returns the sublayer default visibility. Will return false if an error occurs.</p>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISMapImageSublayer.SetName(System.String)">
            <summary>
            Sets the map image sublayer's name.
            </summary>
            <param name="name">The sublayer name.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISSublayer">
            <summary>
            An ArcGIS sublayer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.ID">
            <summary>
              Returns an id uniquely identifying the layer instance.
            </summary>
            <remarks>
            <p><b>Remark</b>: Returns the sublayer ID. Will return -1 if an error occurs.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.Sublayers">
            <summary>
              Gets the sublayers of a sublayer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.MaxScale">
            <summary>
            Gets the maximum scale where the layer is visible.
            </summary>
            <remarks>
            <p><b>Remark</b>: Returns the sublayer maximum scale. Will return NAN if an error occurs.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.MinScale">
            <summary>
              Gets the sublayer's minimum scale.
            </summary>
            <remarks>
            <p><b>Remark</b>: Returns the sublayer minimum scale. Will return NAN if an error occurs.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.IsPopupEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.PopupDefinition"/> defined is enabled.
            </summary>
            <remarks>
            Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.PopupDefinition">
            <summary>
            Gets or sets the pop-up definition for the sublayer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.CanChangeVisibility">
            <summary>
            Gets a value indicating whether the layer content's visibility can be changed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.IsVisible">
            <summary>
            Gets or sets a value indicating whether the layer content is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.Name">
            <summary>
            Gets (or sets if <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISMapImageSublayer"/>) the name of the layer content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.ShowInLegend">
            <summary>
            Get or sets a value indicating whether the layer content participates in the legend.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.SublayerContents">
            <summary>
            Gets the sub layer contents of a layer content.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.GetLegendInfosAsync">
            <summary>
            Returns an immutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/>.
            </summary>
            <returns>
            The task object representing the asynchronous get legend infos operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.IsVisibleAtScale(System.Double)">
            <summary>
            Returns the layer content's effective visibility at the specified scale.
            </summary>
            <remarks>
            The effective visibility returned takes care of the effective visibility of the parents at the specified scale. 
            Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value where true means layers visibility can be displayed, false means an error has occurred.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.Clone">
            <summary>
            Clones this instance of the ArcGISSublayer and its members.
            </summary>
            <returns>A copy of the ArcGISSublayer.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.ArcGISSublayer.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISSublayerType">
            <summary>
              The list of ArcGIS sublayer types.
            </summary>
            <remarks>
            <p><b>Remark</b>: This is used to determine the sublayer type.</p>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ArcGISSublayerType.ArcGISMapImageSublayer">
            <summary>
              An ArcGIS map image sublayer.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ArcGISSublayerType.ArcGISTiledSublayer">
            <summary>
              An ArcGIS Tiled sublayer
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer">
            <summary>
            An ArcGIS Image Tiled layer that renders raster tile services, or local tile packages.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer"/> class.
            </summary>
            <param name="source">The service URI.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <remarks>
            See the <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.Source"/> property for examples of supported <see cref="T:System.Uri"/> sources.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.#ctor(Esri.ArcGISRuntime.Mapping.TileCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer"/> class from a local tile cache.
            </summary>
            <param name="tileCache">The local tile cache object.</param>
            <exception cref="T:System.ArgumentNullException">tileCache</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.#ctor(Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer"/> class from a service info description.
            </summary>
            <param name="serviceInfo">The service info description.</param>
            <exception cref="T:System.ArgumentNullException">serviceInfo</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.Source">
            <summary>
            Gets or sets the endpoint of the map service or local tile package.
            </summary>
            <value>The service endpoint.</value>
            <remarks>
            <para>
            The source uri can point to either a local file path (ie file://c:/data/mapdata.tpk) or a map 
            service url (ie http://services.arcgisonline.com/arcgis/rest/services/World_Street_Map/MapServer).
            </para>
            <para>
            In Windows Universal apps you can also use ms-appx:/// and ms-appdata:/// paths to point to local
            tile packages in the app or app data folders.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.CreateCoreTiledLayerFromUri(System.Uri)">
            <summary>
            This method analyzes the URI and creates either a service tiled layer from a http(s) url, or a local tile layer from a 
            local file:// or relative path URI.
            </summary>
            <param name="source">The source uri.</param>
            <returns></returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.TileCache">
            <summary>
            Gets the tile cache representing information about a local tile package. 
            </summary>
            <remarks>
            This value is only populated if the <see cref="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.Source"/> property points to a local file.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.ServiceInfo">
            <summary>
            Service metadata
            </summary>
            <remarks>This property is not available until after successful load of the layer.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Basemap">
            <summary>
            Represents the base map part of a <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.LoadAsync">
            <summary>
            Initiates loading of a basemap
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.RetryLoadAsync">
            <summary>
            Retry loading metadata for the instance in case of a load error.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the layer is in the failed
            to load state. Does nothing if the instance is in any other state.</p>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.LoadStatus">
            <summary>
            Gets the load status of the instance.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Basemap.LoadError"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.LoadError">
            <summary>
            Gets the load error for this instance - if any.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Basemap.LoadStatus"/>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Basemap.Loaded">
            <summary>
            Occurs when this instance is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Basemap.LoadStatusChanged">
            <summary>
            Occurs when the instance's LoadStatus has changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateImagery">
            <summary>
            Creates an imagery basemap.
            </summary>
            <returns>Imagery basemap.</returns>
            <remarks>
            The World Imagery map is a detailed imagery map layer that is designed to be used as a basemap for various maps and applications.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateImageryWithLabels">
            <summary>
            Creates an imagery basemap with labels on top.
            </summary>
            <returns>Imagery basemap.</returns>
            <remarks>
            The World Imagery map is a detailed imagery map layer and labels that is designed to be used as a basemap for various maps and applications.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateLightGrayCanvas">
            <summary>
            Creates a light gray canvas basemap.
            </summary>
            <returns>Imagery basemap.</returns>
            <remarks>
            The Light Gray Canvas basemap is designed to be used as a neutral background map for overlaying and emphasizing other map layers.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateNationalGeographic">
            <summary>
            Creates a National Geographic basemap.
            </summary>
            <returns>Imagery basemap.</returns>
            <remarks>
            The National Geographic basemap is designed to be used as a general reference map for informational and educational purposes.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateOceans">
            <summary>
            Creates an oceans basemap.
            </summary>
            <returns>Imagery basemap.</returns>
            <remarks>
            The Ocean Basemap is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateStreets">
            <summary>
            Creates a streets basemap.
            </summary>
            <returns>Streets basemap.</returns>
            <remarks>
            The Streets basemap presents a multiscale street map for the world.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateTerrainWithLabels">
            <summary>
            Creates a labeled terrain basemap.
            </summary>
            <returns>Labeled terrain basemap.</returns>
            <remarks>
            The Terrain with Labels basemap is designed to be used to overlay and emphasize other thematic map layers.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.CreateTopographic">
            <summary>
            Creates a topographic basemap.
            </summary>
            <returns>Topographic basemap.</returns>
            <remarks>
            The Topographic map includes boundaries, cities, water features, physiographic features, parks, landmarks, transportation, and buildings.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreBasemap,System.Threading.SynchronizationContext,System.Boolean)">
            <summary>
            Creates a base map from a CoreBaseap instance
            </summary>
            <param name="coreBasemap">The core reference object</param>
            <param name="delayCreateLayers">
            <param name="context">Context to ensure INPC is raised on the thread this instance was created on.</param>
            Set to false if the contents of CoreBasemap is delay loaded (ie when waiting for webmap
            json to be available)</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor(Esri.ArcGISRuntime.Mapping.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> class with the specified layer.
            </summary>
            <param name="baseLayer">The base layer to add to the <see cref="P:Esri.ArcGISRuntime.Mapping.Basemap.BaseLayers"/> collection.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Mapping.Layer},System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Mapping.Layer})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> class with a set of predefined layers.
            </summary>
            <param name="baseLayers">The base layers to add to the <see cref="P:Esri.ArcGISRuntime.Mapping.Basemap.BaseLayers"/> collection.</param>
            <param name="referencelayers">The reference layers to add to the <see cref="P:Esri.ArcGISRuntime.Mapping.Basemap.ReferenceLayers"/> collection.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> class with a Uri to a portal item which is a web base map.
            </summary>
            <remarks>
            The uri parameter may be a direct Uri to web map JSON content or the Uri of a portal item.
            Examples of supported portal item Uri values:
            <list type="bullet">
                 <item>http://www.arcgis.com/home/item.html?id=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/home/webmap/viewer.html?webmap=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/sharing/rest/content/items/&lt;web_map_id&gt;/data</item>
            </list>
            </remarks>
            <param name="uri">The base map URI</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.#ctor(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> class with a web map portal item.
            </summary>
            <remarks>
            The specified portal item must be of type WebMap or the Basemap will fail to load
            </remarks>
            <param name="portalItem">The portal item</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.LoadFromUriAsync(System.Uri)">
            <summary>
            Load a base map from a uri resource
            </summary>
            <param name="uri">The uri to the base map.</param>
            <returns>Task&lt;Basemap&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.BaseLayers">
            <summary>
            Gets or sets the base layers of the base map.
            </summary>
            <value>The base layers.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Basemap.ReferenceLayers"/>
            <see cref="P:Esri.ArcGISRuntime.Mapping.Map.OperationalLayers"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.ReferenceLayers">
            <summary>
            Gets or sets the reference layers displayed on top of the <see cref="P:Esri.ArcGISRuntime.Mapping.Map.OperationalLayers"/>.
            </summary>
            <value>The reference layers.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Basemap.BaseLayers"/>
            <see cref="P:Esri.ArcGISRuntime.Mapping.Map.OperationalLayers"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.Name">
            <summary>
            Gets or sets the name of the base map.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Basemap.PortalItem">
            <summary>Gets the PortalItem</summary>
            <remarks>
            This is only available if the Basemap is associated with a PortalItem - has been created from a portal
            item with the Basemap(Uri) or Basemap(PortalItem) constructor.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.FromJson(System.String)">
            <summary>
            Creates a base map from the json.
            </summary>
            <param name="json">json base map.</param>
            <returns>Basemap.</returns>
            <exception cref="T:System.ArgumentNullException">json</exception>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Basemap.ToJson" />
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.ToJson">
            <summary>
            Serializes the base map to json.
            </summary>
            <returns>JSON string.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Basemap.FromJson(System.String)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.Clone">
            <summary>
            Clones this instance of Basemap and its members.
            </summary>
            <returns>A copy of Basemap.</returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Basemap.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Basemap.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.BasemapType">
            <summary>
             The list of predefined basemap types for easy creation of a basemap.
             </summary>
             <seealso cref="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Mapping.BasemapType,System.Double,System.Double,System.Int32)"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.Imagery">
            <summary>Imagery.</summary>
             <remarks>
             The World Imagery map is a detailed imagery map layer that is designed to be used as a basemap for various maps and applications.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.ImageryWithLabels">
            <summary>Imagery with labels.</summary>
             <remarks>
             The World Imagery map is a detailed imagery map layer and labels that is designed to be used as a basemap for various maps and applications.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.Streets">
            <summary>Streets.</summary>
             <remarks>
             The Streets basemap presents a multiscale street map for the world.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.Topographic">
            <summary>Topographic.</summary>
             <remarks>
             The Topographic map includes boundaries, cities, water features, physiographic features, parks, landmarks, transportation, and buildings.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.TerrainWithLabels">
            <summary>Terrain with labels.</summary>
             <remarks>
             The Terrain with Labels basemap is designed to be used to overlay and emphasize other thematic map layers.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.LightGrayCanvas">
            <summary>Light gray canvas.</summary>
             <remarks>
             The Light Gray Canvas basemap is designed to be used as a neutral background map for overlaying and emphasizing other map layers.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.NationalGeographic">
            <summary>National geographic.</summary>
             <remarks>
             The National Geographic basemap is designed to be used as a general reference map for informational and educational purposes.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.Oceans">
            <summary>Oceans.</summary>
             <remarks>
             The Ocean Basemap is designed to be used as a basemap by marine GIS professionals and as a reference map by anyone interested in ocean data.
             </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.BasemapType.OpenStreetMap">
            <summary>Open Street Map.</summary>
             <remarks>
             <para>The OpenStreetMap is a community map layer that is designed to be used as a basemap for various maps and applications.</para>
             <para>Note: When you use the OpenStreetMaps data, you must properly credit. See more here: <a href="http://www.openstreetmap.org/copyright">www.openstreetmap.org/copyright</a>.</para>
             </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.FeatureLayer">
            <summary>
            ArcGIS Feature Layer display data from either the (1) offline data source of <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable"/> 
            or (2) the online data source of <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.FeatureTable"/>
            <remarks>
            <para>
            Local disk based FeatureLayers DO NOT re-project to match the Map's SpatialReference!
            </para>
            <para>
            It is recommended to always set the SpatialReference for the Map when using a FeatureLayer based on a local disk based FeatureTable such as
            a <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable"/>. The reason is that the visual elements of the FeatureLayer may not 
            display if the Shapefile or ArcGISFeatureTable are not based on the SpatialReference WKID of 3787 (aka. Web Mercator). By specifying the 
            Map's SpatialReference to be exactly the same at the ShapefileTable or ArcGISFeatureTable, you will be assured that it displays visually 
            in the Map.
            </para>
            <para>
            If the FeatureLayer is based on an ArcGIS Server web <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>, then re-projection of the data automatically occurs
            to match the SpatialReference of the Map.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.FeatureLayer" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.#ctor(Esri.ArcGISRuntime.Data.FeatureTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.FeatureLayer" /> class.
            </summary>
            <param name="featureTable">The feature table source.</param>
            <exception cref="T:System.ArgumentNullException">featureTable</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.FeatureLayer" /> class
            with a <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>.
            </summary>
            <param name="featureServiceUri">The feature service Uri.</param>
            <exception cref="T:System.ArgumentNullException">featureServiceUri</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.#ctor(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.FeatureLayer" /> class
            with a <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>.
            </summary>
            <param name="featureServiceUri">The feature service Uri.</param>
            <param name="credential">The credential used to access the feature service.</param>
            <exception cref="T:System.ArgumentNullException">featureServiceUri</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.FeatureTable">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.FeatureTable"/> that contains feature.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.FeatureTable"/> that contains feature.</value>
            <see cref="T:Esri.ArcGISRuntime.Data.ArcGISFeatureTable"/>
            <see cref="T:Esri.ArcGISRuntime.Data.ServiceFeatureTable"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.Renderer">
            <summary>
            Gets or sets the renderer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.DefinitionExpression">
            <summary>
            Gets or sets the definition expression which is a where clause. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.LabelsEnabled">
            <summary>
            Gets or sets the LabelsEnabled which is used to enable labeling of a FeatureLayer. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectionColor">
            <summary>
            Gets or sets the color for selected features. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectionWidth">
            <summary>
            Gets or sets the width of the selection highlight.
            </summary>
            <value>The width of the selection highlight.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.IsPopupEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.PopupDefinition"/> defined is enabled.
            </summary>
            <remarks>
            Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.FeatureLayer.PopupDefinition">
            <summary>
            Gets or sets the pop-up definition for the FeatureLayer.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.GetSelectedFeaturesAsync">
            <summary>
            Returns a list of the currently selected features.
            </summary>
            <returns>
            The task object representing the asynchronous get selected features operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> object; only selected features are present.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.ClearSelection">
            <summary>
              Clears all selected features.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.ResetFeaturesVisible">
            <summary>
            Resets the layer's features visibility back to factory defaults.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.ResetRenderer">
            <summary>
            Resets the renderer to the factory default.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectFeature(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Selects the given feature and adds it to the current list of selected features.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectFeatures(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})">
            <summary>
            Selects the features in the list and adds them to the current list of selected features.
            </summary>
            <param name="features">The collection of <see cref="T:Esri.ArcGISRuntime.Data.Feature"/> objects to be added to the current list of selected features.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectFeaturesAsync(Esri.ArcGISRuntime.Data.QueryParameters,Esri.ArcGISRuntime.Mapping.SelectionMode)">
            <summary>
            Selects the features that match the criteria in the <see cref="T:Esri.ArcGISRuntime.Data.QueryParameters"/> object 
            and adds them to the current list of selected features <see cref="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.GetSelectedFeaturesAsync"/>.
            </summary>
            <param name="mode">Defines how the list of currently selected features will be updated 
            with the features returned from the query.</param>
            <param name="parameters">The definition of the query to submit to the feature table.</param>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectFeature(Esri.ArcGISRuntime.Data.Feature)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SelectFeatures(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})"/>
            <returns>
            The task object representing the asynchronous select features operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Data.FeatureQueryResult"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SetFeatureVisible(Esri.ArcGISRuntime.Data.Feature,System.Boolean)">
            <summary>
            Sets the visibility of the given feature.
            </summary>
            <param name="feature">The feature.</param>
            <param name="visible">true to show, false to hide.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.SetFeaturesVisible(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature},System.Boolean)">
            <summary>
            Sets the visibility of the given features.
            </summary>
            <param name="features">The features</param>
            <param name="visible">true to show, false to hide.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.UnselectFeature(Esri.ArcGISRuntime.Data.Feature)">
            <summary>
            Unselects the given feature and removes it from the current list of selected features.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.FeatureLayer.UnselectFeatures(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Data.Feature})">
            <summary>
            Unselects the features in the given list and removes them from the current list of selected features.
            </summary>
            <param name="features">The features</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ImageAdjustmentLayer">
            <summary>
            Basic raster layer type that allows for per-pixel adjustments
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ImageAdjustmentLayer.Brightness">
            <summary>
            Gets or sets layer brightness level.
            </summary>
            <remarks>
            The brightness level is a value between -100 and 100 with a default of 0.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ImageAdjustmentLayer.Contrast">
            <summary>
            Gets or sets layer contrast level.
            </summary>
            <remarks>
            The brightness level is a value between -100 and 100 with a default of 1.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ImageAdjustmentLayer.Gamma">
            <summary>
            Gets or sets layer gamma level.
            </summary>
            <remarks>
            The gamma level is a value between -100 and 100 with a default of 0.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ImageFormat">
            <summary>
              The image formats supported by ArcGIS map services or ArcGIS image services.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Default">
            <summary>
              To use service-defined default image format.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Png">
            <summary>
              Png. Supported in Map Service only.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Png8">
            <summary>
              8-bit Png. Supported in both Image Service and Map Service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Png24">
            <summary>
              24bit Png. Supported in both Image Service and Map Service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Png32">
            <summary>
              Png32. Supported in Image Service and Map Service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Jpg">
            <summary>
              Jpg. Supported in both Image Service and Map Service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.JpgPng">
            <summary>
              Jpg | Png. Supported in Image Service only.
            </summary>
            <remarks>
            <p><b>Remark</b>: Note that support for the jpgpng format was added at 10.0. This format returns a JPG if there are no transparent pixels in the requested extent, otherwise it returns a PNG.</p>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Bmp">
            <summary>
              Bmp.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Gif">
            <summary>
              Gif.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ImageFormat.Tiff">
            <summary>
              Tiff.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Layer">
            <summary>
            This is the base class for all geographic data that can be added to the 
            <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> document.
            </summary>
            <remarks>
            <para>
            A Layer is a representation of geographic data portrayed using symbols and text labels. Multiple 
            Layers can be ‘stacked’ on top of each other to enhance the information displayed for making 
            meaningful decisions. Layers are displayed visually in the Map Control. Layers are drawn bottom 
            to top so the first one in the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerCollection">LayerCollection</see> 
            is drawn first (on the bottom) and each subsequent layer is drawn on top of it, in the order listed. </para>
            </remarks>	
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.LoadAsync">
            <summary>
            Initiates loading of a layer
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.RetryLoadAsync">
            <summary>
            Retry loading the layer.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the layer is in the failed
            to load state. Does nothing if the layer is in any other state.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.LoadStatus">
            <summary>
            Gets the load status of the layer.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.LoadError">
            <summary>
            Gets the load status of the layer.
            </summary>
            <value>The load status.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.CredentialInternal">
            <summary>Gets or sets the security credential used to access a remote layer. Expose this as 'Credential' on layers that uses web requests</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.AttributionText">
            <summary>
            Get the attribution text for the layer.
            </summary>
            <value>The attribution text.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.Description">
            <summary>
            Get the description for the layer.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.MaxScale">
            <summary>
            Gets or sets the maximum scale where the layer is visible.
            </summary>
            <value>The maximum scale.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.MinScale">
            <summary>
            Gets or sets the minimum scale where the layer is visible.
            </summary>
            <value>The minimum scale.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.SpatialReference">
            <summary>
              Returns the spatial reference of the layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.Opacity">
            <summary>
            Gets or sets the opacity of the layer.
            </summary>
            <value>The opacity between 0 (transparent) and 1 (opaque).</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.FullExtent">
            <summary>
            Gets the full extent of the layer.
            </summary>
            <value>The full extent.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.Clone">
            <summary>
            Clones this instance of Layer and its members.
            </summary>
            <returns>A copy of the Layer.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.CanChangeVisibility">
            <summary>
            Gets a value indicating whether the layer content's visibility can be changed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.IsVisible">
            <summary>
            Gets or sets a value indicating whether the layer content is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.Name">
            <summary>
            Gets or sets the name of the layer content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.ShowInLegend">
            <summary>
            Get or sets a value indicating whether the layer content participates in the legend.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Layer.SublayerContents">
            <summary>
            Gets the sub layer contents of a layer content.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.GetLegendInfosAsync">
            <summary>
            Returns an immutable list of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/>.
            </summary>
            <returns>
            The task object representing the asynchronous get legend infos operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Mapping.LegendInfo"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.IsVisibleAtScale(System.Double)">
            <summary>
            Returns the layer content's effective visibility at the specified scale.
            </summary>
            <remarks>
            The effective visibility returned takes care of the effective visibility of the parents at the specified scale. 
            Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
            <returns>
            A <see cref="T:System.Boolean"/> value where true means layers visibility can be displayed, false means an error has occurred.
            </returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Layer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Layer.Loaded">
            <summary>
            Occurs when the layer is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.RaiseLoaded">
            <summary>
             Raises the Loaded event.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Layer.LoadStatusChanged">
            <summary>
            Occurs when the layer LoadStatus is changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.RaiseLoadStatusChanged(Esri.ArcGISRuntime.LoadStatusEventArgs)">
            <summary>
             Raises the LoadStatusChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.UriToPath(System.Uri)">
            <summary>
            Converts a uri to an http(s) or local file path string, used for layers
            that supports both local and online URIs
            </summary>
            <param name="uri">Local, relative or online URI instance</param>
            <returns>Uri string or null</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Layer.UriToPath(System.Uri,System.Boolean@)">
            <summary>
            Converts a uri to an http(s) or local file path string, used for layers
            that supports both local and online URIs
            </summary>
            <param name="uri">Local, relative or online URI instance</param>
            <param name="isLocal">True if the returned value is a local path</param>
            <returns>Uri string or null</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LayerCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Mapping.Layer">layers</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.LayerCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerCollection"/> class.
            </summary>
            <param name="layers">The core vector of layers.</param>
            <param name="context">Context to ensure INPC is raised on the thread this instance was created on.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ImageTiledLayer">
            <summary>
            Abstract tiled/cached map service layer class
            </summary>
            <remarks>
            <para>
            Implement this class if you want to create a custom tiled layer where
            the cached images cannot be referenced by a simple URL.
            </para>
            <para>
            If your images can be referenced by a simple <see cref="T:System.Uri"/>, you
            should instead implement <see cref="T:Esri.ArcGISRuntime.Mapping.ServiceImageTiledLayer"/>.
            </para>
            </remarks>
            <seealso cref="T:Esri.ArcGISRuntime.Mapping.ServiceImageTiledLayer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Mapping.ArcGISTiledLayer"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ImageTiledLayer.TileInfo">
            <summary>
            Gets the information about the tile.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ImageTiledLayer.Resampling">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Esri.ArcGISRuntime.Mapping.ImageTiledLayer"/> is resampling lower-resolution tiles if tiles are missing for a level.
            </summary>
            <value>
              <c>true</c> if resampling for missing tiles; otherwise, <c>false</c> to not render anything.
            </value>
            <remarks>
            If you have semi-transparent tiles with only partially coverage for a level, resampling can cause some odd-looking effects with multiple scales displaying side by side.
            In those cases, it's recommended that you disable resampling by setting this property to <c>false</c>.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LayerViewState">
            <summary>
            Class to indicate the current state of a layer in a view.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LayerViewState.Error">
            <summary>Retrieve the layer view error from the layer view state.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LayerViewState.Status">
            <summary>Retrieve the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerViewStatus"/> from the layer view state.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.SelectionMode">
            <summary>
            Describes how to combine a feature selection request with the current selected features list.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SelectionMode.Add">
            <summary>
            Appends the features to be selected with the current list of selected features.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SelectionMode.New">
            <summary>
            Replaces the current list of selected features with the features to be selected.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.SelectionMode.Subtract">
            <summary>
            Removes the features from the current list of selected features.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LayerViewStatus">
            <summary>The different layer status in the GeoView.</summary>
            <remarks>
             This status is used typically for determining if a layer is displaying or not, with more details why, in a 
             view. The layer view status is a flags enumeration, meaning a layer can have multiple states. It could for 
             instance be both NotVisible and OutOfScale, or NotVisible and Loading. This means your layer list in a table 
             of contents (TOCs) could use the status to both determine whether to gray out the layer, and also show a 
             spinning loading icon. However a layer status of Active is exclusive and will never be reported together with 
             other statuses. For instance it can't both be Active and NotVisible. It's important to note that the benefit 
             here over just checking layer visibility and scale ranges, is that also parent layers are taken into account - 
             i.e. if the group layer is out of scale range or off. This greatly simplifies the code needed for building table 
             TOCs that update with the map view.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.Active">
            <summary>The layer in the view is active. Is exclusive and will never be reported together with other statuses.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.NotVisible">
            <summary>The layer in the view is not visible.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.OutOfScale">
            <summary>The layer in the view is out of scale.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.Loading">
            <summary>The layer in the view is loading.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.Error">
            <summary>The layer in the view has an error.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LayerViewStatus.Unknown">
            <summary>An unknown status.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.LegendInfo">
            <summary>
              This object represents a legend item.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.LegendInfo.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo)">
            <summary>
            Creates a LegendInfo from a CoreLegendInfo instance
            </summary>
            <param name="coreLegendInfo">The core reference object</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LegendInfo.Name">
            <summary>
              Returns the name of the legend item.
            </summary>
            <remarks>
            <p><b>Error Types</b>: </p>
            
            <p><b>Remark</b>: Returns the name of the legend item. Will return NULL if an error occurs.</p>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.LegendInfo._lazySymbol">
            <summary>
              Returns the symbol of a legend item.
            </summary>
            <remarks>
            <p><b>Error Types</b>: </p>
            
            <p><b>Remark</b>: Returns the symbol of the legend item. Will return NULL if an error occurs.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.LegendInfo.Symbol">
            <summary>
            Gets or sets the symbol for the graphic.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ServiceImageTiledLayer">
            <summary>
            Abstract tiled/cached map service layer class
            </summary>
            <remarks>
            <para>
            Implement this class if you want to create a custom tiled layer where
            the cached images can be referenced by a URL.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.ServiceImageTiledLayer.Credential">
            <summary>Gets or sets the security credential used to access a remote layer</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.SublayerCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Mapping.ArcGISSublayer">sublayers</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.SublayerCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.SublayerCollection"/> class.
            </summary>
            <param name="sublayers">The core vector of sublayers.</param>
            <param name="context">Context to ensure INPC is raised on the thread this instance was created on.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.TileCache">
            <summary>
            Represents a local tile cache on disk.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTileCache)">
            <summary>
            Creates a TileCache from a CoreTileCache instance
            </summary>
            <param name="coreTileCache">The core reference object</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.TileCache"/> class.
            </summary>
            <param name="path">The tile cache path which should be a file (.tpk) or a directory that contains the tiling scheme file (conf.xml).</param>
            <exception cref="T:System.ArgumentNullException">path</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.TileCache.TileInfo">
            <summary>Returns the tile information for the tile cache.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.TileCache.Path">
            <summary>
            Gets the path of the tile cache.
            </summary>
            <value>The tile cache path (.tpk file or directory containing the conf.xml tiling scheme file).</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.Clone">
            <summary>
            Clones this instance of the tile cache and its members.
            </summary>
            <returns>A copy of the tile cache.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.LoadAsync">
            <summary>
            Initiates loading of metadata for this instance
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.RetryLoadAsync">
            <summary>
            Retry loading metadata for the instance.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Sets the load status to not loaded and calls load if the layer is in the failed
            to load state. Does nothing if the instance is in any other state.</p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.TileCache.LoadError">
            <summary>
            Gets the load error for this instance - if any.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.TileCache.LoadStatus"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.TileCache.LoadStatus">
            <summary>
            Gets the load status of the instance.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.TileCache.LoadError"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.RaiseLoaded">
            <summary>
             Raises the Loaded event.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.TileCache.RaiseLoadStatusChanged(Esri.ArcGISRuntime.LoadStatusEventArgs)">
            <summary>
             Raises the LoadStatusChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.TileCache.Loaded">
            <summary>
            Occurs when this instance is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.TileCache.LoadStatusChanged">
            <summary>
            Occurs when the instance's LoadStatus has changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Bookmark">
            <summary>
            Represents a geographic or time location for quick navigate.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Bookmark.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Bookmark" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Bookmark.#ctor(System.String,Esri.ArcGISRuntime.Mapping.Viewpoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Bookmark" /> class.
            </summary>
            <param name="name">The name of the bookmark.</param>
            <param name="viewpoint">The viewpoint to bookmark.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Bookmark.Name">
            <summary>
            Gets or sets the name of the bookmark.
            </summary>
            <value>The name of the bookmark.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Bookmark.Viewpoint">
            <summary>
            Gets or sets the <see cref="P:Esri.ArcGISRuntime.Mapping.Bookmark.Viewpoint"/> representing the bookmark.
            </summary>
            <value>The <see cref="P:Esri.ArcGISRuntime.Mapping.Bookmark.Viewpoint"/> representing the bookmark.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Bookmark.Clone">
            <summary>
            Clones this instance of the bookmark and its members.
            </summary>
            <returns>A copy of the bookmark.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Bookmark.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Bookmark.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.BookmarkCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Mapping.Bookmark"/>
            </summary>
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Mapping.Bookmark">bookmarks</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.BookmarkCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.BookmarkCollection"/> class.
            </summary>
            <param name="bookmarks">The core vector of bookmarks.</param>
            <param name="context">Context to ensure INPC is raised on the thread this instance was created on.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Camera">
            <summary>
            Used for defining the perspective of a scene. It is a visual snapshot of an observation of the Earth with various layers displayed in a SceneView.
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Camera Class is immutable which means that you can not change its parameters once it is created.
            There are methods in the Camera class that would give you a new Camera with the adjusted parameters. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> class.
             </summary>
            <param name="latitude">The angular deltaDistance, measured in degrees north or south of the equator.</param>
            <param name="longitude">The angular deltaDistance, usually expressed in degrees, minutes, and seconds, of the location of a point on the earth's surface east or west of an arbitrarily defined meridian (usually the Greenwich prime meridian).</param>
            <param name="altitude">The distance in meters to the sea level.</param>
            <param name="heading">The angle from north in an ENU.</param>
            <param name="pitch">The angle of pitch applied to the camera with rotation around the Y-axis in an ENU.</param>
            <param name="roll">The angle of roll applied to the camera with rotation around the X-axis in an ENU.</param>
             <exception cref="T:System.ArgumentException">latitude and longitude are required parameters and cannot be NaN.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">pitch must be a value between 0 and 180.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> class.
            </summary>
            <param name="location">The point in space where camera is located.</param>
            <param name="heading">The angle from north in an ENU.</param>
            <param name="pitch">The angle of pitch applied to the camera with rotation around the Y-axis in an ENU.</param>
            <param name="roll">The angle of roll applied to the camera with rotation around the X-axis in an ENU.</param>
            <exception cref="T:System.ArgumentNullException">location is required and cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pitch must be a value between 0 and 180.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> class.
            </summary>
            <param name="lookAtPoint">The point in space the camera will be pointing at.</param>
            <param name="distance">The distance in meters between the lookAtPoint and the camera location.</param>
            <param name="heading">The angle from north in an ENU.</param>
            <param name="pitch">The angle of pitch applied to the camera with rotation around the Y-axis in an ENU.</param>
            <param name="roll">The angle of roll applied to the camera with rotation around the X-axis in an ENU.</param>
            <exception cref="T:System.ArgumentNullException">location is required and cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">pitch must be a value between 0 and 180.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Camera.Location">
            <summary>
            Gets the point in space where the camera is located. To set the point use the 
            <see cref="M:Esri.ArcGISRuntime.Mapping.Camera.MoveTo(Esri.ArcGISRuntime.Geometry.MapPoint)">Camera.MoveTo</see> Method or establish the location
            as part of one of the Camera Constructors. 
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Location Property can be thought of physical position on/above the Earth that the camera is sitting when you look though it.
            To have a valid location for a camera, the <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.X">MapPoint.X</see>, 
            <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.Y">MapPoint.Y</see>, and 
            <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.Z">MapPoint.Z</see> Properties should all be set to have a valid 3D position.
            It is possible to have a MapPoint.Z elevation value be zero (0) and that would mean the camera is sitting directly on the surface 
            of the Earth. The elevation Z value of the MapPoint is assumed to be in Meters. The Camera object assumes that MapPoint values are 
            in the Latitude (Y) and Longitude (X) coordinate system.   
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Camera.Heading">
            <summary>
            Gets the heading property which represents the angle from north in an ENU (East, North, Up Ground reference frames).
            Value ranges from 0 to 360 degrees. To set the heading use the 
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Heading Property can be thought of as a rotation value assuming that you were having the lens of the camera pointing
            directly at the ground. As you adjust the heading from 0 to 360 degrees, you would rotate (aka. spin) the camera in a counter-clockwise fashion. 
            The following diagram gives a simple perspective of several Camera.Heading Property values:
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Camera.Pitch">
            <summary>
            Gets the pitch property which represents the angle of pitch applied to the camera with rotation around Y-axis in an ENU (East, North, Up Ground reference frames).
            Value ranges from 0 to 180 degrees, where 0 is looking straight down (center of the earth) and 180 looking straight up (towards outer space). 
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Pitch Property can be thought of as a rotation value assuming that you were having the lens of the camera pointing
            directly at the ground. As you adjust the heading from 0 to 180 degrees, you would rotate the camera away from the center of the earth
            moving towards outer space in a clockwise fashion. 
            The following diagram gives a simple perspective of several Camera.Pitch Property values:
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Camera.Roll">
            <summary>
            Gets the roll property which represents the angle of roll applied to the camera with rotation around X-axis in an ENU (East, North, Up Ground reference frames).
            Value ranges from 0 to 360 degrees, where 0 is horizontal.
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Roll Property can be thought of as a rotation value arround the axis that is the direction of the camera
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.Elevate(System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> with applied elevation.
            </summary>
            <param name="deltaAltitude">The change in height or vertical elevation of the camera centerLocation in meters.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">deltaAltitude is a required parameter and cannot be NaN.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.IsEqual(Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Compares two cameras for equality. 
            </summary>
            <param name="other">The other camera to test for equality against current camera.</param>
            <returns>Value to indicate if the two cameras are equal.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.MoveForward(System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> with updated position.
            </summary>
            <param name="meters">The distance change in meters.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">meters is a required parameter and cannot be NaN.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.MoveToward(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> centered at calculated location.
            </summary>
            <param name="centerLocation">The location where camera changes are centered at.</param>
            <param name="meters">The distance in meters by which the camera center will be moved.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">meters cannot be NaN.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.RotateAround(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double,System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> with changes centered at specified location.
            </summary>
            <param name="centerLocation">The location where camera changes are centered at.</param>
            <param name="deltaHeading">The change in heading.</param>
            <param name="deltaPitch">The change in pitch.</param>
            <param name="deltaRoll">The change in roll.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">deltaHeading, deltaPitch and deltaRoll cannot all be NaN.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.ZoomToward(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> centered at calculated location.
            </summary>
            <param name="centerLocation">The location where camera changes are centered at.</param>
            <param name="factor">zoom factor greater than zero. Less than one zooms out, greater than one zooms in..</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">factor cannot be NaN.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">factor must be greater than 0.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.MoveTo(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> with the a new center position. Location is the point in space where the camera is located. 
            Setting the location can be done using this Method or establish the location as part of one of the Camera Constructors. 
            </summary>
            <remarks>
            <para>
            A Camera object can literally be thought of as a camera that one would look through to see a viewable extent and perspective 
            of the Earth. Depending on how you hold the camera and how far away from the ground will determine what you can see. These 
            positions of holding the camera represent the various Properties that you can set on the Camera object. 
            </para>
            <para>
            The Location Property can be thought of physical position on/above the Earth that the camera is sitting when you look though it.
            To have a valid location for a camera, the <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.X">MapPoint.X</see>, 
            <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.Y">MapPoint.Y</see>, and 
            <see cref="P:Esri.ArcGISRuntime.Geometry.MapPoint.Z">MapPoint.Z</see> Properties should all be set to have a valid 3D position.
            It is possible to have a MapPoint.Z elevation value be zero (0) and that would mean the camera is sitting directly on the surface 
            of the Earth. The elevation Z value of the MapPoint is assumed to be in Meters. The Camera object assumes that MapPoint values are 
            in the Latitude (Y) and Longitude (X) coordinate system.   
            </para>
            </remarks>
            <param name="location">The point in space where camera is located.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentNullException">location is required and cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Camera.RotateTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns a new <see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/> with applied rotation.
            </summary>
            <param name="heading">The new heading value.</param>
            <param name="pitch">The new pitch value.</param>
            <param name="roll">The new roll value.</param>
            <returns><see cref="T:Esri.ArcGISRuntime.Mapping.Camera"/></returns>
            <exception cref="T:System.ArgumentException">heading, pitch and roll cannot both be NaN.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Map">
            <summary>
            The map contains layers and additional properties and can be displayed in a MapView.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Mapping.Basemap)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class with a <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> and an initial viewpoint.
            </summary>
            <param name="basemap">The basemap for the map.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Mapping.BasemapType,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class with a <see cref="T:Esri.ArcGISRuntime.Mapping.Basemap"/> and an initial viewpoint.
            </summary>
            <param name="basemapType">Type of the basemap.</param>
            <param name="latitude">The latitude for the initial viewpoint.</param>
            <param name="longitude">The longitude for the initial viewpoint.</param>
            <param name="levelOfDetail">The level of detail (converted to scale) for the initial viewpoint. 0 is the most zoomed out.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class with a Uri to a web map.
            </summary>
            <remarks>
            The uri parameter may be a direct Uri to web map JSON content or the Uri of a portal item.
            Examples of supported portal item Uri values:
            <list type="bullet">
                 <item>http://www.arcgis.com/home/item.html?id=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/home/webmap/viewer.html?webmap=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/sharing/rest/content/items/&lt;web_map_id&gt;/data</item>
            </list>
            </remarks>
            <param name="uri">The web map URI</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class with a web map portal item.
            </summary>
            <remarks>
            The specified portal item must be of type WebMap or the Map will fail to load
            </remarks>
            <param name="portalItem">The portal item</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.LoadFromUriAsync(System.Uri)">
            <summary>
            Load from map from a uri resource
            </summary>
            <param name="uri">The uri to the map.</param>
            <returns>
            The task object representing the asynchronous load from uri operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Map"/> class.
            </summary>
            <param name="spatialReference">The spatial reference to use on the map.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreMap,System.Boolean,Esri.ArcGISRuntime.Mapping.Basemap)">
            <summary>
            Creates a map from a CoreMap instance
            </summary>
            <param name="coreMap">The core reference object</param>
            <param name="delayCreateLayers">Does not create the operational layers and basemap until load completes</param>
            <param name="basemap">The basemap to associate with the map</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.FromJson(System.String)">
            <summary>
            Creates a map the json.
            </summary>
            <param name="json">json map.</param>
            <returns>Map.</returns>
            <exception cref="T:System.ArgumentNullException">json</exception>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Map.ToJson" />
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.ToJson">
            <summary>
            Serializes the map to json.
            </summary>
            <returns>JSON string.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Map.FromJson(System.String)"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.Basemap">
            <summary>
            Gets or sets the basemap for the Map
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.OperationalLayers">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Mapping.LayerCollection">collection</see> of operational <see cref="T:Esri.ArcGISRuntime.Mapping.Layer">layers</see> in the map.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.MinScale">
            <summary>
            Gets or sets the minimum scale for the map.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.MaxScale">
            <summary>
            Gets or sets the maximum scale for the map.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.AllLayers">
            <summary>
            Gets all layers in the order they are rendered (bottom-most first).
            </summary>
            <value>All layers.</value>
            <remarks>
            Layers are returned in the following order:<br/>
            - Basemap Layers<br/>
            - Operational Layers<br/>
            - Basemap Reference layers<br/>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.SpatialReference">
            <summary>
            Gets the spatial reference for the map
            </summary>
            <remarks>
            This value only available after the map has loaded.
            To set this value explicitly, use the <see cref="M:Esri.ArcGISRuntime.Mapping.Map.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">Map(SpatialReference)</see> constructor.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.InitialViewpoint">
            <summary>
            Gets or sets the view point where the map should start up at.
            </summary>
            <remarks>
            <para>
            Set this view point prior to loading the map in a mapview. It will be ignored after that point.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.Bookmarks">
            <summary>
            Gets or sets the bookmarks associated with the map.
            </summary>
            <value>The the bookmarks associated with the map.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.PortalItem">
            <summary>Gets the PortalItem</summary>
            <remarks>
            This is only available if the Map is associated with a PortalItem - Map has been created from a portal 
            item (Map(Uri) or Map(PortalItem) constructor) or has been previously saved to a portal.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsync">
             <summary>
             Save any changes that have been made to the map to the associated PortalItem.
             </summary>
             <returns>A task that represents the asynchronous save operation.</returns>
             <remarks>
             Asynchronous method to save any changes that have been made to the map. The map must have been constructed
             using the Map(PortalItem) constructor to associate it with a PortalItem object, and must be
             loaded.
            
             <p>Updates the map content data on the portal and also updates the portal item properties stored on the portal to
             match those stored within the map's PortalItem object.</p>
            
             <p><b>Warning:</b> This will overwrite the existing map content data on the portal. During the beta release, it is
             recommended that you create a backup of your existing content data before overwriting them, or save the map as a
             new portal item using the SaveAsAsync(Portal, PortalFolder, String, Iterable, String, byte[]) method.</p>
             </remarks>
             <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsync(System.Threading.CancellationToken)">
             <summary>
             Save any changes that have been made to the map to the associated PortalItem.
             </summary>
             <returns>A task that represents the asynchronous save operation.</returns>
             <remarks>
             Asynchronous method to save any changes that have been made to the map allowing cancellation. The map must have 
             been constructed using the Map(PortalItem) constructor to associate it with a PortalItem object, and must be
             loaded.
            
             <p>Updates the map content data on the portal and also updates the portal item properties stored on the portal to
             match those stored within the map's PortalItem object.</p>
            
             <p><b>Warning:</b> This will overwrite the existing map content data on the portal. During the beta release, it is
             recommended that you create a backup of your existing content data before overwriting them, or save the map as a
             new portal item using the SaveAsAsync(Portal, PortalFolder, String, Iterable, String, byte[]) method.</p>
             </remarks>
             <param name="cancellationToken">CancellationToken</param>
             <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,Esri.ArcGISRuntime.Portal.ArcGISPortalFolder,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Uri)">
             <summary>
             Save the map to a new PortalItem.
             </summary>
             <remarks>
             Asynchronous method to save a map as a new portal item. The map does not need to be associated with an 
             existing PortalItem object.  The map must be loaded. The result is a reference to the new PortalItem which
             the map is now associated with.
            
             <p> Note that if the map was already associated with a PortalItem object (either because the map was created 
             using a PortalItem or was previously saved), that object will be replaced with a new PortalItem, effectively 
             duplicating the map on the portal.</p>
             </remarks>
             <param name="portal"></param>
             <param name="portalFolder"></param>
             <param name="title"></param>
             <param name="description"></param>
             <param name="tags"></param>
             <param name="thumbnail"></param>
             <returns>
             The task object representing the asynchronous save as operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
             </returns>
             <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,Esri.ArcGISRuntime.Portal.ArcGISPortalFolder,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Uri,System.Threading.CancellationToken)">
             <summary>
             Save the map to a new PortalItem.
             </summary>
             <remarks>
             Asynchronous method to save a map as a new portal item allowing cancellation. The map does not need to be 
             associated with an existing PortalItem object.  The map must be loaded. The result is a reference to the 
             new PortalItem which the map is now associated with.
            
             <p> Note that if the map was already associated with a PortalItem object (either because the map was created 
             using a PortalItem or was previously saved), that object will be replaced with a new PortalItem, effectively 
             duplicating the map on the portal.</p>
             </remarks>
             <param name="portal"></param>
             <param name="portalFolder"></param>
             <param name="title"></param>
             <param name="description"></param>
             <param name="tags"></param>
             <param name="thumbnail"></param>
             <param name="cancellationToken"></param>
             <returns>
             The task object representing the asynchronous save as operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>
            Save the map to an existing PortalItem (overwrite).
            </summary>
            <remarks>
            Asynchronous method to save a map as the content of an existing portal item. The map does not need to be 
            associated with an existing PortalItem object. The map must be loaded. The result is a reference to the 
            overwritten PortalItem which the map is now associated with. 
            
            <p>If the given portal item already exists, its contents are updated. If the portal item is new and does 
            not exist on the portal yet, it is added to the portal.</p>
            </remarks>
            <param name="portalItem"></param>
            <returns>
            The task object representing the asynchronous save as operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.SaveAsAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,System.Threading.CancellationToken)">
            <summary>
            Save the map to an existing PortalItem (overwrite).
            </summary>
            <remarks>
            Asynchronous method to save the map as the content of an existing portal item allowing cancellation. 
            The map does not need to be associated with an existing PortalItem object. The map must be loaded. 
            The result is a reference to the overwritten PortalItem which the map is now associated with. 
            
            <p>If the given portal item already exists, its contents are updated. If the portal item is new and does 
            not exist on the portal yet, it is added to the portal.</p>
            </remarks>
            <param name="portalItem"></param>
            <param name="cancellationToken"></param>
            <returns>
            The task object representing the asynchronous save as operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.Clone">
            <summary>
            Clones this instance of the map and its members.
            </summary>
            <returns>A copy of the map.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.CustomData">
            <summary>
            Custom data is a dictionary of JSON strings that will be persisted in the document.
            </summary>
            <value>
            The custom data stored in the map.
            </value>
            <remarks>
            <c>Keys</c> must be valid JSON keys, and <c>Values</c> must be valid json.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.Version">
            <summary>
             Retrieves the version for the map when this was authored.
             </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.TransportationNetworks">
            <summary>Gets the maps transportation networks.</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Map.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The PropertyChanged event can indicate all properties on the object have changed by using
            either <c>null</c> or <see cref="F:System.String.Empty"/> as the property name in the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.OnPropertyChangedSyncContext(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when property changes when called from a background thread
            </summary>
            <param name="propertyNames">Names of the properties to raise events for.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.LoadAsync">
            <summary>
            Initiates loading of a map
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.RetryLoadAsync">
            <summary>
            Retries the load operation in case of a load error.
            </summary>
            <returns>A task that represents the asynchronous retry load operation.</returns>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Map.LoadError"/>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Map.LoadStatus"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.LoadStatus">
            <summary>
            Gets the current load status of the map.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Map.LoadError"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Map.LoadError">
            <summary>
            Gets the load error for this instance - if any.
            </summary>
            <value>The load status.</value>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Map.LoadStatus"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Map.CancelLoad">
            <summary>
            Cancels an ongoing load.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Map.Loaded">
            <summary>
            Occurs when this instance is loaded.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="E:Esri.ArcGISRuntime.Mapping.Map.LoadStatusChanged">
            <summary>
            Occurs when the instance's LoadStatus has changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.ViewpointType">
            <summary>
            Viewpoint type
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ViewpointType.CenterAndScale">
            <summary>
            A center point and scale.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Mapping.ViewpointType.BoundingGeometry">
            <summary>
            A visible area.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Mapping.Viewpoint">
            <summary>
            Used for specifying the view location of the MapView
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.Map.InitialViewpoint"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="targetGeometry">Target geometry.</param>
            <exception cref="T:System.ArgumentNullException">targetGeometry cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="targetGeometry">Target geometry.</param>
            <param name="camera">Camera.</param>
            <exception cref="T:System.ArgumentNullException">targetGeometry cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="targetGeometry">Target geometry</param>
            <param name="rotation">Rotation</param>
            <exception cref="T:System.ArgumentNullException">targetGeometry cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="targetGeometry">Target geometry</param>
            <param name="rotation">Rotation</param>
            <param name="camera">Camera.</param>
            <exception cref="T:System.ArgumentNullException">targetGeometry cannot be null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="latitude">WGS84 Latitude.</param>
            <param name="longitude">WGS84 Longitude.</param>
            <param name="scale">Map scale.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="latitude">WGS84 Latitude.</param>
            <param name="longitude">WGS84 Longitude.</param>
            <param name="scale">Map scale.</param>
            <param name="camera">Camera.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="center">Center point</param>
            <param name="scale">Scale</param>
            <exception cref="T:System.ArgumentNullException">center.</exception>
            <exception cref="T:System.ArgumentException">scale cannot be NaN.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">scale must be greater than 0.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="center">Center point</param>
            <param name="scale">Scale</param>
            <param name="camera">Camera.</param>
            <exception cref="T:System.ArgumentNullException">center.</exception>
            <exception cref="T:System.ArgumentException">scale cannot be NaN.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">scale must be greater than 0.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="center">Center point</param>
            <param name="scale">Scale</param>
            <param name="rotation">Rotation</param>
            <exception cref="T:System.ArgumentNullException">center.</exception>
            <exception cref="T:System.ArgumentException">scale cannot be NaN.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">scale must be greater than 0.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double,Esri.ArcGISRuntime.Mapping.Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> class.
            </summary>
            <param name="center">Center point</param>
            <param name="scale">Scale</param>
            <param name="rotation">Rotation</param>
            <param name="camera">Camera.</param>
            <exception cref="T:System.ArgumentNullException">center.</exception>
            <exception cref="T:System.ArgumentException">scale cannot be NaN.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">scale must be greater than 0.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Viewpoint.TargetGeometry">
            <summary>
            Gets the target geometry this view is requesting.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Viewpoint.Scale">
            <summary>
            Gets the scale this view is requesting, or null if this is an extent-based viewpoint.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Viewpoint.Rotation">
            <summary>
            Gets the scale this view is requesting, or null if this is an extent-based viewpoint.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Mapping.Viewpoint.Camera">
            <summary>
            Gets the camera this view is requesting, or null if it hasn't one.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.ToJson">
            <summary>
            Converts this instance to JSON
            </summary>
            <returns>System.String.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Viewpoint.FromJson(System.String)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Mapping.Viewpoint.FromJson(System.String)">
            <summary>
            Creates a <see cref="T:Esri.ArcGISRuntime.Mapping.Viewpoint"/> instance from JSON
            </summary>
            <param name="json">Viewpoint json.</param>
            <returns>Viewpoint.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Mapping.Viewpoint.ToJson"/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler">
            <summary>
            The default message handler used by a <see cref="T:System.Net.Http.HttpClient"/> and handles ArcGIS Server identity.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.ArcGISCredential">
            <summary>Gets or sets the credentials for the message handler</summary>
            <value>The access credential.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.DefaultReferer">
            <summary>
            Gets or sets the default referer used by default for all requests going through <see cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler"/>.
            </summary>
            <remarks>
            <para>
            A <b>referer</b> is text in the Http header that is passed between web requests of the client application 
            and web server.
            </para>
            <para>
            In many scenarios, the <b>referer</b> is used to provide the web server how the incoming web request was 
            initiated. For example a user clicked a particular hyperlink on a web page and the <b>referer</b> gets 
            populated with that hyperlink. The <b>referer</b> is often the URL of the previous web page from which 
            a link was followed. Some companies use <b>referer</b> information to find out user internet browsing 
            patterns for their internet site. Setting <b>referer</b> information in the Http header of a web request 
            is many times required by secured web sites so they can ensure that only approved users are using their 
            resources.
            </para>
            <para>
            <b>IMPORTANT</b><br/>
            Setting a string value for the DefaultReferer Property to the correct 
            <b>referer</b> is necessary in order to gain access to ArcGIS Server web services that require long term 
            tokens for authentication. ArcGIS Online and ArcGIS Portal require long term token for web services that 
            are secured. Depending on the development platform, specifying the correct string for the 
            AuthenticationManager.TokenGeneration Property can be imperative to accessing secured services by the 
            AuthenticationManager.
            </para>
            </remarks>
            <value>
            The default referer.
            </value>
            <seealso cref="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.Referer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of  <see cref="T:System.Net.Http.HttpResponseMessage" />
            based on the information provided in the <see cref="T:System.Net.Http.HttpRequestMessage" /> 
            as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.CustomUserAgentValues">
            <summary>
            Allows you to add a set of custom values to the user agent string
            </summary>
            <exclude />
        </member>
        <member name="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.ArcGISClientHandlerInternal">
            <summary>
            Helper for handling one request
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.ArcGISClientHandlerInternal.SetCredentialsBeforeAnyTry">
            <summary>
            Check if Credentials have already been set for this server
            If credentials are available, use them (there is a good chance that thecredentials will work for the url. If eventually it doesn't work, we'll challenge the user)
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.ArcGISClientHandlerInternal.IsAuthorizationError(System.Exception)">
            <summary>
            Determines whether the service error is an authorization error
            </summary>
            <param name="error">The err.</param>
            <returns>
              <c>true</c> if [is authorization error] [the specified err]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Http.ArcGISHttpClient">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClient" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClient" /> class.
            </summary>
            <param name="handler">Input <see cref="T:System.Net.Http.HttpMessageHandler"/>.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetStringAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a GET or POST request to the specified Uri
            using a set of parameters and returns the response body as a string in an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <returns>
            A task that represents the asynchronous get string operation. The value of the task result is a <see cref="T:System.String"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">requestUri</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetStringAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a GET or POST request to the specified Uri
            using a set of parameters as an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="forcePost">If true, a POST request will be made.</param>
            <returns>
            Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a GET or POST request to the specified Uri 
            using a set of parameters as an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <returns>Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Send a GET or POST request to the specified Uri 
            using a set of parameters with a cancellation token as an asynchronous
            operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive
            notice of cancellation.
            </param>
            <returns>Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetStringAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Send a GET or POST request to the specified Uri
            using a set of parameters as an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Send a GET or POST request to the specified Uri 
            using a set of parameters with a cancellation token as an asynchronous
            operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive
            notice of cancellation.
            </param>
            <returns>Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Send a GET or POST request to the specified Uri 
            using a set of parameters as an asynchronous operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <returns>Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a GET or POST request to the specified Uri 
            using a set of parameters with a cancellation token as an asynchronous
            operation.
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="parameters">The parameters to append to the Uri for GET or body for POST requests.</param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive
            notice of cancellation.
            </param>
            <param name="forcePost">If true, the request made will always be a POST.</param>
            <returns>Returns System.Threading.Tasks.Task&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Http.ArcGISHttpClient.GetOrPostAsync(System.Uri,System.Threading.CancellationToken,System.Func{Esri.ArcGISRuntime.Http.DownloadProgress,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Send a GET or POST request to the specified Uri as an asynchronous operation using a callback to monitor download 
            progress
            </summary>
            <param name="requestUri">The Uri the request is sent to.</param>
            <param name="cancellationToken">The token to use for cancelling the operation</param>
            <param name="progressHandler">The function that will receive download progress notifications</param>
            <param name="maxChunkSize">The maximum sizeto download at once, in bytes</param>
            <returns>Returns System.Net.Http.&lt;HttpResponseMessage&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">The requestUri was null.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Http.DownloadProgress">
            <summary>
            Represents the progress of a download
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Http.ArcGISWebException">
            <summary>
            ArcGISWebException thrown by <see cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler"/> when an ArcGIS Server returns an error.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClient"/>
            <seealso cref="T:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISWebException.Details">
            <summary>
            Gets the error details.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISWebException.Response">
            <summary>
             Gets the response that the remote host returned.
            </summary>
            <returns>
            If a response is available from the Internet resource, a <see cref="T:System.Net.Http.HttpResponseMessage"/>
            instance that contains the error response from an Internet resource; otherwise, null.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISWebException.Code">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Http.ArcGISWebException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer">
            <summary>
            An abstract base stretch raster renderer.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.MaxValues">
            <summary>Gets the maximum stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.MinValues">
            <summary>Gets the minimum stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.NumStandardDeviations">
            <summary>Gets the standard deviation factor.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.PercentClipMax">
            <summary>Gets the maximum percent clip value.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.PercentClipMin">
            <summary>Gets the minimum percent clip value.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.StatsEstimation">
            <summary>Gets a value indicated whether stats estimation is enabled.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.StretchType">
            <summary>Returns the stretch type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.StretchType">
            <summary>The list of raster stretch types.</summary>
            <seealso cref="P:Esri.ArcGISRuntime.Rasters.BaseStretchRenderer.StretchType"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.StretchType.None">
            <summary>Stretch type not defined</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.StretchType.MinimumMaximum">
            <summary>Min/Max stretch type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.StretchType.StandardDeviation">
            <summary>Standard deviation stretch type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.StretchType.HistogramEqualization">
            <summary>Histogram equalization stretch type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.StretchType.PercentClip">
            <summary>Percent clip stretch type</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.HillshadeRenderer">
            <summary>
            A hillshade raster renderer.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.HillshadeRenderer"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.#ctor(System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Rasters.SlopeType,System.Double,System.Double,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.HillshadeRenderer"/> class.
             </summary>
            <param name="altitude">Altitude angle of the light source.</param>
            <param name="azimuth">Azimuth angle of the light source, measured clockwise from north.</param>
            <param name="nbits">Output bit depth, default is 8-bit.</param>
            <param name="pixelSizeFactor">Pixel size factor, default is 1.</param>
            <param name="pixelSizePower">Pixel size power value, default is 1.</param>
            <param name="slopeType">RT_SlopeType</param>
            <param name="zfactor">Factor to convert z unit to x,y units, default is 1.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.Altitude">
            <summary>Gets the altitude angle in degree.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.Azimuth">
            <summary>Gets the azimuth angle in degree.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.OutputBitDepth">
            <summary>Gets the output bit depth.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.PixelSizeFactor">
            <summary>Gets the pixel size factor.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.PixelSizePower">
            <summary>Gets the pixel size power.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.SlopeType">
            <summary>Gets the slope type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.HillshadeRenderer.Zfactor">
            <summary>Gets the Z factor.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.ColormapRenderer">
            <summary> 
            A colormap raster renderer.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.ColormapRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.ColormapRenderer"/> class.
            </summary>
            <param name="colors">A collection of colors.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.ColormapRenderer.Colors">
            <summary>
            Gets the color values used in colormap renderer.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.Raster">
            <summary>
            A raster datasource.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.Raster.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.Raster"/> class.
            </summary>
            <param name="path">Local path to a raster data source.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.StretchRenderer">
            <summary> 
            A stretch raster renderer.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.StretchRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.StretchRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,Esri.ArcGISRuntime.Rasters.ColorRampName)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="colorRampName">The color ramp to use</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.StretchRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,Esri.ArcGISRuntime.Rasters.ColorRampName,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
            <param name="factor">Standard deviation factor. Default value is 2.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="colorRampName">The color ramp to use</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.StretchRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,Esri.ArcGISRuntime.Rasters.ColorRampName,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
            <param name="minValues">Minimum stretch values.</param>
            <param name="maxValues">Maximum stretch values.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="colorRampName">The color ramp to use</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.StretchRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean,Esri.ArcGISRuntime.Rasters.ColorRampName,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
            <param name="min">Minimum percent clip.</param>
            <param name="max">Maximum percent clip.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="colorRampName">The color ramp to use</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.StretchRenderer.ColorRampName">
            <summary>
            Gets the color ramp name.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.ColorRampName">
            <summary>
            Predefined color ramp names.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.ColorRampName.None">
            <summary>Color ramp name not defined.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.ColorRampName.Elevation">
            <summary>Elevation color ramp.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.ColorRampName.DemScreen">
            <summary>DEM (for screen display) color ramp</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.ColorRampName.DemLight">
            <summary>DEM (light color) color ramp</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.RgbRenderer">
            <summary>
            A RGB raster renderer.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RgbRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Esri.ArcGISRuntime.Rasters.PansharpenType,Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/> class.
            </summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed.</param>
            <param name="panchromaticRaster">Panchromatic raster.</param>
            <param name="pansharpenType">Pansharpen Type</param>
            <param name="weights">Band weights value for pansharpening.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RgbRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Esri.ArcGISRuntime.Rasters.PansharpenType,Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/> class.
            </summary>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="bandIndexes">The band indexes in which the raster is displayed.</param>
            <param name="panchromaticRaster">Panchromatic raster.</param>
            <param name="pansharpenType">Pansharpen Type</param>
            <param name="weights">Band weights value for pansharpening.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RgbRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Esri.ArcGISRuntime.Rasters.PansharpenType,Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Boolean,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/> class.
            </summary>
            <param name="minValues">Minimum stretch values.</param>
            <param name="maxValues">Maximum stretch values.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="bandIndexes">The band indexes in which the raster is displayed.</param>
            <param name="panchromaticRaster">Panchromatic raster.</param>
            <param name="pansharpenType">Pansharpen Type</param>
            <param name="weights">Band weights value for pansharpening.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RgbRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Esri.ArcGISRuntime.Rasters.PansharpenType,Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Boolean,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/> class.
            </summary>
            <param name="min">Minimum percent clip.</param>
            <param name="max">Maximum percent clip.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="bandIndexes">The band indexes in which the raster is displayed.</param>
            <param name="panchromaticRaster">Panchromatic raster.</param>
            <param name="pansharpenType">Pansharpen Type</param>
            <param name="weights">Band weights value for pansharpening.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RgbRenderer.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Esri.ArcGISRuntime.Rasters.PansharpenType,Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/> class.
            </summary>
            <param name="numStandardDeviations">Standard deviation factor. Default value is 2.</param>
            <param name="gammas">Gamma adjustment. Can be NULL.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="bandIndexes">The band indexes in which the raster is displayed.</param>
            <param name="panchromaticRaster">Panchromatic raster.</param>
            <param name="pansharpenType">Pansharpen Type</param>
            <param name="weights">Band weights value for pansharpening.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.RgbRenderer.PansharpenType">
            <summary>
            Gets the pansharpen type.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.RgbRenderer.PanchromaticRaster">
            <summary>
            Gets the panchromatic raster.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.RgbRenderer.BandIndexes">
            <summary>
            Gets the band index array.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.RgbRenderer.Weights">
            <summary>
            Gets the pansharpen weight array.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.PansharpenType">
            <summary>
            The list of raster pansharpen types.
            </summary>
            <remarks>
            This is used to determine the raster pansharpen types.
            </remarks>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.None">
            <summary>Pansharpen type is not defined</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.Ihs">
            <summary>IHS (intensity/hue/saturation) pansharpen type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.Brovey">
            <summary>Brovey pansharpen type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.Mean">
            <summary>Mean pansharpen type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.Esri">
            <summary>Esri pansharpen type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.PansharpenType.GramSchmidt">
            <summary>Gram-Schmidt pansharpen type</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.BlendRenderer">
            <summary>
            A blend raster renderer.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Mapping.RasterLayer.Renderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.BlendRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.BlendRenderer"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.BlendRenderer.#ctor(Esri.ArcGISRuntime.Rasters.Raster,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},Esri.ArcGISRuntime.Rasters.ColorRampName,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Rasters.SlopeType,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/> class.
            </summary>
            <param name="altitude">Altitude angle of the light source.</param>
            <param name="azimuth">Azimuth angle of the light source, measured clockwise from north.</param>
            <param name="colorRampName">The color ramp to use</param>
            <param name="dem">The elevation data. Can be null.</param>
            <param name="gammas">Gamma adjustment. Can be null.</param>
            <param name="maxValues">Output stretch values, one for each band. Can be null.</param>
            <param name="minValues">Output stretch values, one for each band. Can be null.</param>
            <param name="nodataValues">Nodata values, one for each band. Can be null.</param>
            <param name="outputBitDepth">Output bit depth, default is 8-bit.</param>
            <param name="pixelSizeFactor">Pixel size factor, default is 1.</param>
            <param name="pixelSizePower">Pixel size power value, default is 1.</param>
            <param name="slopeType">Slope Type</param>
            <param name="sourceMaxValues">Input stretch values, one for each band. Can be null.</param>
            <param name="sourceMinValues">Input stretch values, one for each band. Can be null.</param>
            <param name="zfactor">Factor to convert z unit to x,y units, default is 1.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.Altitude">
            <summary>Gets the altitude angle in degree.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.Azimuth">
            <summary>Gets the azimuth angle in degree.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.ElevationRaster">
            <summary>Gets the elevation raster.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.Gammas">
            <summary>Gets the gamma adjustments.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.MaxValues">
            <summary>Gets the maximum output stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.MinValues">
            <summary>Gets the minimum output stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.NodataValues">
            <summary>Gets the no-data values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.OutputBitDepth">
            <summary>Gets the output bit depth.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.PixelSizeFactor">
            <summary>Gets the pixel size factor.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.PixelSizePower">
            <summary>Gets the pixel size power.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.SlopeType">
            <summary>Gets the slope type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.SourceMaxValues">
            <summary>Gets the maximum source stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.SourceMinValues">
            <summary>Gets the minimum source stretch values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Rasters.BlendRenderer.Zfactor">
            <summary>Gets the Z factor.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.SlopeType">
            <summary>
            Raster slope types.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.BlendRenderer"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.SlopeType.None">
            <summary>Slope type is not defined.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.SlopeType.Degree">
            <summary>Degree slope type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.SlopeType.PercentRise">
            <summary>Percent rise slope type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Rasters.SlopeType.Scaled">
            <summary>Scaled slope type</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Rasters.RasterRenderer">
            <summary>
            An abstract base raster renderer.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.BlendRenderer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.ColormapRenderer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.HillshadeRenderer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.RgbRenderer"/>
            <seealso cref="T:Esri.ArcGISRuntime.Rasters.StretchRenderer"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Rasters.RasterRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Rasters.RasterRenderer"/> class.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest">
            <summary>
            Helper class to get the arcgis tokens needed to access the ArcGIS secured services.
            Before calling <see cref="M:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.RequestTokenAsync" /> for requesting a token, the properties <see cref="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.UserName"/>,<see cref="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.Password"/> and <see cref="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.TokenSource"/>
            must be initialized.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.UserName">
            <summary>
            Gets or sets the name of the user requesting the token.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.Password">
            <summary>
            Gets or sets the password for requesting the token.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.TokenSource">
            <summary>
            Gets or sets the URL of the REST end point to generate the tokens (e.g. http://myServer/arcgis/tokens).
            </summary>
            <value>The token source.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.Referer">
            <summary>
            Gets or sets the referer used to get a token to arcgis.com.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.Expiration">
            <summary>
            Gets or sets the expected expiration time of the token (in minutes).
            </summary>
            <value>The expiration time.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.PortalToken">
            <summary>
            Gets or sets the portal token used to make the request. 
            Useful in case of federated services : a valid portal token may be needed to generate a token for a federated or hosted service.
            </summary>
            <value>
            The portal token.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.ServerUrl">
            <summary>
            Gets or sets the server url we need to generate a token for. 
            Useful in case of federated services : the portal token rest end point may be used to generate a token for a federated service.
            </summary>
            <value>
            The server URL of the federated service we need to generate a token for.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.Token">
            <summary>
            Gets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.ExpirationDateInMilliseconds">
            <summary>
            Gets the token expiration date in milliseconds from 1/1/1970.
            </summary>
            <value>
            The expiration date in milliseconds.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.IsSsl">
            <summary>
            Gets the flag indicating if the token must always pass over ssl.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ArcGISTokenWebRequest.RequestTokenAsync">
            <summary>
            Requests the token asynchronously.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.ArcGISTokenCredential">
            <summary>
            The ArcGISTokenCredential class represents a credential object used to access to ArcGIS resources secured with an ArcGIS token.
            </summary>
            <remarks>
            You will generally get an instance of this class by calling <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)"/>.
            To accommodate specific uses cases, this object can also be created manually.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISTokenCredential.Password">
            <summary>
            Gets or sets the password used to refresh the token.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ArcGISTokenCredential.GenerateTokenImplAsync(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Generates the token asynchronously.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ArcGISTokenCredential.RefreshTokenImplAsync(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Refreshes the token.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.CredentialRequestInfo">
            <summary>
            Information about the ArcGIS service that needs a credential for getting access to.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CredentialRequestInfo.ServiceUri">
            <summary>
            Gets or sets the URI of the service that needs a credential.
            </summary>
            <value>
            The service URI.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CredentialRequestInfo.AuthenticationType">
            <summary>
            Gets or sets the type of the authentication requested by the service.
            </summary>
            <value>
            The type of the authentication.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CredentialRequestInfo.Response">
            <summary>
            Gets or sets the previous response message returned by the service requesting authentication.
            </summary>
            <remarks>This value is optional but may help the ChallengeHandler to react correctly.</remarks>
            <value>
            The previous response message.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CredentialRequestInfo.GenerateTokenOptions">
            <summary>
            Gets or sets the optional parameters to use for generating tokens.
            </summary>
            <value>
            The generate token options.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CredentialRequestInfo.CancellationToken">
            <summary>
            Gets or sets the cancellation token.
            </summary>
            <value>
            The cancellation token.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.AuthenticationType">
            <summary>
            Types of Authentication that can be requested by the service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.AuthenticationType.Token">
            <summary>
            Token secured service.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.AuthenticationType.NetworkCredential">
            <summary>
            HTTP secured service (Digest, basic or Integrated)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.AuthenticationType.Certificate">
            <summary>
            Authentication by client certificate (PKI infrastructure)
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.GenerateTokenOptions">
            <summary>
            This class contains optional information about the token to generate.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.GenerateTokenOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Security.GenerateTokenOptions"/> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.Referer">
            <summary>
            Gets or sets the HTTP referer to generate a token for.
            </summary>
            <remarks>If set, this value overrides the default <see cref="P:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.DefaultReferer"/>.</remarks>
            <value>
            The referer
            </value>
            <seealso cref="P:Esri.ArcGISRuntime.Http.ArcGISHttpClientHandler.DefaultReferer"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.TokenValidity">
            <summary>
            Gets or sets the suggested lifetime of the token in minutes.
            If set, this value overrides the default <see cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.TokenValidity"/>.
            </summary>
            <remarks>With the OAuth authorization grant workflow, you can generate a permanent OAuth refresh token by specifying a token validity of -1. 
            If you don’t specify a token validity the default refresh token validity is 2 weeks. </remarks>
            <value>
            The token validity in minutes.
            </value>
            <seealso cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.TokenValidity"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.TokenAuthenticationType">
            <summary>
            Gets or sets the type of the token authentication used for generating the token.
            </summary>
            <value>
            If this value is null, <see cref="P:Esri.ArcGISRuntime.Security.ServerInfo.TokenAuthenticationType"/> is used.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.OAuthAuthorizeHandler">
            <summary>
            Gets or sets the component that handles authorization by a resource owner in an oauth workflow.
            If set, this value overrides the default <see cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.OAuthAuthorizeHandler"/>.
            </summary>
            <see cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.OAuthAuthorizeHandler"/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.OAuthTokenCredential">
            <summary>
            The OAuthTokenCredential class represents a credential object used to access to ArcGIS resources secured with with OAuth.
            </summary>
            <remarks>
            You will generally get an instance of this class by calling <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)"/>.
            To accommodate specific uses cases, this object can also be created manually.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthTokenCredential.OAuthRefreshToken">
            <summary>
            Gets or sets the OAuth refresh token useful for getting a new access token once the old one expired.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.OAuthTokenCredential.GenerateTokenImplAsync(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Generates the token asynchronously.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.OAuthTokenCredential.RefreshTokenImplAsync(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Refreshes the token.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.OAuthTokenCredential.GetOAuthTokenAsync(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Manage the process of getting an OAuth token in one or 2 steps.
            </summary>
            <param name="serverInfo">The server info.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.OAuthTokenCredential.UpdateCredentialFromOAuthTokenWebRequest(Esri.ArcGISRuntime.Security.OAuthTokenWebRequest)">
            <summary>
            Called when the request to the OAuth token URl completed.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.OAuthTokenCredential.CheckOAuthInfos(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Checks the OAuth infos and completes the missing infos when possible.
            </summary>
            <param name="serverInfo">The server info.</param>
            <returns></returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.ArcGISNetworkCredential">
            <summary>
            The ArcGISNetworkCredential class represents a credential object used to access to HTTP secured ArcGIS resources.
            </summary>
            <remarks>
            You will generally get an instance of this class by calling <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)">GetCredentialAsync</see>.
            To accommodate specific uses cases, this object can also be created manually.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ArcGISNetworkCredential.Credentials">
            <summary>
            Gets or sets the base authentication interface for accessing an ArcGIS resource with an HTTP authentication.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.CertificateCredential">
            <summary>
            The CertificateCredential class represents a digital certificate used to access to resources in a PKI (Public Key Infrastructure).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.CertificateCredential.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Instantiates a <see cref="T:Esri.ArcGISRuntime.Security.CertificateCredential"/> instance with the specified client certificate.
            </summary>
            <param name="clientCertificate">The client certificate.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.CertificateCredential.ClientCertificate">
            <summary>
            Gets or sets the client certificate for accessing an ArcGIS resource in a PKI.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.TokenCredential">
            <summary>
            Base class that represents a credential object used to access to token secured ArcGIS resources.
            </summary>
            <remarks>
            You will generally get an instance of this class by calling <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.TokenCredential.Token">
            <summary>
            Gets or sets the token used to access the arcgis services with this credential.
            The token can have been generated either by the token service using the specified user name and password or by the OAuth authentication process.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.TokenCredential.ExpirationDate">
            <summary>
            Gets or sets the Token expiration date.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.TokenCredential.UserName">
            <summary>
            Gets or sets the user associated with the Credential object.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.TokenCredential.IsSsl">
            <summary>
            Gets or sets a value indicating whether the token must always pass over ssl.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.TokenCredential.GenerateTokenOptions">
            <summary>
            Gets or sets the optional infos used to generate the token : referer, credentials, ....
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.TokenCredential.RefreshTokenAsync">
            <summary>
            Refreshes the token.
            </summary>
            <returns>A task that represents the asynchronous refresh token operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.TokenCredential.RefreshTokenImplAsync">
            <summary>
            Refreshes the token.
            </summary>
            <returns>A task that represents the asynchronous refresh impl token operation.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.IChallengeHandler">
            <summary>
            ChallengeHandler interface for handling the authorization errors returned by the requests to the ArcGIS resources. 
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.ChallengeHandler"/>
            <seealso cref="T:Esri.ArcGISRuntime.Security.ChallengeHandler"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.IChallengeHandler.CreateCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo)">
            <summary>
            Create the credential allowing to access to the specified ArcGIS resource.
            Most generally the application challenges the user in order to get the credential but the credential may also be generated programmatically.
            </summary>
            <param name="requestInfo">Information about the ArcGIS resource that needs a credential for getting access to.</param>
            <returns>
            The task object representing the asynchronous create credential operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Security.Credential"/> object upon successful completion, otherwise the <see cref="P:System.Threading.Tasks.Task.Exception"/> is set.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.IOAuthAuthorizeHandler">
            <summary>
            Interface to implement by components that handle authorization by a resource owner in an oauth workflow.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.IOAuthAuthorizeHandler.AuthorizeAsync(System.Uri,System.Uri,System.Uri)">
            <summary>
            Handles the authorization by redirecting the user to the authorization URI.
            </summary>
            <param name="serviceUri">The service URI.</param>
            <param name="authorizeUri">The authorize URI.</param>
            <param name="callbackUri">The callback URI.</param>
            <returns>
            The task object representing the asynchronous authorize operation. The value of the task result contains a collection of string key/value pairs 
            <see cref="T:System.Collections.Generic.IDictionary`2"/> object. The dictionary contains parameters returned by the authorization URI 
            (code, access_token, refresh_token, ...).
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.OAuthClientInfo">
            <summary>
            Represents an OAuth application
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthClientInfo.ClientId">
            <summary>
            Gets or sets the OAuth client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthClientInfo.ClientSecret">
            <summary>
            Gets or sets the OAuth client secret.
            </summary>
            <value>
            The client secret.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthClientInfo.RedirectUri">
            <summary>
            Gets or sets the redirect URI.
            </summary>
            <remarks>
            <para>
            There is no default setting for the OAuthClientInfo.RedirectUri Property; it must be supplied by the developer.
            </para>
            </remarks>
            <value>
            The redirect URI.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.OAuthServerInfo">
            <summary>
            This class contains information about the OAuth end points of a portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthServerInfo.OAuthAuthorizeUri">
            <summary>
            Gets or sets the OAuth authorization URI for the portal.
            </summary>
            <remarks>By default the authorization URI is set to https://&lt;portal domain&gt;/sharing/oauth2/authorize</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.OAuthServerInfo.OAuthTokenUri">
            <summary>
            Gets or sets the OAuth token rest end point. This end point is useful either to exchange an authorization code for an access token or to refresh an access token from a refresh token.
            </summary>
            <remarks>
            By default the authorization URI is set to https://&lt;portal domain&gt;/sharing/oauth2/token
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.OAuthTokenWebRequest">
            <summary>
            Manage the requests sent to the OAuth token end point in order to get an access token
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.ServerInfo">
            <summary>
            This class contains information about an ArcGIS Server and its token endpoint. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.ServerUri">
            <summary>
            Gets or sets the server URI
            Most generally the URI uses the following format : scheme://&lt;arcgis portal url&gt; or scheme://host[:port]/&lt;path to arcgis instance&gt;
            </summary>
            <remarks>
            In case of unique server instance for the a domain, the URL can also be given in the following format : scheme://host[:port]. All subpaths of this URL will use the same token rest end point.
            </remarks>
            <value>
            The server URI.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.TokenServiceUri">
            <summary>
            Gets or sets the token service URI used to generate tokens for the secured resources on the server.
            </summary>
            <value>
            The token service URI.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.OwningSystemUri">
            <summary>
            Gets or sets the URI of the system owning the server (optional, only useful in case of federated services)
            </summary>
            <value>
            The owning portal URI. The tokens for the server will be generated from the portal token rest end point.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.OAuthServerInfo">
            <summary>
            Gets or sets the OAuth infos about this portal.
            </summary>
            <remarks>
            Setting this property is optional. If this property is not set when an OAuth authentication is initiated, default values will be provided. 
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.OAuthClientInfo">
            <summary>
            Gets or sets the OAuth application info.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.ServerInfo.TokenAuthenticationType">
            <summary>
            Gets or sets the type of the token authentication used by default for this server.
            </summary>
            <remarks>
            When generating a token by using one of the AuthenticationManager.GenerateCredentialAsync Methods
            this default value can be overridden by setting <see cref="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.TokenAuthenticationType"/>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ServerInfo.CanBeUsed(System.Uri)">
            <summary>
            Determines whether this token endpoint can be used to access the specified url.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.TokenAuthenticationType">
            <summary>
            Token Athentication types supported by ArcGIS.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.TokenAuthenticationType.ArcGISToken">
            <summary>
            Token generated by the token rest end point of an ArcGIS server or ArcGIS portal.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.TokenAuthenticationType.OAuthAuthorizationCode">
            <summary>
            OAuth access token generated after an authentication on behalf of the user using a two steps autorization code workflow.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.TokenAuthenticationType.OAuthImplicit">
            <summary>
            OAuth access token generated after an authentication on behalf of the user using the one step implicit workflow.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Security.TokenAuthenticationType.OAuthClientCredentials">
            <summary>
            OAuth access token generated after an authentication on behalf of an application.
            This authentication uses the OAuth client credentials workflow and doesn't need any UI (but needs the ClientSecret).
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.Credential">
            <summary>
            Base class that represents a credential object used to access a secured ArcGIS resource.
            </summary>
            <remarks>
            You will generally get an instance of this class by calling <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)">GetCredentialAsync</see>.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.Credential.ServiceUri">
            <summary>
            Gets or sets the URI of the service that can be accessed with this credential.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="E:Esri.ArcGISRuntime.Security.Credential.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.ChallengeHandler">
            <summary>
            Helper class allowing to create a challenge handler from a challenge method.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ChallengeHandler.#ctor(System.Func{Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Threading.Tasks.Task{Esri.ArcGISRuntime.Security.Credential}})">
            <summary>
            Instantiates a new <see cref="T:Esri.ArcGISRuntime.Security.ChallengeHandler"/> from a Challenge method.
            </summary>
            <remarks>
            This class allows the user to initialize the <see cref="T:Esri.ArcGISRuntime.Security.ChallengeHandler"/> without having to implement the interface:
            AuthenticationManager.Current.ChallengeHandler = new ChallengeHandler(myMethod);
            </remarks>
            <param name="challengeMethod">The challenge method</param>
            <seealso cref="T:Esri.ArcGISRuntime.Security.ChallengeHandler"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.ChallengeHandler.CreateCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo)">
            <summary>
            Create the credential allowing to access to the specified ArcGIS resource.
            Most generally the application challenges the user in order to get the credential but the credential may also be generated programmatically.
            </summary>
            <param name="requestInfo">Information about the ArcGIS resource that needs a credential for getting access to.</param>
            <returns>
            The task object representing the asynchronous create credential operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Security.Credential"/> object upon successful completion, otherwise the <see cref="P:System.Threading.Tasks.Task.Exception"/> is set.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.AuthenticationManager">
            <summary>
            The Authentication Manager is a singleton class that, when enabled, will manage the user credentials for the following resources: 
            <list type="bullet">
            <item>ArcGIS Server resources secured using token-based authentication or using HTTP authentication. Note that only ArcGIS Server versions 10 SP 1 and greater are supported. </item>
            <item>Secured ArcGIS.com resources (e.g. web maps).</item>
            <item>Secured ArcGIS Portal resources.</item>
            </list>
            A credential for accessing to an ArcGIS resource can be preset by using <see cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.AddCredential(Esri.ArcGISRuntime.Security.Credential)"/>. In this case the credential is used for any requests to the specified resources.
            <para>
            If a request to an ArcGIS resource returns an authorization error, the <see cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.ChallengeHandler"/>, if not null, is called.
            This challenge handler can return the credential for accessing to the resource. 
            </para>
            <para>If the ChallengeHandler is null or if it doesn't return any credential, the Authorization error is returned to the caller as if the request was executed out of the AuthenticationManager.</para>
            </summary>
            <remarks>Most generally the ChallengeHandler displays the UI allowing the user to enter the username/password for accessing the resource. 
            Unlike for WinStore application, the API doesn't provide any default UI for WinPhone or Desktop.
            However, a default challenge handler is set for managing the access though OAuth when the <see cref="P:Esri.ArcGISRuntime.Security.AuthenticationManager.OAuthAuthorizeHandler"/> is set. 
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.Current">
            <summary>
            Gets the single <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> instance.
            This is the only way to get an IdentifyManager instance.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.ChallengeHandler">
            <summary>
            Gets or sets the component that handles the authorization errors in order to get a valid credential object.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.RegisterServer(Esri.ArcGISRuntime.Security.ServerInfo)">
            <summary>
            Register secure servers and the token endpoints.
            The Authentication Manager makes its best guess to determine the location of the secure server and token endpoint so in most cases calling registerServers is not necessary.
            However if the location of your server or token endpoint is non-standard use this method to register the location.
            Additionally if portal uses the OAuth authentication, it neeeds to be registered by this method.
            </summary>
            <param name="serverInfo">The serverInfo object that defines the secure service and token endpoint.
            </param>
            <remarks>Most generally, the AuthenticationManager can guess the token endpoint whether the url contains either '/sharing' (portal url) or '/rest/services' (arcgis service).
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.OAuthAuthorizeHandler">
            <summary>
            Gets or sets the component sets the component that handles authorization by a resource owner in an oauth workflow.
            </summary>
            <remarks>
            The ArcGISRuntime SDK doesn't provide any default OAuthAuthorizeHandler implementation but the ArcGIS Runtime Toolkit for .NET provides such a component.
            <para/>
            This toolkit component can be set by code like:
            <code>
            AuthenticationManager.Current.OAuthAuthorizeHandler = new Esri.ArcGISRuntime.Toolkit.Security.OAuthAuthorizeHandler();
            </code>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.TokenValidity">
            <summary>
            Gets or sets the default suggested lifetime of the token in minutes.
            This default value can be overridden for a specific credential by setting <see cref="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.TokenValidity"/>.
            </summary>
            <remarks>With the OAuth authorization grant workflow, you can generate a permanent OAuth refresh token by specifying -1 as token validity. 
            If you don’t specify a token validity the default refresh token validity is 2 weeks. </remarks>
            <value>
            The default token validity.
            </value>
            <seealso cref="P:Esri.ArcGISRuntime.Security.GenerateTokenOptions.TokenValidity"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GenerateCredentialAsync(System.Uri,System.String,System.String,Esri.ArcGISRuntime.Security.GenerateTokenOptions)">
            <summary>
            Generates a token credential object asynchronously. 
            You need to provide the service URI, the username and the password.
            This is a helper method typically called by the UI challenging the user.
            </summary>
            <param name="serviceUri">The service Uri.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="generateTokenOptions">The optional infos concerning the token to generate (referer, credentials).</param>
            <exception cref="T:System.ArgumentNullException">serviceUri</exception>
            <returns>
            The task object representing the asynchronous generate credential operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Security.TokenCredential"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GenerateCredentialAsync(System.Uri,Esri.ArcGISRuntime.Security.GenerateTokenOptions)">
            <summary>
            Generates a token credential object asynchronously. 
            You need to provide the service URL.
            This is a helper method typically called by the UI challenging the user.
            </summary>
            <param name="serviceUri">The URL.</param>
            <param name="generateTokenOptions">The optional infos concerning the token to generate (referer, credentials).</param>
            <seealso cref="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GenerateCredentialAsync(System.Uri,System.String,System.String,Esri.ArcGISRuntime.Security.GenerateTokenOptions)"/>
            <exception cref="T:System.ArgumentNullException">serviceUri</exception>
            <returns>
            The task object representing the asynchronous generate credential operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Security.TokenCredential"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.GetCredentialAsync(Esri.ArcGISRuntime.Security.CredentialRequestInfo,System.Boolean)">
            <summary>
            Returns a Credential object of the specified type (credentialRequestInfo.AuthenticationType) that can be used to access the secured resource identified by the input url (credentialRequestInfo.Url).
            If required, the challenge method will be called and should return the expected credential object.
            If case of Token AuthenticationType, the user is typically challenged for a username and password which are used to generate a token.
            This method is typically called internally when a request fails due to an "invalid credentials" error.
            </summary>
            <param name="credentialRequestInfo">The information about the credential to get.</param>
            <param name="retry">Indicates if the method should make additional attempts to get the credentials after a failure
            (i.e. if true, the challenge method will be called in any case)</param>
            <returns>
            The task object representing the asynchronous get credential operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Security.Credential"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.FindCredential(System.Uri)">
            <summary>
            Returns the token credential for the resource identified by the specified url.
            </summary>
            <param name="serviceUri">The service uri.</param>
            <exception cref="T:System.ArgumentNullException">serviceUri</exception>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Security.TokenCredential"/> for accessing secured ArcGIS resources.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.FindCredential(System.Uri,Esri.ArcGISRuntime.Security.AuthenticationType)">
            <summary>
            Returns the credential that supports the specified authentication type for the resource identified by the specified url.
            </summary>
            <param name="serviceUri">The service uri.</param>
            <param name="authenticationType">Authentication type supported by the credential.</param>
            <exception cref="T:System.ArgumentNullException">serviceUri</exception>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Security.Credential"/> for accessing secured ArcGIS resources.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.AddCredential(Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Adds a new <see cref="T:Esri.ArcGISRuntime.Security.Credential"/> the AuthenticationManager will use for accessing the resources.
            </summary>
            <remarks>
            This method is useful in some workflows a token is generated prior to accessing services (or webmaps).
            </remarks>
            <param name="credential">The credential to add.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.RemoveCredential(Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Removes an existing credential so the challenge handler will be called
            the next time an access to the resources is needed.
            </summary>
            <param name="credential">The credential to remove.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.FindServerInfo(System.Uri)">
            <summary>
            Returns information about the server that is hosting at the specified url.
            </summary>
            <param name="serverUri">The URI that can be either the root path to the ArcGIS server (e.g http://serverapps10.esri.com/ArcGIS)
            or any subpath of this root  (e.g http://serverapps10.esri.com/ArcGIS/rest/services/California/MapServer) </param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Security.ServerInfo"/> object that has information about the ArcGIS Server.
            </returns>
            <exception cref="T:System.ArgumentNullException">serviceUri</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.ServerInfos">
            <summary>
            Gets the registered servers.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.Credentials">
            <summary>
            Gets the credentials registered by the Authentication Manager.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Security.AuthenticationManager.IsBusy">
            <summary>
            Gets a value indicating whether the Authentication Manager is busy accepting user input.
            </summary>
            <value>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.EndSignIn(Esri.ArcGISRuntime.Security.AuthenticationManager.SignInTask,Esri.ArcGISRuntime.Security.Credential,System.Exception)">
            <summary>
            Ends the signin process
              -> Register the credential for further uses
              -> Execute the callback
              -> Dequeue the waiting sign in task
            </summary>
            <param name="signInTask">The sign in task.</param>
            <param name="crd">The credential (if OK).</param>
            <param name="error">The error (if failed).</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Security.AuthenticationManager.SignInTask">
            <summary>
            Infos about a signin task
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Security.AuthenticationManager.SignInTask.#ctor(Esri.ArcGISRuntime.Security.ServerInfo,Esri.ArcGISRuntime.Security.CredentialRequestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager.SignInTask"/> class.
            </summary>
            <param name="serverInfo">The server info.</param>
            <param name="info">The credential request infos.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.DistanceCompositeSceneSymbol">
            <summary>
            Defines a set of symbols and their visible distance range.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.DistanceCompositeSceneSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.DistanceCompositeSceneSymbol" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.DistanceCompositeSceneSymbol.RangeCollection">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange"/>.
            </summary>
            <remarks>
            Each symbol added to this collection can specify a minimum and maximum display distance. 
            When a feature is rendered, the distance from the camera will be checked against the specified 
            minimum and maximum range to determine the symbols visibility. Note that symbol ranges for the 
            contained symbols are not exclusive and may overlap. 
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange">
            <summary>
            Defines a minimum and maximum distance for rendering the symbol.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.#ctor(Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange" /> class.
            </summary>
            <param name="symbol">The symbol that will always be visible.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.#ctor(Esri.ArcGISRuntime.Symbology.Symbol,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange" /> class.
            </summary>
            <param name="symbol">The symbol that will only be visible within the specified distance range.</param>
            <param name="minDistance">The minimum distance in meters where symbol is visible.</param>
            <param name="maxDistance">The maximum distance in meters where symbol is visible.</param>
            <remarks>
            Specifying a maxDistance of 0.0 indicates that there is no maximum range limit.
            Symbol will always be visible beyond it's minimum range.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.MaxDistance">
            <summary>
            Gets or sets the maximum distance in meters of the distance range where symbol is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.MinDistance">
            <summary>
            Gets or sets the minimum distance in meters of the distance range where symbol is visible.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.Symbol">
            <summary>
            Gets or sets the symbol to render withim specified distance range.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.DistanceSymbolRange.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.ExtrusionMode">
            <summary>The options for handling extrusion values.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.ExtrusionMode.None">
            <summary>No extrusion is applied</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.ExtrusionMode.Minimum">
            <summary>Flat top, extruded from minimum altitude value</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.ExtrusionMode.Maximum">
            <summary>Flat top, extruded from maximum altitude value</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.ExtrusionMode.AbsoluteHeight">
            <summary>Flat top, extruded from specified altitude value</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.ExtrusionMode.BaseHeight">
            <summary>Non flat top, extruded from each altitude value</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.RendererSceneProperties">
            <summary>
            Collection of properties for renderers that participate in a <see cref="T:Esri.ArcGISRuntime.Mapping.Scene"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.#ctor">
            <summary>Creates a new renderer scene properties object with default values.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.#ctor(System.String,Esri.ArcGISRuntime.Symbology.ExtrusionMode)">
            <summary>
            Creates a new renderer scene properties object with the specified extrusion properties.
            </summary>
            <param name="extrusionExpression">The extrusion expression to be used</param>
            <param name="extrusionMode">The extrusion mode</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new renderer scene properties object with the specified rotation properties</summary>
            <param name="headingExpression">Heading expression to be used</param>
            <param name="pitchExpression">Pitch expression to be used</param>
            <param name="rollExpression">Roll expression to be used</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.ExtrusionExpression">
            <summary>Gets or sets the extrusion expression.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.ExtrusionMode">
            <summary>Gets or sets the extrusion mode.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.HeadingExpression">
            <summary>Gets or sets the heading expression.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.PitchExpression">
            <summary>Gets or sets the pitch expression.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.RollExpression">
            <summary>Gets or sets the roll expression.</summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.RendererSceneProperties.OnPropertyChanged(System.String)">
            <summary>Notifies listeners that a property value has changed.</summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle">
            <summary>
            The list of possible simple marker scene symbol styles.
            </summary>
            <remarks>
            This is used to determine the style of the simple scene marker symbol.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Cone">
            <summary>
            The marker is a cone.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Cube">
            <summary>
            The marker is a 3D cube.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Cylinder">
            <summary>
            The marker is a cylinder.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Diamond">
            <summary>
            The marker is a 3D diamond.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Sphere">
            <summary>
            The marker is a sphere.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle.Tetrahedron">
            <summary>
            The marker is a tetrahedron.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol">
            <summary>
            Base class for symbols used in <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.#ctor">
            <summary>
            Creates a simple marker scene symbol with unknown style.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.#ctor(Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle,System.Drawing.Color,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol.
            </summary>
            <param name="style">The <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbolStyle"/> of the symbol</param>
            <param name="color">The  <see cref="T:System.Drawing.Color"/> of the symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
            <param name="width">The width in meters of the cone symbol</param>
            <param name="depth">The depth in meters of the cone symbol</param>
            <param name="anchorPosition">The  <see cref="T:Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition"/> of the symbol</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.Style">
            <summary>
            Gets or sets the style of the scene marker symbol.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCone(System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Creates a simple marker scene symbol with cone style.
            </summary>
            <param name="color">The color of the cone symbol</param>
            <param name="diameter">The diameter in meters of base of the cone symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cone style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCone(System.Drawing.Color,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with cone style.
            </summary>
            <param name="color">The color of the cone symbol</param>
            <param name="diameter">The diameter in meters of base of the cone symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
            <param name="anchorPosition">The anchor position of the cone symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cone style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCube(System.Drawing.Color,System.Double)">
            <summary>
            Creates a simple marker scene symbol with cube style.
            </summary>
            <param name="color">The color of the cube symbol</param>
            <param name="size">The size in meters of base of the cube in each dimension symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cube style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCube(System.Drawing.Color,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with cube style.
            </summary>
            <param name="color">The color of the cube symbol</param>
            <param name="size">The size in meters of base of the cube in each dimension symbol</param>
            <param name="anchorPosition">The anchor position of the cube symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cube style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCylinder(System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Creates a simple marker scene symbol with cylinder style.
            </summary>
            <param name="color">The color of the cylinder symbol</param>
            <param name="diameter">The diameter in meters of base of the cylinder symbol</param>
            <param name="height">The height in meters of the cylinder symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cylinder style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateCylinder(System.Drawing.Color,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with cylinder style.
            </summary>
            <param name="color">The color of the cylinder symbol</param>
            <param name="diameter">The diameter in meters of base of the cylinder symbol</param>
            <param name="height">The height in meters of the cylinder symbol</param>
            <param name="anchorPosition">The anchor position of the cylinder symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a cylinder style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateDiamond(System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Creates a simple marker scene symbol with diamond style.
            </summary>
            <param name="color">The color of the diamond symbol</param>
            <param name="size">The size in meters of width and depth of the diamond symbol</param>
            <param name="height">The height in meters of the diamond symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a diamond style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateDiamond(System.Drawing.Color,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with diamond style.
            </summary>
            <param name="color">The color of the diamond symbol</param>
            <param name="size">The size in meters of width and depth of the diamond symbol</param>
            <param name="height">The height in meters of the diamond symbol</param>
            <param name="anchorPosition">The anchor position of the diamond symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a diamond style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateSphere(System.Drawing.Color,System.Double)">
             <summary>
             Creates a simple marker scene symbol with sphere style.
             </summary>
            <param name="color">The color of the sphere symbol</param>
            <param name="diameter">The diameter in meters of sphere symbol</param>
             <returns>
             A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a sphere style.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateSphere(System.Drawing.Color,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with sphere style.
            </summary>
            <param name="color">The color of the sphere symbol</param>
            <param name="diameter">The diameter in meters of sphere symbol</param>
            <param name="anchorPosition">The anchor position of the sphere symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a sphere style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateTetrahedron(System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Creates a simple marker scene symbol with tetrahedron style.
            </summary>
            <param name="color">The color of the tetrahedron symbol</param>
            <param name="size">The size in meters of width and depth of the tetrahedron symbol</param>
            <param name="height">The height in meters of the tetrahedron symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a tetrahedron style.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol.CreateTetrahedron(System.Drawing.Color,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition)">
            <summary>
            Creates a simple marker scene symbol with tetrahedron style.
            </summary>
            <param name="color">The color of the tetrahedron symbol</param>
            <param name="size">The size in meters of width and depth of the tetrahedron symbol</param>
            <param name="height">The height in meters of the tetrahedron symbol</param>
            <param name="anchorPosition">The anchor position of the tetrahedron symbol</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSceneSymbol"/> using a tetrahedron style.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.ModelMarkerSymbol">
            <summary>
            Base class for symbols used in <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ModelMarkerSymbol.CreateAsync(System.Uri,System.Double)">
             <summary>
             Creates a new instance of a model marker symbol.
             </summary>
            <param name="scale">Scaling factor to apply to the model</param>
            <param name="modelSource">URI of the model.</param>
            <returns>
             The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Symbology.ModelMarkerSymbol"/> object.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition">
            <summary>
            The list of possible scene symbol anchor placements.
            </summary>
            <remarks>
             This is used to determine the position of the scene marker symbol.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition.Top">
            <summary>
            The top of the symbol is the anchor point.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition.Bottom">
            <summary>
            The bottom of the symbol is the anchor point.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SceneSymbolAnchorPosition.Center">
            <summary>
            The center of the symbol is the anchor point.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol">
            <summary>
            Base class for symbols used in <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.AnchorPosition">
            <summary>
            Gets or sets the anchor position of the simple marker scene symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Color">
            <summary>
            Gets or sets the symbol color.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Depth">
            <summary>
            Gets or sets the depth (in meters) of the simple marker scene symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Heading">
            <summary>
            Gets or sets the heading (in degrees) of the scene marker symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Height">
            <summary>
            Gets or sets the height (in meters) of the simple marker scene symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Pitch">
            <summary>
            Gets or sets the pitch (in degrees) of the scene marker symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Roll">
            <summary>
            Gets or sets the roll (in degrees) of the scene marker symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSceneSymbol.Width">
            <summary>
            Gets or sets the width (in meters) of the simple marker scene symbol.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SceneSymbol">
            <summary>
            Base class for symbols used in <see cref="T:Esri.ArcGISRuntime.UI.SceneView"/>
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.ClassBreak">
            <summary>
            Represents a unique value or combination of values and a matching symbol in a <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.#ctor">
            <summary>Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak"/> class.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.#ctor(System.String,System.String,System.Double,System.Double,Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak"/> class with initial values.
            </summary>
            <param name="description">The description.</param>
            <param name="label">The label.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.ClassBreak.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreak.Description">
            <summary>Gets or sets the renderer description for this class of values.</summary>
            <remarks>This is for informational purposes only and does not affect the renderers output. It is often used in combination with legends.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreak.Label">
            <summary>Gets or sets the renderer label for this class of values.</summary>
            <remarks>This is for informational purposes only and does not affect the renderers output. It is often used in combination with legends.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreak.MaxValue">
            <summary>The maximum value of the class break</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreak.MinValue">
            <summary>The minimum value of the class break</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreak.Symbol">
            <summary>Symbol used to represent the class break specified between the min and max values</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.FromJson(System.String)">
            <summary>Creates an instance of a class break by deserializing JSON.</summary>
            <param name="json">The JSON.</param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak"/> object that was converted from a JSON string.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.ToJson">
            <summary>Returns a string containing the JSON representation of the class break.</summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreak.Clone">
            <summary>
             Returns a clone of this ClassBreak.
             </summary>
             <returns>
             A clone of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak"/>.
             </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.ClassBreakCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak">ClassBreaks</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreakCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreakCollection"/> class.
            </summary>
            <param name="classbreaks">The core vector of class breaks.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.RendererNormalizationType">
            <summary>
            Defines the statistical normalization technique used to adjust values measured on different scales to a notionally common scale, 
            often prior to averaging. This enumeration is used by the 
            <see cref="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.NormalizationType">ClassBreaksRenderer.NormalizationType</see> Property.
            </summary>
            <remarks>
            <para>
            Normalizing is the process of dividing one numeric attribute value by another to minimize differences in values based on the size of 
            areas or the number of features in each area. For example, normalizing (dividing) total population by total area yields population 
            per unit area, or density.
            </para>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RendererNormalizationType.None">
            <summary>
            Normalization not used
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RendererNormalizationType.ByLog">
            <summary>
            Normalize by log
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RendererNormalizationType.ByField">
            <summary>
            Normalize by field
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RendererNormalizationType.ByPercentOfTotal">
            <summary>
            Normalize by percent of total
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer">
            <summary>
            A custom symbology renderer where the features of a Layer are displayed via groups based upon numerical data. The groups (aka. class breaks) 
            are defined by specified <see cref="P:Esri.ArcGISRuntime.Symbology.ClassBreak.MinValue">MinValue</see> and 
            <see cref="P:Esri.ArcGISRuntime.Symbology.ClassBreak.MaxValue">MaxValue</see> values in the 
            <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak">ClassBreakInfo</see> objects of the 
            ClassBreaks collection.
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e04a173-f077-4003-8fd6-391cf6e951cb.htm">Renderers and Symbols</a>, provides a good overview and 
            set of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer"/> class.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.#ctor(System.String,System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Symbology.ClassBreak})">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer"/> class.</summary>
            <param name="field">The field.</param>
            <param name="classBreaks">A sequence of ClassBreak objects.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.ClassBreaks">
            <summary>
            Gets the collection of <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak">ClassBreak</see> objects 
            which define each group of numerical observations being symbolized in a Layer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.DefaultLabel">
            <summary>Gets or sets the label used for the default symbol.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.DefaultSymbol">
            <summary>
            Gets or sets the default symbol that will be used by the ClassBreaksRenderer when there is no 
            group specified by the <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak">ClassBreak's</see> 
            objects for a particular observation.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.FieldName">
            <summary>
            Gets or sets the name of the name of the Field that will be 
            symbolized via groups using <see cref="T:Esri.ArcGISRuntime.Symbology.ClassBreak">ClassBreak</see> 
            objects in this instance.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.MinValue">
            <summary>Gets or sets the minimum value</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.NormalizationField">
            <summary>Gets or sets the normalization field.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.NormalizationTotal">
            <summary>Gets or sets the normalization total.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.ClassBreaksRenderer.NormalizationType">
            <summary>Gets or sets the renderer's normalization type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.FillSymbol">
            <summary>
            Base class for fill symbols used for displaying polygons
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.FillSymbol.Color">
            <summary>Gets or sets the color</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.FillSymbol.Outline">
            <summary>Gets or sets the outline line symbol</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.FontDecoration">
            <summary>
            Describes the text decoration to be used when drawing text symbol.
            The default value is FontDecoration.None.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontDecoration.None">
            <summary>
            text-decoration : none (default)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontDecoration.LineThrough">
            <summary>
            text-decoration : line-through
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontDecoration.Underline">
            <summary>
            text-decoration : underline
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.FontStyle">
            <summary>
            Describes the font style to be used when drawing text symbol.
            The default value is FontStyle.Normal.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontStyle.Normal">
            <summary>
            font-style : normal (default)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontStyle.Italic">
            <summary>
            font-style : italic
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontStyle.Oblique">
            <summary>
            font-style : oblique
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.FontWeight">
            <summary>
            Describes the font weight to be used when drawing text symbol.
            The default value is FontWeight.Normal.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontWeight.Normal">
            <summary>
            font-wegiht : normal (default)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.FontWeight.Bold">
            <summary>
            font-weight : bold
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.HorizontalAlignment">
            <summary>
            Horizontal alignment of TextSymbol text.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Left">
            <summary>
            Align text to the left
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Center">
            <summary>
            Align text to the center
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Right">
            <summary>
            Align text to the right
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.HorizontalAlignment.Justify">
            <summary>
            Align text to be justified.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.LineSymbol">
            <summary>
            Base class for line symbols used for lines or polygon outlines
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.LineSymbol.Color">
            <summary>Gets or sets the line symbol color</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.LineSymbol.Width">
            <summary>Gets or sets the line symbol width</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.LineSymbol.AntiAlias">
            <summary>Gets or sets the anti-alias setting of the line symbol</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol">
            <summary>
            Symbol used to display an image as a marker symbol. 
            </summary>
            <remarks>
            <para>
            An extensive listing of Esri provided images that can be used by PictureMarkerSymbol can be found in the 
            Fundamentals document: <a href="5d809f1b-68de-4582-a4fe-166ed752941c.htm">Static Images</a>.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.#ctor">
            <summary>Creates a new instance of a Picture Marker Symbol</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.CreateAsync(System.Uri)">
            <summary>Creates a new instance of a Picture Marker Symbol from an image URI</summary>
            <param name="imageUri">URI of the image.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.CreateAsync(System.IO.Stream)">
            <summary>Creates a new instance of a Picture Marker Symbol from a stream of encoded image bytes</summary>
            <param name="imageStream">The source image stream.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.CreateAsync(Android.Graphics.Bitmap)">
            <summary>
            Creates a new instance of a Picture Marker Symbol from a source Bitmap instance
            </summary>
            <param name="bitmap">Source Bitmap</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol"/> object.
            </returns>
            <remarks>
            <para>
            For Xamarin Android developers, the input 'bitmap' parameter is of type: Android.Graphics.Bitmap.
            </para>
            <para>
            For Xamarin iOS developers, the input 'bitmap' parameter is of type: UIKit.UIImage.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.LoadAsync">
            <summary>Initiates loading of a PictureMarkerSymbol</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Opacity">
            <summary>
            Gets or sets the opacity for the symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Width">
            <summary>
            Gets or sets the image width.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Height">
            <summary>
            Gets or sets the image height.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol.Uri">
            <summary>Get the URI of the picture marker symbol.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment">
            <summary>
            Defines the way the rotation angle is used by the marker symbol
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Screen">
            <summary>
            Rotate the marker relative to the screen, usually 'Up'.
            </summary>
            <remarks>
            If the map rotates, the marker symbol will not rotate with the map but stay 'upright'.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Map">
            <summary>
            Rotate the marker relative to the map, usually 'North'.
            </summary>
            <remarks>
            If the map rotates, the marker symbol will rotate with the map.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.MarkerSymbol">
            <summary>
            Base class for Marker symbols used for displaying points
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.Angle">
            <summary>
            Gets or sets the rotation angle.
            </summary>        
            <remarks>
            Rotates the symbol either relative to the map or the screen, depending on the <see cref="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.AngleAlignment"/>. 
            </remarks>
            <seealso cref="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.AngleAlignment"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.AngleAlignment">
            <summary>
            Gets or sets the rotation angle alignment. Default value is <see cref="F:Esri.ArcGISRuntime.Symbology.SymbolAngleAlignment.Screen"/>
            </summary>        
            <remarks>
            <para>
            Determines the behavior of the symbol if the map rotates, i.e. whether the symbol should rotate with the map or not.
            </para>
            <para>
            When the <see cref="T:Esri.ArcGISRuntime.UI.GraphicsRenderingMode">GraphicsRenderingMode</see> is set to 
            <see cref="F:Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Static"/> the 
            <see cref="T:Esri.ArcGISRuntime.Symbology.MarkerSymbol">MarkerSymbols</see> (including the inherited: 
            <see cref="T:Esri.ArcGISRuntime.Symbology.PictureMarkerSymbol">PictureMarkerSymbols</see>, 
            <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol">SimpleMarkerSymbols</see>, and  
            <see cref="T:Esri.ArcGISRuntime.Symbology.TextSymbol">TextSymbols</see>) are always aligned with the MapView. This means 
            that if the MapView rotates any MarkerSymbols on the Map will stay in the same rotation as the MapView. Hence
            the MarkerSymbols will appear to be static in their positioning with respect to the Map. Even though you may set the 
            various MarkerSymbol AngleAlignment Properties, they will not be respected when the GraphicsRenderingMode is set to Static. 
            </para>
            <para> 
            Conversely, when the GraphicsLayer.RenderingMode is set to <see cref="F:Esri.ArcGISRuntime.UI.GraphicsRenderingMode.Dynamic"/> the 
            MarkerSymbols (including inherited Types) will rotate independently of the MapView if the rotation is changed. Furthermore, 
            setting the various MarkerSymbols AngleAlignment Properties is respected by the GraphicsRenderingMode when set to Dynamic.
            </para>
            </remarks>
            <seealso cref="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.Angle"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetX">
            <summary>
            Gets or sets the leader offset X of the marker symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.LeaderOffsetY">
            <summary>
            Gets or sets the leader offset Y of the marker symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetX">
            <summary>
            Gets or sets the X offset.
            </summary>  
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.OffsetY">
            <summary>
            Gets or sets the Y offset.
            </summary> 
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.MarkerSymbol.RotationType">
            <summary>
            Gets or sets the rotation type of the marker symbol.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.RotationType">
            <summary>
            The RotationType enum controls the origin and direction of rotation given by the rotation expression.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RotationType.Geographic">
            <summary>
            The rotation value is clockwise from North.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.RotationType.Arithmetic">
            <summary>
            The rotation value is counter-clockwise from East.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.Renderer">
            <summary>
            Base class for renderers used to display features in a <see cref="T:Esri.ArcGISRuntime.Mapping.Layer"/> or <see cref="T:Esri.ArcGISRuntime.UI.GraphicsOverlay"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.Renderer.RotationExpression">
            <summary>
            Gets/sets the expression describing how a Graphic's attributes are translated into a rotation to be applied to the Graphic. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.Renderer.RotationType">
            <summary>
            Gets/sets whether the rotation calculated from the RotationExpression is screen- or map-relative.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.Renderer.SceneProperties">
            <summary>Gets or sets the scene properties for the renderer.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Renderer.FromJson(System.String)">
            <summary>
            Returns the json representation of the renderer
            </summary>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.Renderer"/> object that was converted from a JSON string.
            </returns>
            <param name="json">JSON string that represents a <see cref="T:Esri.ArcGISRuntime.Symbology.Renderer"/>.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Renderer.ToJson">
            <summary>
            Returns the json representation of the renderer
            </summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.Symbology.Renderer"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Renderer.GetSymbol(Esri.ArcGISRuntime.Data.GeoElement)">
            <summary>
            Returns the symbol the renderer uses to represent the supplied GeoElement.
            </summary>
            <param name="element">The input <see cref="T:Esri.ArcGISRuntime.Data.GeoElement"/>.</param>
            <returns>
            The <see cref="T:Esri.ArcGISRuntime.Symbology.Symbol" /> used to represent the GeoElement.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Renderer.Clone">
            <summary>
             Returns a clone of the Renderer.
             </summary>
             <returns>
             A clone of the <see cref="T:Esri.ArcGISRuntime.Symbology.Renderer"/>.
             </returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.Renderer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Renderer.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle">
            <summary>Represents the style of a <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol"/></summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Solid">
            <summary>Solid</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Horizontal">
            <summary>Horizontal</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Vertical">
            <summary>Vertical</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Cross">
            <summary>Cross</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.DiagonalCross">
            <summary>Diagonal Cross</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.BackwardDiagonal">
            <summary>Backward Diagonal</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.ForwardDiagonal">
            <summary>Forward Diagonal</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle.Null">
            <summary>Null</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol">
            <summary>
            A basic color or pattern used to fill polygon features on a map. Use the 
            <see cref="P:Esri.ArcGISRuntime.Symbology.FillSymbol.Color">Color</see>, 
            <see cref="P:Esri.ArcGISRuntime.Symbology.FillSymbol.Outline">Outline</see>, and 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style">Style</see> Properties to modify its appearance. 
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e04a173-f077-4003-8fd6-391cf6e951cb.htm">Renderers and Symbols</a>, provides a good overview and set 
            of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.#ctor">
            <summary>Creates a new instance of a Simple Fill Symbol</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.#ctor(Esri.ArcGISRuntime.Symbology.SimpleFillSymbolStyle,System.Drawing.Color,Esri.ArcGISRuntime.Symbology.LineSymbol)">
            <summary>Creates a new instance of a Simple Fill Symbol with some initial values.</summary>
            <param name="style">Indicates the type of simple fill symbol to create.</param>
            <param name="color">The color of the simple fill symbol.</param>
            <param name="outline">The outline of the simple fill symbol.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleFillSymbol.Style">
            <summary>Gets or sets the Fill symbol style</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle">
            <summary>
            Represents the style of a <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol"/>.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Solid">
            <summary>Solid</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dash">
            <summary>Dash</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Dot">
            <summary>Dot</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDot">
            <summary>Dash-Dot</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.DashDotDot">
            <summary>Dash-Dot-Dot</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle.Null">
            <summary>Null</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol">
            <summary>
            A basic color and pattern used to represent polyline features on a map. Use the 
            <see cref="P:Esri.ArcGISRuntime.Symbology.LineSymbol.Color">Color</see>, 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style">Style</see>, and 
            <see cref="P:Esri.ArcGISRuntime.Symbology.LineSymbol.Width">Width</see> Properties to modify its appearance. 
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e04a173-f077-4003-8fd6-391cf6e951cb.htm">Renderers and Symbols</a>, provides a good overview and set 
            of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.#ctor">
            <summary>Creates a new instance of a Simple Line Symbol</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.#ctor(Esri.ArcGISRuntime.Symbology.SimpleLineSymbolStyle,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of a Simple Line Symbol with some initial values.</summary>
            <param name="style">Indicates the type of simple line symbol to create.</param>
            <param name="color">The color of the simple line symbol.</param>
            <param name="width">The width of the simple line symbol.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleLineSymbol.Style">
            <summary>Gets or sets the Line symbol style</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle">
            <summary>Represents the style of a <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol"/> </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Circle">
            <summary>Circle</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Cross">
            <summary>Cross</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Diamond">
            <summary>Diamond</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Square">
            <summary>Square</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.X">
            <summary>The shape of an X</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle.Triangle">
            <summary>Triangle</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol">
            <summary>
            A basic color and marker shape used to represent point features on a map. At a minimum use the 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color">Color</see>, 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline">Outline</see>, 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size">Size</see>, and 
            <see cref="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style">Style</see> Properties to modify 
            its default appearance. Other Properties are also available for more generate more complex visualizations. 
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e04a173-f077-4003-8fd6-391cf6e951cb.htm">Renderers and Symbols</a>, provides a good overview and set 
            of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.#ctor">
            <summary>Creates a new instance of a Simple Marker Symbol</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.#ctor(Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbolStyle,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of a Simple Marker Symbol with some initial values</summary>
            <param name="style">Indicates the type of simple marker symbol to create.</param>
            <param name="color">The color of the simple marker symbol.</param>
            <param name="size">The size of the simple marker symbol.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Outline">
            <summary>Gets or sets the outline line symbol</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Color">
            <summary>Gets or sets the color</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Size">
            <summary>Gets or sets the symbol size</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleMarkerSymbol.Style">
            <summary>Gets or sets the marker symbol style</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.SimpleRenderer">
            <summary>
            A custom symbology renderer where the features of a Layer are displayed as a single symbol.
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e04a173-f077-4003-8fd6-391cf6e951cb.htm">Renderers and Symbols</a>, provides a good overview and 
            set of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleRenderer"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.SimpleRenderer.#ctor(Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.SimpleRenderer"/> class with the given symbol.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleRenderer.Description">
            <summary>Gets or sets the renderer description.</summary>
            <remarks>
            This is for informational purposes only and does not affect the renders output. It is often used in combination with legends.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleRenderer.Label">
            <summary>Gets or sets the renderer label.</summary>
            <remarks>
            This is for informational purposes only and does not affect the renders output. It is often used in combination with legends.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.SimpleRenderer.Symbol">
            <summary>Gets or sets the symbol this renderer will use.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.Symbol">
            <summary>
            Base class for symbols
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.Symbol.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.FromJson(System.String)">
            <summary>
            Returns the json representation of the symbol
            </summary>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.Symbol"/> object that was converted from a JSON string.
            </returns>
            <param name="json">JSON string that represents a <see cref="T:Esri.ArcGISRuntime.Symbology.Symbol"/>.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.ToJson">
            <summary>
            Returns the json representation of the symbol
            </summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.Symbology.Symbol"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.CreateSwatchAsync">
            <summary>
            Returns an image containing the symbol using the default size with a transparent background
            </summary>
            <returns>
            The task object representing the asynchronous create swatch operation. The value of the task result is a <see cref="T:Android.Graphics.Bitmap"/> object.
            </returns>
            <remarks>
            <para>
            For Xamarin Android developers, the return task is of type: Android.Graphics.Bitmap.
            </para>
            <para>
            For Xamarin iOS developers, the return task is of type: UIKit.UIImage.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.CreateSwatchAsync(System.Drawing.Color)">
            <summary>
            Returns an image containing the symbol with the default size and the specified background color
            </summary>
            <param name="backgroundColor">The image background color.</param>
            <returns>
            The task object representing the asynchronous create swatch operation. The value of the task result is a <see cref="T:Android.Graphics.Bitmap"/> object.
            </returns>
            <remarks>
            <para>
            For Xamarin Android developers, the return task is of type: Android.Graphics.Bitmap.
            </para>
            <para>
            For Xamarin iOS developers, the return task is of type: UIKit.UIImage.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.Symbol.CreateSwatchAsync(System.Int32,System.Int32,System.Double,System.Drawing.Color,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns an image containing the symbol with the specified size, dpi, background color and geometry.
            </summary>
            <param name="widthPixels">The image width in pixels.</param>
            <param name="heightPixels">The image height in pixels.</param>
            <param name="dpi">The image dots per inch.</param>
            <param name="backgroundColor">The image background color.</param>
            <param name="geometry">The geometry that the symbol renders.</param>
            <returns>
            The task object representing the asynchronous create swatch operation. The value of the task result is a <see cref="T:Android.Graphics.Bitmap"/> object.
            </returns>
            <remarks>
            <para>
            For Xamarin Android developers, the return task is of type: Android.Graphics.Bitmap.
            </para>
            <para>
            For Xamarin iOS developers, the return task is of type: UIKit.UIImage.
            </para>
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.TextSymbol">
            <summary>
            Text symbol used to draw text as a marker symbol
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.TextSymbol.#ctor">
            <summary>Creates a new instance of a Text Symbol</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.TextSymbol.#ctor(System.String,System.Drawing.Color,System.Double,Esri.ArcGISRuntime.Symbology.HorizontalAlignment,Esri.ArcGISRuntime.Symbology.VerticalAlignment)">
            <summary>Creates a new instance of a Text Symbol with some initial values</summary>
            <param name="size">The size of the text symbol.</param>
            <param name="text">The text to be displayed for a the associated graphic.</param>
            <param name="color">The color of the text symbol.</param>
            <param name="hAlign">The horizontal alignment of the text.</param>
            <param name="vAlign">The vertical alignment of the text.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.Color">
            <summary>
            Gets or sets the color for the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.FontDecoration">
            <summary>
            Gets or sets the type of font decoration for the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.FontFamily">
            <summary>
            Gets or sets the font family of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.FontStyle">
            <summary>
            Gets or sets the font style of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.FontWeight">
            <summary>
            Gets or sets the font weight of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.Size">
            <summary>
            Gets or sets the font size of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.Text">
            <summary>
            Get or sets the text of the text symbol.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.TextSymbol.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text symbol.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.UniqueValue">
            <summary>
            Represents a unique value or combination of values and a matching symbol in a <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.#ctor(System.String,System.String,Esri.ArcGISRuntime.Symbology.Symbol,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/> class with initial values.
            </summary>
            <param name="description">The description.</param>
            <param name="label">The label.</param>
            <param name="symbol">The symbol.</param>
            <param name="value">A single object value</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.#ctor(System.String,System.String,Esri.ArcGISRuntime.Symbology.Symbol,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/> class with initial values.
            </summary>
            <param name="description">The description.</param>
            <param name="label">The label.</param>
            <param name="symbol">The symbol.</param>
            <param name="values">An collection of object values.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Symbology.UniqueValue.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValue.Label">
            <summary>Gets or sets the renderer label for this value.</summary>
            <remarks>This is for informational purposes only and does not affect the renderers output. It is often used in combination with legends.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValue.Description">
            <summary>Gets or sets the renderer description for this value.</summary>
            <remarks>This is for informational purposes only and does not affect the renderers output. It is often used in combination with legends.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValue.Values">
            <summary>
            The values that will be represented by the symbol. Multiple values represent a unique combination. The 
            UniqueValueRenderer.Fields property must have a matching number of entries.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValue.Symbol">
            <summary>Symbol used to represent the value or values</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.Clone">
            <summary>
             Returns a clone of this UniqueValue.
             </summary>
             <returns>
             A clone of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/>.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.FromJson(System.String)">
            <summary>Creates an instance of a UniqueValue by deserializing JSON.</summary>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/> object that was converted from a JSON string.
            </returns>
            <param name="json">JSON string that represents a <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/>.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValue.ToJson">
            <summary>Returns a string containing the JSON representation of the UniqueValue.</summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue"/> object.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.UniqueValueCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue">UniqueValues</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValueCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValueCollection"/> class.
            </summary>
            <param name="UniqueValues">The core vector of unqiue values.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer">
            <summary>
            A custom symbology renderer where the features of a Layer are displayed via groups based upon specified values found in an attribute field. 
            The groups (aka. unique values) are defined as discreet occurrences specified as 
            <see cref="P:Esri.ArcGISRuntime.Symbology.UniqueValue.Values">Values</see> in 
            <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValue">UniqueValue</see> 
            objects of the UniqueValues colleciton.
            </summary>
            <remarks>
            <para>
            The Fundamentals document, <a href="2e3b3752-48c8-4e3d-a28d-716a7d2914d4.htm">Renderers and Symbols</a>, provides a good overview and set 
            of targeted class diagrams to help understand how symbology and renderers work together.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.#ctor">
            <summary>Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer"/> class.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Symbology.UniqueValue},System.String,Esri.ArcGISRuntime.Symbology.Symbol)">
            <summary>
            Creates a new instance of the <see cref="T:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer"/> class with initial values.
            </summary>
            <param name="fields">The fields used to determine uniqueness</param>
            <param name="uniqueValues">The unique values used to determine uniqueness</param>
            <param name="label">The Default label</param>
            <param name="symbol">The Default symbol</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.DefaultLabel">
            <summary>Gets or sets the label used for the default symbol.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.DefaultSymbol">
            <summary>Gets or sets the default symbol this renderer will use.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.FieldNames">
            <summary>Returns one or more field names, these correspond to keys on Graphic attributes.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Symbology.UniqueValueRenderer.UniqueValues">
            <summary>Returns each value and related symbol used to render a layer</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Symbology.VerticalAlignment">
            <summary>
            Vertical alignment for TextSymbol text.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.VerticalAlignment.Bottom">
            <summary>
            Align text to the bottom.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.VerticalAlignment.Middle">
            <summary>
            Align text to the middle.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.VerticalAlignment.Top">
            <summary>
            Align text to the top.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Symbology.VerticalAlignment.Baseline">
            <summary>
            Align text to the baseline.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset">
            <summary>Transportation network dataset.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset.Alias">
            <summary>Gets the alias of the transportation network dataset.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset.Geodatabase">
            <summary>Gets the geodatabase from the transportation network dataset.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset.Name">
            <summary>Gets the name of the transportation network dataset.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset.Type">
            <summary>Gets the type of the transportation network dataset.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.GeodatabaseDatasetType">
            <summary>The types of geodatabase datasets.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.GeodatabaseDatasetType.Unknown">
            <summary>Unknown geodatabase dataset type.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.GeodatabaseDatasetType.TransportationNetworkDataset">
            <summary>A Transportation Network Dataset.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit">
            <summary>Types of units for network attributes.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Unknown">
            <summary>Unknown units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Feet">
            <summary>Feet attribite units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Miles">
            <summary>Miles attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Meters">
            <summary>Meters attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Kilometers">
            <summary>Kilometers attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Nautical">
            <summary>Nautical miles attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Decimal">
            <summary>Decimal degrees attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Minutes">
            <summary>Minutes attribute units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.AttributeUnit.Hours">
            <summary>Hours attribute units.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.BarrierType">
            <summary>Intended-usage types for barriers.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.BarrierType.Restriction">
            <summary>A restriction barrier type.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.BarrierType.CostAdjustment">
            <summary>A cost adjustment barrier type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CostAttribute">
            <summary>
            Represents an attribute used to measure and model impedance on the network, such as travel time (transit time 
            on a street).
            </summary>
            <remarks>
            <para>
            Network analysis often involves the minimization of a cost (also known as impedance) during the calculation of
            a path (also known as finding the best route). Common examples include finding the fastest route (minimizing 
            travel time) or the shortest route (minimizing distance).
            </para>
            <para>
            Cost attributes are a property of the underlying network dataset.
            </para>
            <para>
            These attributes are apportionable along an edge; that is, they are divided proportionately along the length
            of an edge. For example, if travel time is modeled as a cost attribute, traversing half an edge will take half
            the time as does traversing the whole edge: if the travel time to traverse the edge is 3 minutes, it takes 1.5 
            minutes to traverse half the edge.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CostAttribute.ParameterValues">
            <summary>Gets the cost attribute's parameters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CostAttribute.Unit">
            <summary>Gets the cost attribute's units.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach">
            <summary>The curb approach type.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach.EitherSide">
            <summary>An either side curb approach.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach.LeftSide">
            <summary>A left side curb approach.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach.RightSide">
            <summary>A right side curb approach.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach.NoUturn">
            <summary>A no U-Turn curb approach.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.CurbApproach.Unknown">
            <summary>An unknown type, used when approach is not determined.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionEvent">
            <summary>
            Class containing the relevant information for directions event on route.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionEvent.EstimatedLocalArrivalTime">
            <summary>Gets the estimated arrival time for this segment of the route.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionEvent.EventMessages">
            <summary>Gets the detailed direction info passed back from a route solving operation.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionEvent.Geometry">
            <summary>Gets event's geometry.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver">
            <summary>A class that contains properties of a directions maneuver.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.DirectionEvents">
            <summary>Gets direction events.</summary>
            <remarks>
             Get the directions events i.e. passing state boundaries, etc. from the solve operation.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.DirectionText">
            <summary>Gets direction text.</summary>
            <remarks>Gets the textual representation of the direction (e.g. Turn right on Main Street).</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.Duration">
            <summary>Gets duration time span.</summary>
            <remarks>Gets the time this segment of the route will take to traverse.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.EstimatedLocalArriveTime">
            <summary>Gets the estimated arrival time for this segment of the route.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver._geometry">
            <summary>Gets the geometry for the route direction.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.Geometry">
            <summary>Gets route's geometry.</summary>
            <remarks>Gets the geometry for the full route (polyline).</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.Length">
            <summary>Gets length in meters.</summary>
            <remarks>Gets the length of this segment of the route.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.ManeuverMessages">
            <summary>Gets maneuver messages.</summary>
            <remarks>Gets the detailed direction info passed back from a route solving operation.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuver.ManeuverType">
            <summary>Gets maneuver type.</summary>
            <remarks>Gets the maneuver used to perform this direction (E.g. Depart, Go Straight, etc).</remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType">
            <summary>Type of direction maneuver.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Unknown">
            <summary>A unknown maneuver type.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Stop">
            <summary>A stop maneuver.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Straight">
            <summary>A moving straight.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.BearLeft">
            <summary>A bear left.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.BearRight">
            <summary>A bear right.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnLeft">
            <summary>A turn left.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnRight">
            <summary>A turn right.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.SharpLeft">
            <summary>A sharp turn left.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.SharpRight">
            <summary>A sharp turn right.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.UTurn">
            <summary>An u-turn.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Ferry">
            <summary>A maneuver connected with a ferry.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Roundabout">
            <summary>A maneuver via roundabout.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.HighwayMerge">
            <summary>A merge of several highways.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.HighwayExit">
            <summary>An exit from highway.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.HighwayChange">
            <summary>A change of highway.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.ForkCenter">
            <summary>A straight at fork.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.ForkLeft">
            <summary>A maneuver to the left at fork.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.ForkRight">
            <summary>A maneuver to the right at fork.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Depart">
            <summary>A departure.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TripItem">
            <summary>A connected with trip planning.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.EndOfFerry">
            <summary>An end of ferry transfer.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.RampRight">
            <summary>A maneuver to the right on ramp.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.RampLeft">
            <summary>A maneuver to the left on ramp.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnLeftRight">
            <summary>A complex maneuver: turn left, then right.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnRightLeft">
            <summary>A complex maneuver: turn right, then left.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnRightRight">
            <summary>A complex maneuver: turn right, then right.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.TurnLeftLeft">
            <summary>A complex maneuver: turn left, then left.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.PedestrianRamp">
            <summary>A maneuver via pedestrian ramp.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Elevator">
            <summary>A maneuver using elevator.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Escalator">
            <summary>A maneuver using escalator.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.Stairs">
            <summary>A maneuver using stairs.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionManeuverType.DoorPassage">
            <summary>A passing through a door.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessage">
            <summary>A directions message.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessage.Text">
            <summary>Gets direction message text.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessage.Type">
            <summary>Gets direction message type.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType">
            <summary>Type of direction string.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.General">
            <summary>A general direction.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Depart">
            <summary>A depart stop.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Arrive">
            <summary>An arrive at stop.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Length">
            <summary>A driving length.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Time">
            <summary>A driving time (for stops time = wait_time + service_time).</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Summary">
            <summary>A summary.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.TimeWindow">
            <summary>A time window.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.ViolationTime">
            <summary>A violation to time window.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.WaitTime">
            <summary>A wait for time window.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.ServiceTime">
            <summary>A service time for stop, stop time.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.EstimatedArrivalTime">
            <summary>An estimated time arrival.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.CumulativeLength">
            <summary>An accumulated distance.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.StreetName">
            <summary>A street name.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.AlternativeName">
            <summary>An alternative street name.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Branch">
            <summary>A signpost branch.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Toward">
            <summary>A signpost toward.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.CrossStreet">
            <summary>An intersected street name.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionMessageType.Exit">
            <summary>A signpost exit.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsDistanceTextUnits">
            <summary>Supported units of distance.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsDistanceTextUnits.Imperial">
            <summary>A imperial distance units.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsDistanceTextUnits.Metric">
            <summary>A metric distance units.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsStyle">
            <summary>The network directions output type.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsStyle.Desktop">
            <summary>The driving directions generated by this style are good for desktop/printing apps.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsStyle.Navigation">
            <summary>The driving directions generated by this style are good for navigation applications.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.DirectionsStyle.Campus">
            <summary>The driving directions generated by this style are good for campus routing.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources.#ctor(System.String)">
            <summary>Creates a localized resources object.</summary>
             <param name="language">Directions language string (i.e. en-US)</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources.TryGetSupportedLanguage(System.String)">
            <summary>
            Return "language" if supported. If not - uses fallback logic to get appropriate language;
            if nothing found again, returns null.
            The language is searched by CLR (parameter tryParent must be true).
            Each language should contain string "Resources_Language", because there is no way to determine
            returned ResourceSet (parent language can be returned).
            </summary>
            <param name="language">Language code</param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources.RuntimeCoreNet#GeneratedWrappers#ICoreCallback_LocalizedResources_GetCurrentDecimalSeparator#GetCurrentDecimalSeparator(RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource)">
            <summary>Get current decimal separator callback.</summary>
            <remarks>
             The callback should return a decimal separator string according to current locale settings. This is used 
             by driving directions engine and navigation component to format distance strings.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources.RuntimeCoreNet#GeneratedWrappers#ICoreCallback_LocalizedResources_GetCurrentLanguage#GetCurrentLanguage(RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource)">
            <summary>Get current language callback.</summary>
            <remarks>
             The callback should return a string using language identifier retrieved from corresponding list of
             supported language identifiers.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources.RuntimeCoreNet#GeneratedWrappers#ICoreCallback_LocalizedResources_GetSupportedLanguages#GetSupportedLanguages(RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource)">
            <summary>Get supported languages callback.</summary>
            <remarks>
             The callback should return at least one language id in form "ll-CC" where "ll" is a language identifier
              and "CC" is a country identifier.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocationStatus">
            <summary>Status regarding the network location associated with a stop.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocationStatus.NotLocated">
            <summary>A not located status.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocationStatus.OnClosest">
            <summary>Located on closest network element.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocationStatus.OnClosestNotRestricted">
            <summary>Located on closest network element which is not restricted.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocationStatus.NotReached">
            <summary>The network location can't be arrived at by the solver.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkAnalystResources.#ctor(Esri.ArcGISRuntime.Tasks.NetworkAnalyst.LocalizedResources)">
            <summary>Creates a network analyst resources object.</summary>
            <param name="localizedResources">The localized resources.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkAnalystResources.RuntimeCoreNet#GeneratedWrappers#ICoreCallback_NetworkAnalystResources_LoadSolveMessage#LoadSolveMessage(RuntimeCoreNet.GeneratedWrappers.CoreString,RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition,RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters,RuntimeCoreNet.GeneratedWrappers.CoreArray,RuntimeCoreNet.GeneratedWrappers.CoreArray,RuntimeCoreNet.GeneratedWrappers.CoreArray,RuntimeCoreNet.GeneratedWrappers.CoreArray,RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource)">
            <summary>
            Routing from core makes this callback. The purpose is to return a string generated based on
            input parameters. These strings are part of messages in the RouteResult.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkLocation">
            <summary>References a specific location/position along a transportation network source feature.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkLocation.#ctor">
            <summary>Creates a network location instance.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkLocation.OnRightSideOfSource">
            <summary>Gets or sets the on right side of source flag.</summary>
            <remarks>
             Returns True if network element is on the right side of the network source, false - otherwise.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkLocation.SourceName">
            <summary>Gets or sets the name of the network source.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.NetworkLocation.SourceObjectPosition">
            <summary>Gets source object position.</summary>
            <remarks>Returns the position of network element on network source.</remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier">
            <summary>A point barrier object used to restrcit route solving.</summary>
            <remarks>
             A class that represents a point location to be avoided (or penalized) by a route. PointBarrier may represent a
             restricted location to be avoided by a route (e.g., a car accident) or a location at which some additional 
             delay occurs if visited along a route (e.g., a railroad crossing). 
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>Creates a point barrier instance.</summary>
            <param name="point">A MapPoint.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.CurbApproach">
            <summary>Gets or sets the point barrier's curb approach.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.Geometry">
            <summary>Gets the point barrier's geometry.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.LocationStatus">
            <summary>Gets location status.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.Type">
            <summary>Gets or sets the point barrier's type.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.GetAddedCost(System.String)">
            <summary>Gets added cost.</summary>
            <remarks>
             Get the amount of additional cost that has been added for a particular attribute on this barrier. If no 
             cost has been added, or an incorrect name is specified, a value of zero will be returned.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
            <returns>
            A <see cref="T:System.Double"/> value of the additional cost. 
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier.SetAddedCost(System.String,System.Double)">
            <summary>Sets added cost.</summary>
            <remarks>
             Set the amount of additional cost for an attribute by name. Any additional cost, e.g. Minutes, TravelTime,
             Kilometers, can be modified with this method.
            </remarks>
            <param name="addedCost">The added cost.</param>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier">
            <summary>A polygon barrier object is used to restrict route solving.</summary>
            <remarks>
             A class that represents a polygon feature to be avoided (or penalized) by a route. Polygon_barrier may represent a
             regional area of interest within the network to be avoided (i.e., not entered) by a route (e.g., a flood zone) or 
             to penalize/delay a route within any portions of the area traversed by the route (e.g., a busy downtown area or a 
             bad neighborhood). 
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier.#ctor(Esri.ArcGISRuntime.Geometry.Polygon)">
            <summary>Creates a polygon barrier instance.</summary>
            <param name="polygon">A Polygon.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier.Geometry">
            <summary>Gets the polygon barrier's geometry.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier.Type">
            <summary>Gets or sets the polygon barrier's type.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier.GetScaleFactorForCost(System.String)">
            <summary>Gets scale factor for cost.</summary>
            <param name="attributeName">The name of attribute.</param>
            <returns>
            A <see cref="T:System.Double"/> value for the scale factor. 
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier.SetScaleFactorForCost(System.String,System.Double)">
            <summary>Sets scale factor for cost.</summary>
            <param name="attributeName">The name of attribute.</param>
            <param name="addedCost">The added cost.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier">
            <summary>A polyline barrier is used to restrict route solving.</summary>
            <remarks>
             A class that represents a linear feature to be avoided (or penalized) by a route. Polyline_barrier may 
             represent a linear feature (e.g., a subpath in the network) to be avoided (i.e., not crossed or followed) 
             by a route or to penalize/delay a route along any portions of the feature traversed by the route (e.g., a 
             stretch of interstate with temporarily reduced speed limits due to local construction along an adjacent lane).
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier.#ctor(Esri.ArcGISRuntime.Geometry.Polyline)">
            <summary>Creates a polyline barrier instance.</summary>
            <param name="polyline">A Polyline.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier.Geometry">
            <summary>Gets the polyline barrier's geometry.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier.Type">
            <summary>Gets or sets the polyline barrier's type.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier.GetScaleFactorForCost(System.String)">
            <summary>Gets scale factor for cost.</summary>
            <param name="attributeName">The name of attribute.</param>
            <returns>
            A <see cref="T:System.Double"/> value for the scale factor. 
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier.SetScaleFactorForCost(System.String,System.Double)">
            <summary>Sets scale factor for cost.</summary>
            <param name="attributeName">The name of attribute.</param>
            <param name="addedCost">The added cost.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RestrictionAttribute">
            <summary>
            Represents an attribute to be used as a restriction in the analysis. 
            Use this to specify which restrictions should be honored by the analysis when finding the best route. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RestrictionAttribute.ParameterValues">
            <summary>Gets the cost attributes parameters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RestrictionAttribute.RestrictionUsageParameterName">
            <summary>Gets restriction usage parameter name.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route">
            <summary>Class holding the information for a single route.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.DirectionManeuvers">
            <summary>Gets the list of turn-by-turn directions for this route.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.LocalStartTime">
            <summary>Gets local start time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.LocalEndTime">
            <summary>Gets local end time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.RouteGeometry">
            <summary>Gets the geometry for the full route (polyline).</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.RouteName">
            <summary>Gets route's name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.Stops">
            <summary>Gets the collection of output stops.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.TotalLength">
            <summary>Gets total route length in meters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.TotalTime">
            <summary>Gets route total time.</summary>
            <remarks>
             This includes any travel time, time spent waiting at stops (arriving before the start of a time window), 
             and service time at stops.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.TravelTime">
            <summary>Gets total travel time.</summary>
            <remarks>This includes only time of the travel.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.ViolationTime">
            <summary>Gets the total amount of additional time incurred due to time window violations.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.WaitTime">
            <summary>Gets the total amount of additional time incurred due to waiting at time windows.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Route.GetCost(System.String)">
            <summary>Gets the associated cost for this attribute name.</summary>
            <param name="attributeName">The name of the attribute name e.g. "Minutes" or "TravelTime".</param>
            <returns>
            A <see cref="T:System.Double"/> value of the cost. 
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters">
            <summary>
            Represents parameters used when performing route analysis.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.#ctor">
            <summary>Creates a RouteParameters object.</summary>
            <remarks>
            This method creates an empty RouteParameters object. To create a RouteParameters object with valid default 
            values for a specific dataset use the RouteTask.GenerateDefaultParametersAsync method.
             </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.AccumulateAttributeNames">
            <summary>Gets accumulate attribute names.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.DirectionsDistanceUnits">
            <summary>Gets or sets the directions distance text units.</summary>
            <remarks>
             Describes the unit of measurement for the length of directions.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.DirectionsLanguage">
            <summary>Gets or sets the directions language.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.DirectionsStyle">
            <summary>Gets or sets directions style.</summary>
            <remarks>
             The directions setting to generate directions desinged for different kind of applications.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.FindBestSequence">
            <summary>Gets or sets the find best sequence flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.LocalStartTime">
            <summary>Gets or sets local start time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.OutputSpatialReference">
            <summary>Gets or sets the output spatial reference.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.PreserveFirstStop">
            <summary>Gets or sets the preserve first stop flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.PreserveLastStop">
            <summary>Gets or sets the preserve last stop flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnDirections">
            <summary>Gets or sets the return directions flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnPointBarriers">
            <summary>Gets or sets the return point barriers flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnPolygonBarriers">
            <summary>Gets or sets the return polygon barriers flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnPolylineBarriers">
            <summary>Gets or sets the return polyline barriers flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnRoutes">
            <summary>Gets or sets the return routes flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnStops">
            <summary>Gets or sets the return stops flag.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.RouteShapeType">
            <summary>Gets or sets the route shape type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.TravelMode">
            <summary>Gets or sets the travel mode.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ClearPointBarriers">
            <summary>Clears point barriers.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ClearPolygonBarriers">
            <summary>Clears polygon barriers.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ClearPolylineBarriers">
            <summary>Clears polyline barriers.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ClearStops">
            <summary>Clears stops.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.GetSearchWhereClause(System.String)">
            <summary>Gets search where clause.</summary>
            <param name="sourceName">The name of source.</param>
            <returns>
            A <see cref="T:System.String"/> value of the search where clause.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetSearchWhereClause(System.String,System.String)">
            <summary>Sets search where clause.</summary>
            <param name="sourceName">The name of source.</param>
            <param name="searchWhereClause">The search where clause.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPointBarriers(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PointBarrier})">
            <summary>Sets point barriers.</summary>
            <param name="pointBarriers">The point barriers.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPointBarriersWithFeatureTable(Esri.ArcGISRuntime.Data.ArcGISFeatureTable,Esri.ArcGISRuntime.Data.QueryParameters)">
            <summary>Sets point barriers with feature table.</summary>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPolygonBarriers(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolygonBarrier})">
            <summary>Sets polygon barriers.</summary>
            <param name="polygonBarriers">The polygon barriers.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPolygonBarriersWithFeatureTable(Esri.ArcGISRuntime.Data.ArcGISFeatureTable,Esri.ArcGISRuntime.Data.QueryParameters)">
            <summary>Sets polygon barriers with feature table.</summary>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPolylineBarriers(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Tasks.NetworkAnalyst.PolylineBarrier})">
            <summary>Sets polyline barriers.</summary>
            <param name="lineBarriers">The polyline barriers.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetPolylineBarriersWithFeatureTable(Esri.ArcGISRuntime.Data.ArcGISFeatureTable,Esri.ArcGISRuntime.Data.QueryParameters)">
            <summary>Sets polyline barriers with feature table.</summary>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetStops(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop})">
            <summary>Sets stops.</summary>
            <param name="stops">The stops.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.SetStopsWithFeatureTable(Esri.ArcGISRuntime.Data.ArcGISFeatureTable,Esri.ArcGISRuntime.Data.QueryParameters)">
            <summary>Sets stops with feature table.</summary>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult">
            <summary>Represents the route result.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.DirectionsLanguage">
            <summary>Returns directions language.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.Messages">
            <summary>Returns messages.</summary>
            <remarks>
             Messages received when solve is completed. If a route cannot be solved, the message returned by the
             server identifies the route that could not be solved.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.PointBarriers">
            <summary>Returns point barriers.</summary>
            <remarks>
             Barriers are only returned if the ReturnPointBarriers property of RouteParameters is true.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.PolygonBarriers">
            <summary>Returns polygon barriers.</summary>
            <remarks>
             Barriers are only returned if the ReturntPolygonBarriers property of RouteParameters is true.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.PolylineBarriers">
            <summary>Returns polyline barriers.</summary>
            <remarks>
             Barriers are only returned if the ReturntPolylineBarriers property of RouteParameters is true.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult.Routes">
            <summary>Returns routes.</summary>
            <remarks>
             Each object represents a separate route with independent driving directions.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteShapeType">
            <summary>
            Indicates the route shape type. This parameter is applicable only if <see cref="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnRoutes"/>
            is set to true.
            </summary>
            <remarks>
            <para>
            No matter which value you choose for the RouteShapeType parameter, the best route is always determined by 
            minimizing the travel time or the travel distance, never using the Euclidean distance (or as the crow flies 
            distance) between the stops. This means that only the returned route shapes are different, not the underlying 
            streets that are searched when finding the route.
            </para>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteShapeType.None">
            <summary>
            Do not return any shapes for the routes. 
            This value can be useful in cases where you are only interested in determining the total travel time or 
            travel distance of the route. For example, if your application has already calculated the route and after 
            some time your application needs to only calculate the expected time of arrival (ETA) to the destination, 
            you can set the <see cref="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.ReturnRoutes"/> parameter to true and the RouteShapeType 
            parameter to None. 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteShapeType.StraightLine">
            <summary>Return a straight line between the stops.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteShapeType.TrueShapeWithMeasures">
            <summary>
            Return the exact shape of the resulting route that is based on the underlying streets and include route 
            measurements that keep track of the cumulative travel time or travel distance along the route relative to 
            the first stop. When this value is chosen for the RouteShapeType parameter, each point that makes up the 
            route shape will include an M value along with X and Y values. The M value, also known as a measure value, 
            indicates the accumulated travel time or travel distance at that point along the route. The M values can 
            be used to determine how far you have traveled from the start of the route or the remaining distance or 
            time left to reach the destination. The M values store travel time if the 
            <see cref="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.AccumulateAttributeNames"/> is set to TravelTime and store the travel distance
            if the <see cref="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters.AccumulateAttributeNames"/> is set to Kilometers or Miles.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask">
            <summary>
            Class for route tasks (online and local).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.#ctor(System.Uri)">
            <summary>Creates a route task with an online URI.</summary>
            <param name="serviceUri">A URI to the online routing services.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.#ctor(System.String,System.String)">
            <summary>Creates a route task with a path to geodatabase.</summary>
            <param name="pathToDatabase">A path to geodatabase.</param>
            <param name="networkName">A network name.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.#ctor(Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset)">
            <summary>Creates a route task with a transportation network dataset.</summary>
            <param name="transportationNetwork">A Transportation Network Dataset</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.CreateAsync(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>Creates a route task from an online URI.</summary>
            <param name="serviceUri">A URI to the online routing services.</param>
            <param name="credential">The security credential for the online routing service.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.CreateAsync(System.String,System.String)">
            <summary>Creates a route task from a local geodatabase.</summary>
            <param name="pathToDatabase">A file path to a geodatabase.</param>
            <param name="networkName">A network name.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.CreateAsync(Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TransportationNetworkDataset)">
            <summary>Creates a route task from a transportation network dataset.</summary>
            <param name="transportationNetwork">A transportation network dataset.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.LoadAsync">
            <summary>Initiates loading of a route task</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.Credential">
            <summary>Gets or sets the security credential used to access a remote task</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this task.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.Uri">
            <summary>Gets the Uri of the route task.</summary>
            <remarks>Returns null if the route task is not associated with an online service.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.TransportationNetworkDataset">
            <summary>Gets the transportation network dataset associated with the route task.</summary>
            <remarks>Returns null if the route task is not associated with a transportation network dataset.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.RouteTaskInfo">
            <summary>Gets route task info. RouteTask must be loaded before accessing this property.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.GenerateDefaultParametersAsync">
            <summary>Generates default parameters for the route task.</summary>
             <returns>
             The task object representing the asynchronous generate default parameters operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters"/> object.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask.SolveRouteAsync(Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteParameters)">
            <summary>Solves a route with the specified parameters.</summary>
             <param name="routeParameters">Parameters to indicate guidelines required when determining the route 
             to each stop.</param>
             <returns>
             The task object representing the asynchronous solve route operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteResult"/> object.
             </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo">
            <summary>A class that describes the transportation network that a route task is bound to.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.AccumulateAttributeNames">
            <summary>Gets accumulate attribute names.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.CostAttributes">
            <summary>Gets cost attributes.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.DefaultTravelModeName">
            <summary>Gets default travel mode's name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.DirectionsDistanceUnits">
            <summary>Gets directions distance text units.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.DirectionsLanguage">
            <summary>Gets directions language.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.DirectionsStyle">
            <summary>Gets directions style.</summary>
            <remarks>
             Gets a directions style. The directions setting to generate directions desinged for different kinds
             of applications.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.FindBestSequence">
            <summary>Gets find best sequence.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.LocalStartTime">
            <summary>Gets local start time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.NetworkName">
            <summary>Gets network name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.OutputSpatialReference">
            <summary>Gets output spatial reference.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.PreserveFirstStop">
            <summary>Gets preserve first stop.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.PreserveLastStop">
            <summary>Gets preserve last stop.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.RestrictionAttributes">
            <summary>Gets restriction attributes.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.RouteShapeType">
            <summary>Gets route shape type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.SupportedLanguages">
            <summary>Gets array of supported languages.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.SupportedRestrictionUsageParameterValues">
            <summary>Gets array of supported restriction usage parameter values.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTaskInfo.TravelModes">
            <summary>Gets array of travel modes.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.SourceObjectPosition">
            <summary>A class that represents a position of network element on network source.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.SourceObjectPosition.#ctor(System.Int32,System.Int64,System.Double)">
            <summary>Creates a source object position instance.</summary>
            <param name="sourceIndex">A source instance.</param>
            <param name="sourceOid">A source OID.</param>
            <param name="position">A position.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.SourceObjectPosition.Position">
            <summary>Gets or sets the position.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.SourceObjectPosition.SourceIndex">
            <summary>Gets or sets the source index.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.SourceObjectPosition.SourceObjectId">
            <summary>Gets or sets the source object ID.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop">
            <summary>A class that represents a location to be visited along a route.</summary>
            <remarks>
             The Stop class contains location inputs for the Route_task. The Route_task will create a route between two or
             more Stops. A Stop object is not an arbitrary bag of properties, but contains only the properties needed for 
             routing (for example, a Stop object does not have address information).
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>Creates a stop instance with a point.</summary>
            <param name="point">A MapPoint.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.ArrivalCurbApproach">
            <summary>Gets arrival curb approach.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.CurbApproach">
            <summary>Gets or sets curb approach.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.CurrentBearing">
            <summary>Gets or sets current bearing in degrees.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.CurrentBearingTolerance">
            <summary>Gets or sets the current bearing tolerance in degrees.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.DepartureCurbApproach">
            <summary>Gets departure curb approach.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.DistanceToNetworkLocation">
            <summary>Gets distance to network location in meters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.Geometry">
            <summary>Gets the stop's point geometry.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.LocalArrivalTime">
            <summary>Gets the stop's local arrival time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.LocalDepartureTime">
            <summary>Gets the stop's local departure time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.LocalTimeWindowStart">
            <summary>Gets or sets local time window start.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.LocalTimeWindowEnd">
            <summary>Gets or sets local time window end.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.LocationStatus">
            <summary>Gets location status.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.Name">
            <summary>Gets or sets the stop name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.NavigationLatency">
            <summary>Gets or sets the navigation latency in seconds.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.NavigationSpeed">
            <summary>Gets or sets the navigation speed in meters per second.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop._networkLocation">
            <summary>Gets or sets the network location.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.NetworkLocation">
            <summary>Gets the network location.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.RouteName">
            <summary>Gets or sets the route name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.Sequence">
            <summary>Gets sequence.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.ViolationTime">
            <summary>Gets violation time.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.WaitTime">
            <summary>Gets wait time.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.GetAddedCost(System.String)">
            <summary>Gets added cost.</summary>
            <remarks>
             Get the amount of additional cost that has been added for a particular attribute on this Stop. If no cost 
             has been added, or an incorrect name is specified, a value of zero will be returned.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
            <returns>
            A <see cref="T:System.Double"/> value of the additional cost. 
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.SetAddedCost(System.String,System.Double)">
            <summary>Sets added cost.</summary>
            <remarks>
             Set the amount of additional cost for an attribute by name. Any additional cost, e.g. Minutes, TravelTime,
             Kilometers, can be modified with this method.
            </remarks>
            <param name="addedCost">The added cost.</param>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.Stop.GetCumulativeCost(System.String)">
            <summary>Gets the cumulative cost attribute value.</summary>
            <param name="attributeName">The name of cumulative attribute.</param>
            <returns>
            A <see cref="T:System.Double"/> value of the cumulative cost. 
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode">
            <summary>
            Class that defines a NetworkAnalyst travel mode
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.#ctor">
            <summary>Creates an empty TravelMode object.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.AttributeParameterValues">
            <summary>Gets the attribute parameter values.</summary>
            <remarks>
             Gets the attribute parameter values e.g. Vehicle Weight, Vehicle Height, etc. Attribute parameter values are useful for
             customizing individual restrictions ("Don't travel on a roads weight limits below 6 tons").
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.Description">
            <summary>Gets or sets the travel mode's description.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.DistanceAttributeName">
            <summary>Gets or sets the distance attribute name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.ImpedanceAttributeName">
            <summary>Gets or sets the impedance attribute name.</summary>
            <remarks>
             This is the attribute that the route will be optimized for e.g. "TravelTime" or "Distance".
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.Name">
            <summary>Gets or sets the travel mode's name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.OutputGeometryPrecision">
            <summary>Gets or sets output geometry precision in meters.</summary>
            <remarks>
             Gets output geometry precision in meters. Precision is useful for reducing the response size while 
             sacrificing route shape quality.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.RestrictionAttributeNames">
            <summary>Gets restriction attribute names.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.TimeAttributeName">
            <summary>Gets or sets the time attribute name.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.Type">
            <summary>Gets or sets the travel mode's type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.UTurnPolicy">
            <summary>Gets or sets the uturn policy.</summary>
            <remarks>
             Returns the enumeration value for the u-turn policy e.g. no u-turns, u-turns at stops, etc.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.TravelMode.UseHierarchy">
            <summary>Gets or sets the solver hierarchy setting.</summary>
            <remarks>
             A hierarchical solve tends to prefer higher-order streets such a freeways.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.UTurnPolicy">
            <summary>
            Indicates the u-turn policy. Use this to restrict or permit the route from making U-turns at junctions.
            </summary>
            <remarks>
            In order to understand the parameter values, keep in mind that a junction is a point where only two streets 
            intersect each other. If three or more streets intersect at a point, it is called as an intersection. 
            The end of a culs-de-sac is deemed to be a dead-end.
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.UTurnPolicy.NotAllowed">
            <summary>
            U-turns are prohibited at all junctions, intersections and dead-ends. 
            Note that even when this parameter value is chosen, the route can still make U-turns at stops. 
            If you wish to prohibit U-turns even at the stops, you can set the appropriate value for the CurbApproach 
            attribute of the stops.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.UTurnPolicy.AllowedAtDeadEnds">
            <summary>
            U-turns are prohibited at all junctions and intersections and are permitted only at dead ends.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.UTurnPolicy.AllowedAtIntersections">
            <summary>Allow backtracking at intersections.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.UTurnPolicy.AllowedAtDeadEndsAndIntersections">
            <summary>Allow backtracking ad dead ends and intersections.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheJob">
            <summary>
            A job that exports a tile cache from a service.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.EstimateTileCacheSizeJob">
            <summary>
            A job that estimates the size of a tile cache from a service.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseJob">
            <summary>
            Represents a job that synchronizes changes to a local geodatabase back to a feature service.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseJob">
            <summary>
            A job that requests a feature service to generate a geodatabase file to be downloaded for off-line use.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters">
            <summary>
            Parameters for an export tile cache operation
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters.#ctor">
            <summary>Creates a new export tile cache parameters instance.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters.AreaOfInterest">
            <summary>Gets or sets the area of interest geometry.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters.CompressionQuality">
            <summary>Gets or sets the compression quality.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters.LevelIds">
            <summary>Gets a mutable list of levels of detail indicies.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheSizeEstimate">
            <summary>
            Results of an export tile cache size estimate job
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheSizeEstimate.FileSize">
            <summary>Get the value of the fileSize property</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheSizeEstimate.TileCount">
            <summary>Get the value of the tileCount property</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask">
            <summary>
            Task for generating and downloading tile caches from an ArcGIS Server Map Service
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.#ctor(Esri.ArcGISRuntime.ArcGISServices.ArcGISMapServiceInfo)">
            <summary>Creates an export tile cache task from an ArcGISMapServiceInfo instance.</summary>
            <remarks>The map service must support tile cache export.</remarks>
            <param name="mapServiceInfo">The ArcGISMapServiceInfo of an ArcGIS REST service that supports tile cache export.</param>
            <returns>
            The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.#ctor(System.Uri)">
            <summary>Creates an export tile cache task from a map service Uri</summary>
            <remarks>The map service must support tile cache export.</remarks>
            <param name="serviceUri">The Uri of an ArcGIS REST service that supports tile cache export.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.Credential">
            <summary>Gets or sets the security credential used to access a remote task</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this task.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.MapServiceInfo">
            <summary>Gets the ArcGISMapServiceInfo object associated with this task.</summary>
            <remarks>
             If created with a service Uri, this property will be populated after the task has been used
             to estimate or export a tile cache. Before then, null will be returned.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.Uri">
            <summary>Gets the map service Uri associated with this task.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.CreateExportTileCacheParametersAsync(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,System.Double)">
            <summary>Creates and returns new export tile cache parameters instance.</summary>
            <remarks>
             A value of 0 specified for either scale parameter will include all LODs down to the min/max LOD scale.
             For example: a minScale of 10,000 and a maxScale of 500 will select LODs between 1:500 and 1:10,000 scale.
             A minScale of 0 and a maxScale of 500 will select LODs below 1:500 scale. A minScale of 10,000 and a 
             maxScale of 0 will select LODs above 1:10,000 scale.
            </remarks>
            <param name="areaOfInterest">A geometry specifying the area to be exported.</param>
            <param name="maxScale">The map scale '1:maxScale' below which LODs should be exported</param>
            <param name="minScale">The map scale '1:minScale' above which LODs should be exported</param>
             <returns>
             A <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters"/> object.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.EstimateTileCacheSize(Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters)">
            <summary>Start and return a new estimate tile cache size job.</summary>
            <param name="parameters">Export tile cache parameters to be used in estimating.</param>
             <returns>
             A task offline job of type <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheSizeEstimate"/>.
             </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheTask.ExportTileCache(Esri.ArcGISRuntime.Tasks.Offline.ExportTileCacheParameters,System.String)">
            <summary>Start and return a new export tile cache job.</summary>
            <param name="downloadFilePath">Downloaded tile cache file path.</param>
            <param name="parameters">Export tile cache parameters to be used in exporting.</param>
             <returns>
             A task offline job of type <see cref="T:Esri.ArcGISRuntime.Mapping.TileCache"/>.
             </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption">
            <summary>
            This can be used in conjunction with <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters"/> object to specify per layer synchronization options.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption" /> class.
            </summary>
            <param name="layerID">A layer id to sync.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.#ctor(System.Int64,Esri.ArcGISRuntime.Tasks.Offline.SyncDirection)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption" /> class.
             </summary>
            <param name="layerID">A layer id to sync.</param>
            <param name="syncDirection">the direction to sync the layer.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.LayerID">
             <summary>
             Gets or sets the layer or table ID to specify sync direction.
             </summary>
            <remarks>
             The IDs used here must match IDs used in synchronized geodatabase. If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.SyncDirection">
            <summary>The sync direction for the specified layer Id</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption.Clone">
            <summary>
            Clones this instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption"/> and its members.
            </summary>
            <returns>A copy of the the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption"/>.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.SyncDirection">
            <summary>
            The direction to synchronize as part of geodatabase sync task.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncDirection.None">
            <summary>
            There is no specified sync direction.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncDirection.Download">
            <summary>
            The geodatabase changes are downloaded only.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncDirection.Upload">
            <summary>
            The geodatabase changes are uploaded only.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncDirection.Bidirectional">
            <summary>
            The geodatabase changes are both uploaded and downloaded.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters">
            <summary>
            Represents the parameters to <see cref="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.SyncGeodatabase(Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters,Esri.ArcGISRuntime.Data.Geodatabase)"/> method on a <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters.GeodatabaseSyncDirection">
            <summary>
            Gets or sets the synchronization direction that will be used when synchronizing the geodatabase.
            </summary>
            <remarks>
             This is only used if the Geodatabase has a <see cref="F:Esri.ArcGISRuntime.Tasks.Offline.SyncModel.Geodatabase"/>, it is ignored for <see cref="F:Esri.ArcGISRuntime.Tasks.Offline.SyncModel.Layer"/>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters.LayerOptions">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncLayerOption"/> which identifies sync layer options to include in the sync operation.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters.RollbackOnFailure">
            <summary>
            Gets or sets a value indicating whether a sync should roll back on a failure.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.JobMessage">
            <summary>
            Represents a message from a job.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.JobMessage.Message">
            <summary>
            Gets the job message's message string.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.JobMessage.Type">
            <summary>
            Gets the job message's type string.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.JobStatus">
            <summary>
            The different states of a job.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.JobStatus.NotStarted">
            <summary>
            A job that has not started
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.JobStatus.Started">
            <summary>
            A job that has started and is executing
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.JobStatus.Paused">
            <summary>
            A job that is paused</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.JobStatus.Succeeded">
            <summary>
            A job that has completed successfully
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.JobStatus.Failed">
            <summary>
            A job that has completed and has failed
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.Job`1">
            <summary>
            Represents a job represents a long running asynchronous action.
            </summary>
            <typeparam name="T">Generic task type.</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Credential">
            <summary>Gets or sets the security credential used to access a remote service</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this service.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.JobID">
            <summary>
            Gets the ID of the job.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Messages">
            <summary>Returns the job's messages.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Error">
            <summary>
            Gets the an error if one occurred on the job. 
            If no error has occurred then null is returned.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.Job`1.GetResultAsync">
            <summary>
            Returns the result of a job.
            </summary>
            <returns>
            The task object representing the asynchronous get result operation. The value of the task result is a T object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.ServerJobID">
            <summary>
            Gets the server job ID of the job.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Status">
            <summary> 
            Gets the status of the job.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Cancel">
            <summary>
            Cancels the job
            </summary>
            <returns>
            <c>false</c> if already canceled or cannot be cannot be canceled; otherwise, <c>true</c>.
             The job is canceled, which sets <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Status"/> to failed. Jobs on the server cannot be canceled and are abandoned.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Pause">
            <summary>
            Pauses the job.
            </summary>
            <returns>
            <c>false</c> if already paused or cannot be paused; otherwise, <c>true</c>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Start">
            <summary>
            Starts or resumes the job.
            </summary>
            <returns>
            <c>false</c> if already running or cannot be started or resumed; otherwise, <c>true</c>.
            </returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Tasks.Offline.Job`1.JobChanged">
            <summary>
            Occurs when the <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Status"/> and <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.Job`1.Messages"/> changed.
            </summary>
            <remarks>
            Could be raised by a background thread.
            </remarks> 
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption">
            <summary>
            This can be used in conjunction with <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters"/> object to refine per layer what features are replicated.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption" /> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption" /> class.
            </summary>
            <param name="layerID">A layer id in the service</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.#ctor(System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption" /> class.
            </summary>
            <param name="includeRelated">Indicates if related rows should be included</param>
            <param name="layerID">A layer id in the service</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption" /> class.
            </summary>
            <param name="layerID">A layer id in the service</param>
            <param name="whereClause">a where clause to apply to the layer</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.IncludeRelated">
             <summary>
             Gets or sets a value indicating whether only related rows are added to the specific <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.LayerID"/> in the generated geodatabase.</summary>
            <remarks>
             This property is only applicable if your data has relationship classes. Set this on a table that is related to by other
             layers or tables to restrict it to just the rows to just those used in relationships. If this is true then other
             properties are ignored <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.WhereClause"/> and <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.UseGeometry"/>. Returns false if there's an error.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.LayerID">
             <summary>
             Gets or sets the layer or table ID to further filter in the generated geodatabase.
             </summary>
            <remarks>
             The IDs used here must match IDs used in geodatabase sync task layer ids Only layers that need further refining need to
             be included. If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.UseGeometry">
             <summary>
             Gets or sets a value indicating whether Extent is used to filter the features for downloading.
             </summary>
            <remarks>
             The default is true. Setting this to false, with no where clause, will retrieve all features. 
             This is ignored if <see cref="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.IncludeRelated"/> is true. Returns false if there's an error.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.WhereClause">
            <summary>
            Gets or sets the where clause of the layer option.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption.Clone">
            <summary>
            Clones this instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption"/> and its members.
            </summary>
            <returns>A copy of the the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption"/>.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.SyncModel">
            <summary>
            The various types of sync models.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncModel.None">
            <summary>
            The geodatabase is not sync enabled.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncModel.Geodatabase">
            <summary>
            The whole Geodatabase must be synchronized together.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.SyncModel.Layer">
            <summary>
            Layers and tables within the geodatabase can be synchronized independently.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.AttachmentSyncDirection">
            <summary>
            The direction to synchronize attachments as part of geodatabase sync task.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.AttachmentSyncDirection.None">
            <summary>
            There is no specified attachment sync direction
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.AttachmentSyncDirection.Upload">
            <summary>
            The attachment changes are uploaded only.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Tasks.Offline.AttachmentSyncDirection.Bidirectional">
            <summary>
            The attachment changes are both uploaded and downloaded.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters">
            <summary>
            Represents the parameters to a generate method on a geodatabase sync task.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters" /> class.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.AttachmentSyncDirection">
            <summary>
             Gets or sets the direction for attachments to be synchronized.
            </summary>
            	<see cref="T:Esri.ArcGISRuntime.Tasks.Offline.AttachmentSyncDirection"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.Extent">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used to intersect the features in the service to replicate into the geodatabase.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> used to intersect the features in the service to replicate into the geodatabase.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.LayerOptions">
            <summary>
            Gets a mutable list of <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateLayerOption"/> which identifies layers and tables to include in the geodatabase if the sync model is layer.
            </summary>
            <remarks>
            For a per layer sync model, this must be populated with minimum of one valid layer id. For valid layers and tables 
            <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.FeatureLayerInfos"/> and  <see cref="P:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo.TableInfos"/>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.OutSpatialReference">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> used for the generated geodatabase.
            </summary>
            <value>The  <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> used for the generated geodatabase.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.ReturnAttachments">
            <summary>
            Gets or sets a value indicating whether attachments are added to the geodatabase.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters.SyncModel">
            <summary>
            Gets or sets the synchronization model that will be used generate a geodatabase.
            </summary>
            <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncModel"/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask">
            <summary>
            Task for generating geodatabase caches from an ArcGIS Server FeatureService.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask" /> class.
            </summary>
            <param name="source">The service URI.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.#ctor(Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask" /> class.
            </summary>
            <param name="featureServiceInfo">A feature service info with sync capabilities.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.Uri">
            <summary>
            Gets the uri of the feature service to synchronize with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.Credential">
            <summary>Gets or sets the security credential used to access a remote task</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this task.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.FeatureServiceInfo">
            <summary>
            Returns the <see cref="T:Esri.ArcGISRuntime.ArcGISServices.ArcGISFeatureServiceInfo"/> that represents the feature service to synchronize with.
            </summary>
            <remarks>
            If task is created with a service Uri, this property will be populated after creating default parameters. 
            Otherwise, it will remain null.
            <see cref="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.CreateDefaultGenerateGeodatabaseParametersAsync"/>
            <see cref="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.CreateDefaultSyncGeodatabaseParametersAsync(Esri.ArcGISRuntime.Data.Geodatabase)"/>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.GenerateGeodatabase(Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters,System.String)">
            <summary>
            Starts a generate geodatabase job based on the supplied parameters.
            </summary>
            <param name="parameters">The parameters for generate geodatabase.</param>
            <param name="pathToGeodatabaseFile">path to where to write the geodatabase</param>
            <returns>
            A task offline job of type <see cref="T:Esri.ArcGISRuntime.Data.Geodatabase"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.SyncGeodatabase(Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters,Esri.ArcGISRuntime.Data.Geodatabase)">
            <summary>
            Starts a sync of a geodatabase with the requested parameters.
            </summary>
            <param name="geodatabase">The geodatabase to sync</param>
            <param name="parameters">Parameters to use to sync the geodatabase</param>
            <returns>
            A task offline job containing a read-only collection of type <see cref="T:Esri.ArcGISRuntime.Data.SyncLayerResult"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.CreateDefaultGenerateGeodatabaseParametersAsync">
            <summary>
            Creates default parameters for a generate geodatabase.
            </summary>
            <returns>A task that represents the asynchronous create default generate geodatabase parameters operation.
            The value of the TResult parameter is the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.GenerateGeodatabaseParameters"/></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.CreateDefaultSyncGeodatabaseParametersAsync(Esri.ArcGISRuntime.Data.Geodatabase)">
            <summary>
            Creates default parameters for a sync geodatabase.
            </summary>
            <param name="geodatabase">A geodatabase to sync</param>
            <returns>A task that represents the asynchronous create default sync geodatabase parameters operation.
            The value of the TResult parameter is the <see cref="T:Esri.ArcGISRuntime.Tasks.Offline.SyncGeodatabaseParameters"/></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.UnregisterGeodatabaseAsync(Esri.ArcGISRuntime.Data.Geodatabase)">
            <summary>
            Unregisters a geodatabase from a service removing the services replica ID.
            </summary>
            <param name="geodatabase">A geodatabase to unregister</param>
            <returns>A task that represents the asynchronous unregister geodatabase operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.RegisterGeodatabaseAsync(Esri.ArcGISRuntime.Data.Geodatabase)">
            <summary>Registers a copy of a sync enabled geodatabase with a service so the copy can sync to the service.</summary>
            <remarks>
              The local geodatabase file is typically a copy of another original geodatabase file. The original geodatabase must
              already be known to the service and have a replica ID. A successful register will give the local geodatabase it's own
              replica ID and separate it from the original. It can then be synchronized with the service to receive updates. After
              taking copies of the original database, do not sync changes to the original until all copies have been registered. This
              operation is not related to <see cref="M:Esri.ArcGISRuntime.Tasks.Offline.GeodatabaseSyncTask.UnregisterGeodatabaseAsync(Esri.ArcGISRuntime.Data.Geodatabase)"/> which removes the geodatabase from the
              service.
            </remarks>
            <param name="geodatabase">a geodatabase to register.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters">
            <summary>A class that describes geocode method parameters.</summary>
            <remarks>
             Class holding the parameters to support the geocode operation for a geocoding service or local locator.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.#ctor">
            <summary>Creates a new ReverseGeocodeParameters instance.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.FeatureTypes">
            <summary>Gets a mutable list of feature type strings for which addresses should be returned.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.IsForStorage">
            <summary>Gets or sets the for storage indicator.</summary>
            <remarks>
             Specifies whether the results of the operation will be persisted. The default value is false, which
             indicates the results of the operation cannot be stored. If you store the results, in a database for 
             example, you need to set this parameter to true.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.MaxDistance">
            <summary>
            Gets or sets the maximum distance from the search location in meters where candidates will be searched.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.MaxResults">
            <summary>
             Gets or sets the maximum number of candidates to be returned by a search, up to the
             maximum number allowed by the service. By default all found candiates will be returned.
             The world geocoding service allows up to 20 candidates to be returned for a single request.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.OutputLanguage">
            <summary>Gets or sets the output language.</summary>
            <remarks>Determines the language of returned candidate labels.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.OutputSpatialReference">
            <summary>
             Gets or sets the spatial reference of the returned locations. If not specified, 
             the coordinates of the returned locations will be in the same spatial reference 
             as the service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters.ResultAttributeNames">
            <summary>Gets a mutable list of result attribute names.</summary>
            <remarks>
             Returns a list of candidate attribute names indicating which attributes should be returned for every 
             candidate. Specify an empty list to return only default attributes. An "*" means all attributes will be 
             returned.
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters">
            <summary>A class that describes geocode method parameters.</summary>
            <remarks>
             Class holding the parameters to support the geocode operation for a geocoding service or local locator.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.#ctor">
            <summary>Creates a new geocode parameters object.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.Categories">
            <summary>Gets a mutable list of categories from which addresses should be returned.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.CountryCode">
            <summary>
            Gets or sets a value representing the country. Providing this value increases geocoding speed. Acceptable 
            values include the full country name, the ISO 3166-1 2-digit country code, or the ISO 3166-1 3-digit country 
            code. A list of supported countries and codes is available 
            <a href="https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm" target="_blank">here.</a>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.IsForStorage">
            <summary>Gets or sets the for storage indicator.</summary>
            <remarks>
             Specifies whether the results of the operation will be persisted. The default value is false, which
             indicates the results of the operation cannot be stored. If you store the results, in a database for 
             example, you need to set this parameter to true.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.MaxResults">
            <summary>
             Gets or sets the maximum number of candidates to be returned by a search, up to the
             maximum number allowed by the service. By default all found candiates will be returned.
             The world geocoding service allows up to 20 candidates to be returned for a single request.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.MinScore">
            <summary>Gets or sets the minimum score value.</summary>
            <remarks>Determines the minimal score value (score threshold) [0..100].</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.OutputLanguage">
            <summary>Gets or sets the output language.</summary>
            <remarks>Determines the language of returned candidate labels.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.OutputSpatialReference">
            <summary>
             Gets or sets the spatial reference of the returned locations. If not specified, 
             the coordinates of the returned locations will be in the same spatial reference 
             as the service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.PreferredSearchLocation">
            <summary>Gets or sets the preferred search location.</summary>
            <remarks>The center point of the preferred area where candidates will be searched.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.ResultAttributeNames">
            <summary>Gets a mutable list of attribute names.</summary>
            <remarks>
             Gets a list of attribute names that should be returned for every candidate. 
             Specify an empty list to return only default attributes. An "*" means all attributes will be returned.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters.SearchArea">
            <summary>Gets or sets the geographic area for which searching for locations will be limited to.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult">
            <summary>
            Provides information about geocoded address candidates including address, location, score and attributes.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.Attributes">
            <summary>Gets attributes of the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.DisplayLocation">
            <summary>Gets display location of the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.Extent">
            <summary>Gets the display zoom extent of the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.InputLocation">
            <summary>Gets the input location of the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.Label">
            <summary>Gets a formatted address label for the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.RouteLocation">
            <summary>Gets the route location of the geocode candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult.Score">
            <summary>Gets the match score of the geocode candidate.</summary>
            <remarks>Returns match score in a range between 0 and 1.</remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask">
            <summary>
            Represents a task that enables geocoding and reverse-geocoding against an ArcGIS locator.
            </summary>
            <remarks>
            Geocoding is the process of assigning a location, usually in the form of coordinate values (points), to an 
            address by comparing the descriptive location elements in the address to those present in the reference material. 
            Addresses come in many forms, ranging from the common address format of a house number followed by the street 
            name and succeeding information to other location descriptions such as postal zone or census tract. 
            An address includes any type of information that distinguishes a place. Reverse geocoding is the process of 
            determining the closest address to a location usually given in the form of a coordinate value (point).
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask"/> class.
            </summary>
            <param name="serviceUri">The service URI.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.CreateAsync(System.Uri,Esri.ArcGISRuntime.Security.Credential)">
            <summary>Creates a locator task from an online URI.</summary>
            <param name="serviceUri">A URI to the online locator service.</param>
            <param name="credential">The security access credential for the online locator service.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.LoadAsync">
            <summary>Initiates loading of a locator task</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.Credential">
            <summary>Gets or sets the security credential used to access a remote task</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this task.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.Uri">
            <summary>Gets the Uri of the locator task.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.LocatorInfo">
            <summary>Gets the <see cref="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.LocatorInfo"/> for the service.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(System.String)">
            <summary>Geocodes an address and returns candidates.</summary>
            <remarks>Executes a geocoding operation to find location candidates for a given address.</remarks>
            <param name="searchText">Address input.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(System.String,Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters)">
            <summary>Geocodes an address with parameters and returns candidates.</summary>
            <remarks>Executes a geocoding operation to find location candidates for a given address.</remarks>
            <param name="searchText">Address input.</param>
            <param name="parameters">Geocode method parameters.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Geocodes a multiline address and returns candidates.</summary>
            <remarks>Executes a geocoding operation to find location candidates for a given multiline address.</remarks>
            <param name="searchValues">Multiline address input.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(System.Collections.Generic.Dictionary{System.String,System.String},Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters)">
            <summary>Geocodes a multiline address with parameters and returns candidates.</summary>
            <remarks>Executes a geocoding operation to find location candidates for a given multiline address.</remarks>
            <param name="searchValues">Multiline address input.</param>
            <param name="parameters">Geocode method parameters.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult)">
            <summary>Geocodes an address in a suggest operation result and returns candidates.</summary>
            <remarks>Executes geocoding based on the result of suggestion.</remarks>
            <param name="suggestResult">Suggest method result.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.GeocodeAsync(Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult,Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeParameters)">
            <summary>Geocodes an address in a suggest result with parameters and returns candidates.</summary>
            <param name="suggestResult">Suggest method result.</param>
            <param name="parameters">Geocode parameters.</param>
            <returns>
            The task object representing the asynchronous geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.ReverseGeocodeAsync(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>Finds an address by a location point.</summary>
            <remarks>Executes a reverse-geocoding operation to find address candidates for a given location.</remarks>
            <param name="location">The location point.</param>
            <returns>
            The task object representing the asynchronous reverse geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.ReverseGeocodeAsync(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Tasks.Geocoding.ReverseGeocodeParameters)">
            <summary>Finds an address with parameters by a location point.</summary>
            <remarks>Executes a reverse-geocoding operation to find address candidates for a given location.</remarks>
            <param name="location">The location point.</param>
            <param name="parameters">The reverse geocode parameters.</param>
            <returns>
            The task object representing the asynchronous reverse geocode operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.GeocodeResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.SuggestAsync(System.String)">
            <summary>Suggest possible variants of a given address.</summary>
            <remarks>
             Geocoding suggestions provide a mechanism for allowing character-by-character auto-complete. By passing in
             text entry and an optional location, results can be quickly found for client display purposes. Suggestions
             are not limited to addresses, they can also be used for POIs (Points of Interest).
            </remarks>
            <param name="searchText">Part of address text.</param>
            <returns>
            The task object representing the asynchronous suggest operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask.SuggestAsync(System.String,Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters)">
            <summary>Suggest possible variants of a given address with parameters.</summary>
            <remarks>
             Geocoding suggestions provide a mechanism for allowing character-by-character auto-complete. By passing in
             text entry and an optional location, results can be quickly found for client display purposes. Suggestions
             are not limited to addresses, they can also be used for POIs (Points of Interest).
            </remarks>
            <param name="searchText">Part of address text.</param>
            <param name="parameters">Suggest method parameters.</param>
            <returns>
            The task object representing the asynchronous suggest operation. The value of the task result contains a read-only collection of <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult"/> objects.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo">
            <summary>
            Contains general information about a locator task.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.Description">
            <summary>Gets the description of the locator.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.IntersectionResultAttributes">
            <summary>Gets a list of output locator attributes for intersection geocoding.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.Name">
            <summary>Gets the name of the locator.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.Properties">
            <summary>Gets the properties of the locator task.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.ResultAttributes">
            <summary>Gets a list of output locator attributes for address geocoding.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SearchAttributes">
            <summary>Gets a list of input locator attributes for multiline address geocoding.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SpatialReference">
            <summary>Gets the internal spatial reference of the locator task.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SupportsIntersections">
            <summary>Gets a flag indicating intersection geocoding support.</summary>
            <remarks>Returns true if intersections are supported by the locator task.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SupportsPoi">
            <summary>Gets a flag indicating Point of Interest support.</summary>
            <remarks>Returns true if POI is supported by the locator task.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SupportsPointAddress">
            <summary>Gets a flag indicating support for point address geocoding.</summary>
            <remarks>Returns true if point address is supported by the locator task.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.SupportsSuggestions">
            <summary>Gets a flag indicating support for suggestions.</summary>
            <remarks>Returns true if suggest is supported by the locator task.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorInfo.Version">
            <summary>Gets the version of the locator task.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters">
            <summary>A class representing the parameters to a geocoding suggestion operation.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.#ctor">
            <summary>Creates a new SuggestParameters instance.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.Categories">
            <summary>Gets a mutable list of categories from which addresses should be returned.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.CountryCode">
            <summary>
            Gets or sets a value representing the country. Providing this value increases geocoding speed. Acceptable 
            values include the full country name, the ISO 3166-1 2-digit country code, or the ISO 3166-1 3-digit country 
            code. A list of supported countries and codes is available 
            <a href="https://developers.arcgis.com/rest/geocode/api-reference/geocode-coverage.htm" target="_blank">here.</a>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.MaxResults">
            <summary>Gets or sets the maximum number of returned suggestions.</summary>
            <remarks>Supported values from interval [1..15], 5 by default.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.PreferredSearchLocation">
            <summary>Gets or sets preferred search location.</summary>
            <remarks>
             Distance specifying with location the preferred area where candidates will be searched.
             Supported values are from interval [1000..50000], 50000 by default.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestParameters.SearchArea">
            <summary>Gets or sets the geographic area for which searching for locations will be limited to.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorAttribute">
            <summary>A class representing an attribute of a Locator candidate.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorAttribute.DisplayName">
            <summary>Gets the display name (alias) of the locator attribute.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorAttribute.Name">
            <summary>Gets the name of the locator attribute.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorAttribute.IsRequired">
            <summary>Gets a boolean flag indicating whether or not this locator attribute is required.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorAttribute.Type">
            <summary>Gets the type of the locator attribute.</summary>
            <remarks>This will be one of the following: string, bool, int or double.</remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult">
            <summary>A class representing the result of a geocoding suggestion operation.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Tasks.Geocoding.SuggestResult.Label">
            <summary>Gets a label that contains the suggested address.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.AngularUnit">
            <summary>
            Represents an angular unit of measure used by a Geometry or SpatialReference, or in measurement 
            or measurement conversion functions. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnit.UnitType">
            <summary>Gets the type of the unit</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AngularUnit.ConvertTo(System.Double,Esri.ArcGISRuntime.Geometry.AngularUnit)">
            <summary>Converts the angle to the provided angular unit.</summary>
            <param name="angle">Angle in the units of this instance.</param>
            <param name="outUnit">Unit to convert to.</param>
            <returns>Angle converted to the specified unit.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AngularUnit.ConvertToRadians(System.Double)">
            <summary>Converts the angle to radians.</summary>
            <param name="angle">Angle in the units of this instance.</param>
            <returns>Angle converted to radians.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AngularUnit.ConvertFromRadians(System.Double)">
            <summary>Converts a radian angle to the unit of this instance.</summary>
            <param name="radians">Radians.</param>
            <returns>Angle converted from radians.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AngularUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.AngularUnits">
            <summary>Provides angular units.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnits.Radians">
            <summary>Returns a Unit object representing angle in radians (Id = 9101). A radian is an SI standard unit, equaling 180/pi degrees.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnits.Degrees">
            <summary>Returns a Unit object representing angle in degrees (Id = 9102). A degree is equal to pi/180 radians.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnits.Minutes">
            <summary>Returns a Unit object representing angle in arc-minutes (Id = 9103). An arc-minute is equal to 1/60th of a degree.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnits.Seconds">
            <summary>Returns a Unit object representing angle in arc-seconds (Id = 9104). An arc-second is equal to 1/60th of an arc-minute.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AngularUnits.Grads">
            <summary>Returns a Unit object representing angle in grads (Id = 9105). Equivalent to one one-hundredth of a right-angle, a grad is equal to pi/200 radians. Also known as a gon.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.AreaUnit">
            <summary>
            Class used to represent units of measurements for an area.
            </summary>
            <remarks>
            <para>
            There is no direct constructor on the AreaUnit Class. Use it's base class Static Method, <see cref="M:Esri.ArcGISRuntime.Geometry.Unit.Create(System.Int32)"/>, with an unit ID integer
            value to create a specific AreaUnit type.  The input unit ID integer argument values come from the various <see cref="T:Esri.ArcGISRuntime.Geometry.AreaUnits"/> 
            Static Properties.
            </para>
            <para>
            A common scenario for using the AreaUnit Class is to display various <see cref="T:Esri.ArcGISRuntime.Geometry.AreaUnits"/> for polygon geometry. For example,
            a user would want to know the area of a polygon in Acres, Hectares, SquareMiles, etc. Typically, the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.AreaGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)"/> 
            Static Method is used on an input polygon geometry and the value returned is in square meters. The <see cref="M:Esri.ArcGISRuntime.Geometry.AreaUnit.ConvertFromSquareMeters(System.Double)"/> 
            Method could then be used to obtain one or more of those AreaUnits values (i.e. Acres, Hectares, SquareMiles, etc.).
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AreaUnit.CreateFromLinearUnit(Esri.ArcGISRuntime.Geometry.LinearUnit)">
            <summary>
            Creates an area unit from a linear unit.
            </summary>
            <param name="linearUnit">The linear unit.</param>
            <returns>An <see cref="T:Esri.ArcGISRuntime.Geometry.AreaUnit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">No standard area unit corresponds to the supplied linear unit.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnit.UnitType">
            <summary>Gets the type of the unit</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AreaUnit.ConvertTo(System.Double,Esri.ArcGISRuntime.Geometry.AreaUnit)">
            <summary>Converts the area to the provided area unit.</summary>
            <param name="inArea">Area.</param>
            <param name="outUnit">Unit to convert to.</param>
            <returns>Converted area.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AreaUnit.ConvertToSquareMeters(System.Double)">
            <summary>Converts the area to square meters.</summary>
            <param name="area">Area.</param>
            <returns>Converted area.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AreaUnit.ConvertFromSquareMeters(System.Double)">
            <summary>Converts square meters to the unit of this instance.</summary>
            <param name="squareMeters">Square Meters to convert from.</param>
            <returns>Converted area.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.AreaUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.AreaUnits">
            <summary>Provides area units.</summary>
            <remarks>
            <para>
            The AreaUnits Class is non-createable; meaning there is no constructor. It's usefulness is in using the Static Properties to construct 
            various <see cref="T:Esri.ArcGISRuntime.Geometry.AreaUnit"/> types.  
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareMeters">
            <summary>Returns a Unit object representing area in square meters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.Hectares">
            <summary>Returns a Unit object representing area in hectares.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareFeet">
            <summary>Returns a Unit object representing area in square feet.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.Acres">
            <summary>Returns a Unit object representing area in acres.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareYards">
            <summary>Returns a Unit object representing area in square yards.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareMiles">
            <summary>Returns a Unit object representing area in square miles.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareMillimeters">
            <summary>Returns a Unit object representing area in square millimeters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareCentimeters">
            <summary>Returns a Unit object representing area in square centimeters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareDecimeters">
            <summary>Returns a Unit object representing area in square decimeter.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.AreaUnits.SquareKilometers">
            <summary>Returns a Unit object representing area in square kilometers.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Envelope">
            <summary>
            Axis Aligned envelope
            </summary>
            <remarks>
            <para>
            Envelopes are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. If you need to modify an Envelope once it has been created, use the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder">EnvelopeBuilder</see>
            Class instead. The <see cref="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.ToGeometry">EnvelopeBuilder.ToGeometry</see> Method will provide you with the Envelope object. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> class.
            </summary>
            <param name="x1">x min</param>
            <param name="y1">y min</param>
            <param name="x2">x max</param>
            <param name="y2">y max</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> class.
            </summary>
            <param name="x1">x min</param>
            <param name="y1">y min</param>
            <param name="x2">x max</param>
            <param name="y2">y max</param>
            <param name="spatialReference">Spatial reference.</param> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> class.
            </summary>
            <param name="point1">First corner</param>
            <param name="point2">Second corner</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.GeometryType">
            <summary>
            The type geometry for this instance.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.XMin">
            <summary>
            Gets minimum X
            </summary>
            <value>The X min.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.YMin">
            <summary>
            Gets minimum Y value
            </summary>
            <value>The Y min.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.XMax">
            <summary>
            Gets maximum X
            </summary>
            <value>The X max.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.YMax">
            <summary>
            Gets maximum Y
            </summary>
            <value>The Y max.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.ZMin">
            <summary>
            Gets minimum Z value
            </summary>
            <value>The Z min.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.ZMax">
            <summary>
            Gets maximum Z value
            </summary>
            <value>The Z max.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.MMin">
            <summary>
            Gets minimum M value (measure).
            </summary>
            <value>The M min.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.MMax">
            <summary>
            Gets maximum M value (measure).
            </summary>
            <value>The M max.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.Width">
            <summary>
            Gets the width of the Envelope.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.Height">
            <summary>
            Gets the height of the Envelope.
            </summary>
            <value>The height.</value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.GetCenter">
            <summary>
            Gets the center of the Envelope.
            </summary>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.Extent">
            <summary>
            Gets the minimum enclosing envelope of the instance. Returns null if this geometry has IsEmpty true
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.HasM">
            <summary>
            Gets a value indicating if the geometry has M
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.HasZ">
            <summary>
            Gets a value indicating if the geometry has Z.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Envelope.IsEmpty">
            <summary>
            Gets a value indicating whether or not the geometry is empty.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> for equality. This will check for a matching <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> 
            and points for a match. 
            </summary>
            <remarks>
            The implementation of Geometry.Equals is the standard .Net reference equality test.
            To compare two geometries regardless of their order you can use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)"/>
            method, this is a little more costly to compute.
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Envelope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder">
            <summary>
            Builder for creating <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope">envelopes</see>.
            </summary>
            <remarks>
            <para>
            Use the EnvelopeBuilder Class to to create and/or modify an <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope">Envelope</see> shape. The builder is best suited 
            for editing workflows where the user may be adding, inserting or removing parts of an Envelope geometry interactively. Envelopes
            are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. Hence the EnvelopeBuilder provides the way to make changes when working with an Envelope. Use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.ToGeometry">EnvelopeBuilder.ToGeometry</see> Method to get the Envelope geometry from the builder.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.#ctor(Esri.ArcGISRuntime.Geometry.Envelope)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder" /> class.
            </summary>
            <param name="envelope">Envelope to edit</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder" /> class.
            </summary>
            <param name="spatialReference">Spatial reference of the Envelope</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder" /> class.
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder" /> class.
            </summary>
            <param name="x1">First X coordinate</param>
            <param name="y1">First Y coordinate</param>
            <param name="x2">Second X coordinate</param>
            <param name="y2">Second Y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.#ctor(System.Double,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder" /> class.
            </summary>
            <param name="x1">First X coordinate</param>
            <param name="y1">First Y coordinate</param>
            <param name="x2">Second X coordinate</param>
            <param name="y2">Second Y coordinate</param>
            <param name="spatialReference">Spatial reference of the Envelope</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.ToGeometry">
            <summary>
            Returns an <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope" /> instance representing the current state of the builder.
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.Clone">
            <summary>
            Returns a clone of the builder.
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.XMin">
            <summary>
            Gets or sets X min.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.YMin">
            <summary>
            Gets or sets Y min.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.XMax">
            <summary>
            Gets or sets X max.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.YMax">
            <summary>
            Gets or sets Y max.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.ZMin">
            <summary>
            Gets or sets Z min.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.ZMax">
            <summary>
            Gets or sets Z max.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.MMin">
            <summary>
            Gets or sets M min.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.MMax">
            <summary>
            Gets or sets M max.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.Width">
            <summary>
            Gets the width of the envelope along the X axis.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.Height">
            <summary>
            Gets the height of the envelope along the Y axis.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeBuilder.SetValues(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the X and Y coordinates of the envelope.
            </summary>
            <param name="x1">First X coordinate</param>
            <param name="y1">First Y coordinate</param>
            <param name="x2">Second X coordinate</param>
            <param name="y2">Second Y coordinate</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.EnvelopeValues">
            <summary>
            Shared between Envelope and EnvelopeBuilder holds all the values of an envelope and lazily creates Z and M if needed
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.EnvelopeValues.EnvelopeValuesZM">
            <summary>
            Holds Z and M values for an envelope
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeValues.MinNoNan(System.Double,System.Double)">
            <summary>
            Min that handles Nan comparisons and returns the real number if one is a Nan
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.EnvelopeValues.MaxNoNan(System.Double,System.Double)">
            <summary>
            Max that handles Nan comparisons and returns the real number if one is a Nan
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult">
            <summary>
            Represents the result of <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.DistanceGeodesic(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.LinearUnit,Esri.ArcGISRuntime.Geometry.AngularUnit,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)"/> operation
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult.Distance">
            <summary>
            Gets the distance.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult.Azimuth1">
            <summary>
            Gets the first azimuth value.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult.Azimuth2">
            <summary>
            Gets the second azimuth value.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult.AzimuthUnit">
            <summary>
            Gets the angular unit.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicDistanceResult.DistanceUnit">
            <summary>
            Gets the linear unit.
            </summary>        
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters">
            <summary>
            GeodesicEllipseParameter is used by the GeometryEngine.GeodesicEllipse operation.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.#ctor(System.Double,Esri.ArcGISRuntime.Geometry.AngularUnit,Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.LinearUnit,System.UInt32,System.Double,Esri.ArcGISRuntime.Geometry.GeometryType,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters"/> class.
             </summary>
            <param name="axisDirection">The direction of the major axis of the ellipse as an angle in units of angular_unit.</param>
            <param name="angularUnit">The angular unit of measure. If NULL, degrees will be assumed.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="linearUnit">The linear unit of measure. If NULL, meters will be assumed.</param>
            <param name="maxPointCount">The max number of vertices in the ellipse.</param>
            <param name="maxSegmentLength">The max segment length of the result approximation in units of linear_unit.</param>
            <param name="geometryType">The type of output geometry.</param>
            <param name="semiAxis1Length">The length of the semi-major or semi-minor axis of the ellipse in the units of linear_unit.</param>
            <param name="semiAxis2Length">The length of the semi-major or semi-minor axis of the ellipse in in the units of linear_unit.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.Center">
            <summary>
            Gets or sets The center of the ellipse in the
            coordinates of the spatial reference.
            </summary>        
            <exception cref="T:System.ArgumentNullException">Center</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.GeometryType">
            <summary>
            Gets or sets the type of geometry that will be created. 
            Only Multipoint, Polyline and Polygon are supported. The default value is Polygon.
            </summary>        
            <exception cref="T:System.NotSupportedException">
            Only Multipoint, Polyline and Polygon geometry types are supported. Setting the GeometryType 
            to a value that is not supported will produce a NotSupportedException.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.LinearUnit">
            <summary>
            Gets or sets the linear unit. The linear unit is the unit of the 
            SemiAxis1Length, SemiAxis2Length, MaxSegmentLength. The default value is Meters.
            </summary>
            <value>
            The linear unit of the SemiAxis1Length, SemiAxis2Length and MaxSegmentLength. The default is Meters.
            </value>
            <exception cref="T:System.ArgumentNullException">
            LinearUnit is required for the GeodesicEllipse operation. Setting LinearUnit to 
            null will throw an ArgumentNullException.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.AngularUnit">
            <summary>
            Gets or sets the angular unit.
            </summary>        
            <exception cref="T:System.ArgumentException">AngularUnit</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.SemiAxis1Length">
            <summary>
            Gets or sets the length of the semi axis.
            </summary>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            SemiAxis1Length cannot be less than zero.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.SemiAxis2Length">
            <summary>
            Gets or sets the length of the semi axis.
            </summary>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            SemiAxis2Length cannot be less than zero.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.AxisDirection">
            <summary>
            Gets or sets The direction of the major axis of 
            the ellipse as an angle in degrees.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.MaxPointCount">
            <summary>
            Gets or sets the  number of vertices in the ellipse before
            projection to the spatial reference sr (projection may add
            or remove or add some vertices). The default value is 10000.
            </summary>                
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters.MaxSegmentLength">
            <summary>
            Gets or sets the length of the max segment.
            </summary>        
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters">
            <summary>
            GeodesicSectorParameter is used by the GeometryEngine.GeodesicSector operation.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.#ctor(System.Double,Esri.ArcGISRuntime.Geometry.AngularUnit,Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.LinearUnit,System.UInt32,System.Double,Esri.ArcGISRuntime.Geometry.GeometryType,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters"/> class.
             </summary>
            <param name="axisDirection">The direction of the major axis of the ellipse as an angle in angular_unit.</param>
            <param name="angularUnit">The angular unit of measure, if NULL degrees will be assumed.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="linearUnit">The linear unit of measure, if NULL meters will be assumed.</param>
            <param name="maxPointCount">The max number of vertices in the ellipse.</param>
            <param name="maxSegmentLength">The max segment length of the result approximation in units of linear_unit.</param>
            <param name="geometryType">The type of output geometry.</param>
            <param name="sectorAngle">The sweep angle of the sector in angular_unit.</param>
            <param name="semiAxis1Length">The length of the semi-major or semi-minor axis of the ellipse in the units of linear_unit.</param>
            <param name="semiAxis2Length">The length of the semi-major or semi-minor axis of the ellipse in in the units of linear_unit.</param>
            <param name="startDirection">The direction of starting radius of the sector as an angle in angular_unit.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.Center">
            <summary>
            Gets or sets the center of the sector in the coordinates of the spatial reference.
            </summary>
            <exception cref="T:System.ArgumentNullException">Center</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.GeometryType">
            <summary>
            Gets or sets the type of geometry that will be created. 
            Only Multipoint, Polyline and Polygon are supported. The default value is Polygon.
            </summary>        
            <exception cref="T:System.NotSupportedException">
            Only Multipoint, Polyline and Polygon geometry types are supported. Setting the GeometryType 
            to a value that is not supported will produce a NotSupportedException.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.LinearUnit">
            <summary>
            Gets or sets the linear unit. The linear unit is the unit of the 
            SemiAxisLength1, SemiAxisLength2 and MaxSegmentLength. The default value is Meters.
            </summary>
            <value>
            The linear unit of the SemiAxis1Length, SemiAxis2Length and MaxSegmentLength. The default is Meters.
            </value>
            <exception cref="T:System.ArgumentNullException">
            LinearUnit is required for the GeodesicSector operation. Setting LinearUnit to 
            null will throw an ArgumentNullException.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.AngularUnit">
            <summary>
            Gets or sets the angular unit. The angular unit is the unit of the 
            AxisDirection, StartDirection and SectorAngle. The default value is Degrees.
            </summary>
            <value>
            The angular unit of the AxisDirection, StartDirection and SectorAngle. The default is Degrees.
            </value>
            <exception cref="T:System.ArgumentNullException">
            AngularUnit is required for the GeodesicSector operation. Setting AngularUnit to 
            null will throw an ArgumentNullException.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.SemiAxis1Length">
            <summary>
            Gets or sets the length of the semi axis.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            SemiAxis1Length cannot be less than zero.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.SemiAxis2Length">
            <summary>
            Gets or sets the length of the semi axis.
            </summary>        
            <exception cref="T:System.ArgumentOutOfRangeException">
            SemiAxis2Length cannot be less than zero.
            </exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.AxisDirection">
            <summary>
            Gets or sets The direction of the major axis of the 
            arc's ellipse as an angle in degrees. The default angle is 0 degrees.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.StartDirection">
            <summary>
            Gets or sets The direction of starting radius of the sector
            as an angle in degrees. The default value is 0 degrees.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.SectorAngle">
            <summary>
            Gets or sets the sweep angle of the sector 
            in degrees. The default value is 0 degrees.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.MaxSegmentLength">
            <summary>
            Gets or sets The max length between each vertex.
            </summary>                
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters.MaxPointCount">
            <summary>
            Gets or sets The max number of points the sector can have.
            The default value is 10000.
            </summary>                
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeodeticCurveType">
            <summary>
            This enumeration defines different types of curves 
            that can be calculated for geodesic geometry engine
            operation. 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeodeticCurveType.Geodesic">
            <summary>
            A geodesic line (shortest path along two points on an ellipsoid).
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeodeticCurveType.Loxodrome">
            <summary>
            A rhumb line (loxodrome).
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeodeticCurveType.GreatElliptic">
            <summary>
            A great elliptic.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeodeticCurveType.NormalSection">
            <summary>
            A normal section.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeodeticCurveType.ShapePreserving">
            <summary>
            The segment shape is preserved in the projection where it is defined.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeometryType">
            <summary>Geometry Type Enumeration</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Unknown">
            <summary>Unknown geometry type</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Point">
            <summary>Point</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Multipoint">
            <summary>Multipoint</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Polyline">
            <summary>Polyline</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Polygon">
            <summary>Polygon</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.GeometryType.Envelope">
            <summary>Envelope</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Geometry">
            <summary>
            Abstract Geometry class provides a base class for objects that define geometric shapes. Geometry objects can be used
            as geometry definitions for rendering data. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.CreateFromCore(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Boolean,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Wraps an existing geometry returned from some internal method
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqualPreChecks(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>Some initial checks for geometry equality</summary>
            <returns>A nullable-bool doesn't have a value then more checks are required, otherwise the value can be returned.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.GeometryType">
            <summary>Gets the geometry type.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.HasZ">
            <summary>
            Gets a value indicating if the geometry has Z.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.HasM">
            <summary>
            Gets a value indicating if the geometry has M
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.Dimension">
            <summary>
            Gets the dimension of the geometry.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.IsEmpty">
            <summary>
            Gets a value indicating whether or not the geometry is empty.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.IsNullOrEmpty(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns true if the supplied geometry is null or an Empty geometry.
            </summary>
            <param name="geometry">Geometry instance to test, or null</param>
            <returns>value indicating if the geometry is null or empty</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Geometry.SpatialReference">
            <summary>Gets the spatial reference of the instance.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.ToJson">
            <summary>Converts a geometry into an ArcGIS json geometry representation.</summary>
            <returns>Geometry represented as a JSON String.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.FromJson(System.String)">
            <summary>Creates a geometry from an ArcGIS json geometry representation.</summary>
            <param name="json">JSON representation of geometry.</param>
            <returns>Geometry converted from a JSON String.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.FromJson(System.String,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>Creates a geometry from an ArcGIS json geometry representation.</summary>
            <param name="json">JSON representation of geometry.</param>
            <param name="spatialReference">The spatial reference for the geometry.</param>
            <returns>Geometry converted from a JSON String.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two geometries for equality. This will check for a matching <see cref="P:Esri.ArcGISRuntime.Geometry.Geometry.SpatialReference"/> 
            and the content within the geometries match. For geometries containing points the order of points must match too.
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeometryBuilder`1">
            <summary>
            Base class for the geometry builders
            </summary>
            <typeparam name="T"><see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> type</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.GeometryBuilder`1.SpatialReference">
            <summary>
            Gets the <see cref="P:Esri.ArcGISRuntime.Geometry.GeometryBuilder`1.SpatialReference"/> for the geometry being built.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryBuilder`1.ToGeometry">
            <summary>
            Returns a <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry" /> instance representing the current state of the builder
            </summary>
            <returns>Geometry</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeometryEngine">
            <summary>
            Utility for performing geometric operations.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NormalizeCentralMeridian(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Folds the geometry into a range of 360 degrees. This may be necessary 
            when wrap around is enabled on the map. If Geometry is an Envelope then 
            a Polygon will be returned unless the Envelope is empty then and Empty 
            Envelope will be returned.
            </summary>
            <param name="geometry">The geometry that you want folded.</param>
            <returns>
            The folded geometry
            </returns>
            <exception cref="T:System.ArgumentNullException"> 
            geometry or geometry.SpatialReference
            </exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestVertex(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Finds the nearest vertex in a specified geometry to a specified point.
            </summary>
            <remarks>
            <para>
            If the specified geometry is a polyline or polygon the nearest vertex is the closest ending position of the line segment that comprises geometry;  
            it may not necessarily be the closest point of the line segment. If you want to obtain the closest point in the polyline or polygon use 
            the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestCoordinate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">GeometryEngine.NearestCoordinate</see> Method instead.
            </para>
            </remarks>
            <param name="geometry">The geometry in which the nearest vertex to a specified point is to be found.</param>
            <param name="point">The point which to find the nearest vertex to.</param>
            <returns>The proximity result.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestCoordinate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)"/>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.ProximityResult"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestCoordinate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Finds the nearest coordinate in a specified geometry to a specified point.
            </summary>
            <remarks>
            <para>
            If the specified geometry is a polyline or polygon the nearest coordinate is the closest point in the line segment that comprises geometry;  
            it may not necessarily be the closest vertex of line segment. If you want to obtain the closest vertex in the polyline or polygon use 
            the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestVertex(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">GeometryEngine.NearestVertex</see> Method instead.
            </para>
            </remarks>
            <param name="geometry">The geometry in which the nearest coordinate to a specified point is to be found.</param>
            <param name="point">The point which to find the nearest coordinate to.</param>
            <returns>The proximity result.</returns>
            <seealso cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestVertex(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)"/>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.ProximityResult"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Project(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>Projects the given geometry into a new spatial reference.</summary>
            <param name="geometry">The geometry to be projected.</param>
            <param name="outputSpatialReference">The spatial reference to which geometry need to be projected.</param> 
            <returns>The projected geometry.</returns>  
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Union(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            The union operation constructs the set-theoretic union of the geometries 
            in the input array.
            </summary>
            <param name="geometry1">The first geometry to union with.</param>
            <param name="geometry2">The second geometry to union with.</param>
            <returns>
            The unioned geometry.
            </returns>
            <remarks>
            <para>
            GeometryEngine.Union returns all parts of the two input geometries combined into a single geometry. This means that the 
            order of the input parameters of the GeometryEngine.Intersection is irrelevant. In a theoretical variable format
            you can think of the GeometryEngine.Union equation like: <br/>
            A (Union) B = C  <br/>
            B (Union) A = C  <br/>
            </para>
            <para>
            The following is a visual illustration of two polygon geometries and how the output result would be from the GeometryEngine.Union operation:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Union visual examples." src="../media/GeometryEngine_Union_Diagram1.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Intersection(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Constructs the set-theoretic intersection between two geometries.
            </summary>
            <param name="geometry1">The first geometry.</param>
            <param name="geometry2">The second geometry of dimension equal to 
            or greater than the elements of the first geometry.</param>
            <returns>
            A geometry that represents the intersection of the two input geometries.
            </returns>
            <remarks>
            <para>
            GeometryEngine.Intersection returns those parts of the two input geometries that have things in common. This means that the 
            order of the input parameters of the GeometryEngine.Intersection is irrelevant. In a theoretical variable format
            you can think of the GeometryEngine.Intersection equation like: <br/>
            A (Intersection) B = C <br/>
            B (Intersection) A = C <br/>
            </para>
            <para>
            The following is a visual illustration of two polygon geometries and how the output result would be from the GeometryEngine.Intersection operation:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Intersection visual examples." src="../media/GeometryEngine_Intersection_Diagram1.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Clip(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Envelope)">
            <summary>
            Constructs the polygon created by clipping geometry by envelope.
            </summary>
            <param name="geometry">The geometry to be clipped by the given envelope.</param>
            <param name="envelope">The envelope in which to use in order to clip geometry.</param>
            <returns>
            A geometry that represents the area clipped by envelope.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Simplify(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Simplifies the given geometry to make it topologically consistent according
            to their geometry type. For instance, it rectifies polygons that may be 
            self-intersecting,
            or contain incorrect ring orientations.
            </summary>
            <param name="geometry">The geometry to be simplified.</param>
            <returns>
            The simplified geometry.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Area(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Gets the simple area for the Geometry passed in. This is a planar measurement using 2D Cartesian mathematics to compute the area.
            </summary>
            <param name="geometry">The geometry to calculate the area for.</param>
            <returns>
            The computed area in the same units as the geometry's spatial reference unit.
            </returns>
            <remarks>
            <para>
            The area calculation that is generated from this Static Method is based upon the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of the input geometry. 
            A SpatialReference is a combination of an ellipsoid, datum, and a coordinate system used to display (aka. project) geographic data of 
            the three dimensional Earth on a two dimensional surface (such as a piece of paper of computer monitor). A good article for describing 
            how a spatial reference works can be found 
            <a href="http://www.sharpgis.net/post/2007/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx" target="_blank">here</a>.
            The important thing to know about area calculations is that some SpatialReferences are better than others for getting an accurate 
            results. To get the best area calculations using this method, consider using an 'area preserving' projecting SpatialReference such as:
            Albers, Lambert, Molliwiede, Hammer, Sinusoidal, and the like. If the input geometry to this method is not a good 'area preserving' 
            projecting SpatialReference, then there are two options available to get a good area calculation: (1) use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Project(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.SpatialReference)"/> 
            Static Method to project the geometry to one that is better suited for area calculations or (2) use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.AreaGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)"/> 
            Static Method which will use an internal projection algorithm to convert the geometry to a spherical coordinate system to obtain the 
            best area calculation possible.
            </para>
            <para>
            The input geometry must be topologically correct to get its accurate area. There are many ways that the orientation or shape of the rings that comprise 
            polygon could be constructed: clock-wise, counter clock-wise, overlapping hourglass, doughnut, multiple independent rings, etc. If the geometry
            is not topologically correct, then the resultant area from this method could give negative results. It is always a good best practice to use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Simplify(Esri.ArcGISRuntime.Geometry.Geometry)"/> Static Method on the geometry such that the resulting geometry is topologically correct and will return
            accurate and positive area results. Geometries returned by ArcGIS Server services are always correct. Therefore, if you construct geometries 
            programmatically or using the sketch layer, or if you modify geometries returned by ArcGIS Server, you should always simplify them using 
            GeometryEngine.Simplify first.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.AreaGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            Gets the geodesic area of a polygon.
            </summary>
            <param name="geometry">The geometry to calculate the geodesic area for.</param>
            <param name="geodeticCurveType">The type of curve to calculate.</param>
            <returns>
            The calculated geodesic area in square meters.
            </returns>
            <remarks>
            <para>
            The term <a href="http://en.wikipedia.org/wiki/Geodesic" target="_blank">Geodesic</a> means calculating the shortest distance between two points 
            on a sphere. Using Geodesic algorithms to calculate distances provides a highly accurate way to obtain length and area of measurements of geographic 
            features. The Geodesic algorithm uses the concept of a  <a href="http://en.wikipedia.org/wiki/Great_circle" target="_blank">great circle</a> to obtain the 
            shortest route between two points along the Earth’s surface. The area measurement obtained via this method is typically superior to that of the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Area(Esri.ArcGISRuntime.Geometry.Geometry)"/> Static Method, as this method is based upon a projection (i.e. a flat 2D representation of a 3D surface) which often 
            introduces distortion depending on the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> the geometry is in.  
            </para>
            <para>
            The input geometry must be topologically correct to get its accurate area. There are many ways that the orientation or shape of the rings that comprise 
            polygon could be constructed: clock-wise, counter clock-wise, overlapping hourglass, doughnut, multiple independent rings, etc. If the geometry
            is not topologically correct, then the resultant area from this method could give negative results. It is always a good best practice to use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Simplify(Esri.ArcGISRuntime.Geometry.Geometry)"/> Static Method on the geometry such that the resulting geometry is topologically correct and will return
            accurate and positive area results. Geometries returned by ArcGIS Server services are always correct. Therefore, if you construct geometries 
            programmatically or using the sketch layer, or if you modify geometries returned by ArcGIS Server, you should always simplify them using 
            GeometryEngine.Simplify first.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Length(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Gets the length for a specified Geometry. This is a planar measurement
            using 2D Cartesian mathematics to compute the length.
            </summary>
            <param name="geometry">The geometry to calculate the area for.</param>
            <returns>The calculated length in the same units as the geometry's spatial 
            reference unit.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.LengthGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary> 
            Gets the geodesic length for the Geometry passed in. Geodesic length is  
            calculated using only the vertices of the polygon and define the lines  
            between the points as geodesic segments independent of the actual shape  
            of the polygon. A geodesic segment is the shortest path between two points 
            on an ellipsoid. Thus, if you have a line that spans the width of the world, 
            with only two vertices, each on the edges of the map, the geodesic length  
            would be zero (shortest distance between the two vertices). 
            </summary> 
            <param name="geometry">The geometry to calculate the geodesic length for.</param> 
            <param name="geodeticCurveType">The type of curve to calculate.</param> 
            <returns>The calculated geodesic length in meters.</returns> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.LengthGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.LinearUnit,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            Gets the geodesic length for the Geometry passed in. Geodesic length is 
            calculated using only the vertices of the polygon and define the lines 
            between the points as geodesic segments independent of the actual shape 
            of the polygon. A geodesic segment is the shortest path between two points
            on an ellipsoid. Thus, if you have a line that spans the width of the world,
            with only two vertices, each on the edges of the map, the geodesic length 
            would be zero (shortest distance between the two vertices).
            </summary>
            <param name="geometry">The geometry to calculate the geodesic length for.</param>
            <param name="linearUnit">The linear unit of measurement the length value will be returned.</param>
            <param name="geodeticCurveType">The type of curve to calculate.</param>
            <returns>The calculated geodesic length in meters.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Buffer(Esri.ArcGISRuntime.Geometry.Geometry,System.Double)">
            <summary>
            Creates a buffer polygon at the specified distance around the given geometry.
            </summary>
            <param name="geometry">Specifies the input geometry.</param>
            <param name="distance">The distance in the unit of the geometry's spatial reference for which to buffer the geometry.</param>
            <returns>The polygon that represents the buffered area.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Distance(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Measures the simple planar distance between two geometries.
            </summary>
            <param name="geometry1">The first geometry.</param>
            <param name="geometry2">The second geometry.</param>
            <returns>
            The distance between the two input geometries in the same unit as the spatial 
            reference of the input geometries.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Intersects(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 intersects geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the two geometries intersects.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Intersects Method returns true if the two geometries intersect/touch/cross each other. The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Intersects visual examples." src="../media/DE19M_Intersects.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Contains(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 contains geometry2.
            </summary>
            <param name="geometry1">The geometry1.</param>
            <param name="geometry2">The geometry2.</param>
            <returns><c>true</c> if the geometry1 contains geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Contains Method returns true if the geometry2 is completely contained within geometry1. The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Contains visual examples." src="../media/DE19M_Contains.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Overlaps(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 overlaps geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the two geometries overlap.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Overlaps Method returns true if the two geometries have the same dimension and when their intersection set results in a geometry of the same dimension. 
            If the resultant geometry from the operation is one or more dimension(s) less than the input geometries then method returns false. For example: two input polygons must return a polygon to overlap.
            If two polygons cross each other at exactly one point then no overlap has occurred because only one dimension was returned.  
            The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Overlaps visual examples." src="../media/DE19M_Overlaps.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Within(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 is within geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the geometry1 is within geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Within Method returns true if geometry1 lies in the interior of geometry2. The boundary and interior of the geometry1 is not allowed to intersect the exterior of 
            the geometry2 and the geometry1 may not equal the geometry2.
            The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Within visual examples." src="../media/DE19M_Within.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Crosses(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 crosses geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the geometry1 crosses geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Crosses Method returns true if an intersection results in a geometry whose dimension is one less than the maximum dimension of the two source geometries and the intersection 
            set is interior to both source geometries. This method returns true only for the following combinations of geometries: MultiPoint/Polygon, MultiPoint/Polyline, Polyline/Polyline, 
            and Polyline/Polygon comparisons. The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Crosses visual examples." src="../media/DE19M_Crosses.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Disjoint(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 is not within geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the geometry1 is disjoint to geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Disjoint Method returns true if there is no intersection/overlap between the two geometries. The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Disjoint visual examples." src="../media/DE19M_Disjoint.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Touches(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 touches geometry2.
            </summary>
            <param name="geometry1">The first geometry to calculate intersection with.</param>
            <param name="geometry2">The second geometry to calculate intersection with.</param>
            <returns><c>true</c> if the geometry1 touches geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Touches Method returns true if the two geometries have at least one boundary point in common, but no interior points.
            The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Touches visual examples." src="../media/DE19M_Touches.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.LabelPoint(Esri.ArcGISRuntime.Geometry.Polygon)">
            <summary>
            Performs the LabelPoint operation on the geometry.
            </summary>
            <param name="polygon">The polygon to label.</param>
            <returns>Returns the label point for the geometry.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Densify(Esri.ArcGISRuntime.Geometry.Geometry,System.Double)">
            <summary>
            Densifies the specified geometry.
            </summary>
            <param name="geometry">The geometry to be densified.</param>
            <param name="maxSegmentLength">The maximum segment length allowed. Must be a positive value. 
            Curves are densified to straight segments using the maxSegmentLength. Curves are split into 
            shorter subcurves such that the length of subcurves is shorter than maxSegmentLength. After 
            that the curves are replaced with straight segments.</param>
            <returns>Returns the densified geometry. (It does nothing to geometries with dimension less 
            than 1, but simply passes them along).</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Offset(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,Esri.ArcGISRuntime.Geometry.OffsetType,System.Double,System.Double)">
            <summary>
            Returns offset version of the input geometry.
            The offset operation creates a geometry that is a constant distance from an input polyline 
            or polygon. It is similar to buffering, but produces a one sided result. If offset distance 
            > 0, then the offset geometry is constructed to the right of the oriented input geometry, 
            otherwise it is constructed to the left. For a simple polygon, the orientation of outer rings 
            is clockwise and for inner rings it is counter clockwise. So the "right side" of a simple 
            polygon is always its inside. The bevelRatio is multiplied by the offset distance and the 
            result determines how far a mitered offset intersection can be from the input curve before 
            it is beveled.
            </summary>
            <param name="geometry">The geometry to calculate offset for. MapPoint and Multipoint are not 
            supported.</param>    
            <param name="distance">The offset distance for the geometry.</param>
            <param name="offsetType">The offset type of the offset geometry.</param>
            <param name="bevelRatio">The ratio used to produce a bevel join instead of a miter join (used
            only when joins is miter)</param>
            <param name="flattenError">The maximum distance of the resulting segments compared to the true
            circular arc (used only when joins is round). If flattenError is 0, tolerance value is used. 
            Also, the algorithm never produces more than around 180 vetices for each round join.</param>
            <returns>Returns the result of the offset operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Generalize(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,System.Boolean)">
            <summary>
            Performs the generalize operation on the geometries in the cursor. Point and Multipoint 
            geometries are left unchanged. Envelope is converted to a Polygon and then generalized.
            </summary>
            <param name="geometry">The geometry to be generalized.</param>
            <param name="maxDeviation">The maximum allowed deviation from the generalized geometry 
            to the original geometry.</param>
            <param name="removeDegenerateParts">When true, the degenerate parts of the geometry will 
            be removed from the output (may be undesired for drawing).</param>      
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Difference(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Performs the Topological difference operation on the two geometries.
            </summary>
            <param name="geometry1">is the Geometry instance on the left hand side of the subtraction.</param>
            <param name="geometry2">is the Geometry on the right hand side being subtracted.</param>
            <returns>Returns the result of subtraction. The result has the dimension of the geometry1.</returns>
            <remarks>
            <para>
            The GeometryEngine.Difference method performs a spatial subtraction from the two input geometries. This means that the order of the two input geometry
            arguments of the GeometryEngine.Difference Static Method will have different results if they are switched. In a theoretical variable format
            you can think of the GeometryEngine.Difference equation like: <br/>
            A (Difference) B = C <br/>
            B (Difference) A = D <br/>
            </para>
            <para>
            If you were looking for the "complete" difference between two geometries you will need to run the GeometryEngine.Difference
            twice by switching the order of the input arguments and then add the two resultant geometries together (most likely via the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Union(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Union</see> 
            Static Method). This "complete" difference 
            means that you would be interested in obtaining those parts of the two input geometries that have nothing in common. In a theoretical 
            variable format to get the "complete" different between two geometries you can think of the the GeometryEngine.Difference equation like: <br/>
            [A (Difference) B] + [B (Difference) A] = Complete Difference <br/>
            </para>
            <para>
            The following is a visual illustration of two polygon geometries and how the output result would be from the GeometryEngine.Difference operation:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Difference visual examples." src="../media/GeometryEngine_Difference_Diagram1.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.SymmetricDifference(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Performs the Symmetric difference operation on the two geometries.
            </summary>
            <param name="geometry1">is one of the Geometry instances in the XOR operation.</param>
            <param name="geometry2">is one of the Geometry instances in the XOR operation.</param>
            <returns>Returns the result of the symmetric difference. The result has the higher of 
            dimensions of the two geometries.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.DensifyGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,Esri.ArcGISRuntime.Geometry.LinearUnit,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            Densifies geometries using geodesic curve
            </summary>
            <param name="geometry">The geometry to be densified.</param>
            <param name="maxSegmentLength">The maximum segment length allowed. Must be a positive value.</param>      
            <param name="units">The linear unit of the maxSegmentLength property.</param>
            <param name="geodeticCurveType">The type of curve to calculate.</param>
            <returns>The densified geometry.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.MoveGeodesic(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},System.Double,Esri.ArcGISRuntime.Geometry.LinearUnit,System.Double,Esri.ArcGISRuntime.Geometry.AngularUnit,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            The function moves each point in the input array by the given distance.
            The function returns the number of points that has not been been moved. 
            Points that are outside of the horizon will be discarded.
            </summary>
            <param name="points">The points that need to be moved.</param>
            <param name="distance">The distance to move the points by.</param>
            <param name="linearUnit">The unit of the distance property.</param>
            <param name="angle">The angle in of the direction for the points. </param>
            <param name="angularUnit">The unit of measurement for angle.</param>
            <param name="geodeticCurveType">The curve type to calculate.</param>
            <returns>The number of points moved. Points outside of the horizons will be discarded.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.SectorGeodesic(Esri.ArcGISRuntime.Geometry.GeodesicSectorParameters)">
            <summary>
            The function returns a piecewise approximation of a geodesic sector.
            If this method is used to generate a polygon or a polyline, the result may have more than one path,
            depending on the size of the sector and its position relative to the horizon of the coordinate system.
            When the method generates a polyline or a multipoint, the result vertices lie on the boundary of the ellipse.
            When a polygon is generated, the interior of the polygon is the interior of the sector,
            however the boundary of the polygon may contain segments from the spatial reference horizon, or from the GCS extent.
            </summary>
            <param name="parameter">The geodesic sector parameter that describes how to create the 
            geodesic sector.</param>
            <returns>The geometry that contains sector of the geodesic sector.</returns>
            <remarks>
            Supported output geometry types are Polygon, Polyline and Multipoint.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.EllipseGeodesic(Esri.ArcGISRuntime.Geometry.GeodesicEllipseParameters)">
            <summary>
            The function returns a piecewise approximation of a geodesic ellipse (or geodesic circle, if semiAxis1Length = semiAxis2Length).        
            Constructs a geodesic ellipse centered on the specified point. If this method is used to generate a polygon or a polyline, 
            the result may have more than one path, depending on the size of the ellipse and its position relative to the horizon 
            of the coordinate system. When the method generates a polyline or a multipoint, the result vertices lie on the boundary 
            of the ellipse. When a polygon is generated, the interior of the polygon is the interior of the ellipse, however the 
            boundary of the polygon may contain segments from the spatial reference horizon, or from the GCS extent.
            </summary>
            <param name="parameter">The geodesic ellipse parameter that describes how to create the geodesic ellipse.</param>
            <returns>The geometry that contains the geodesic ellipse.</returns>
            <remarks>
            If the smaller axis is zero, the ellipse will degenerate to a line segment, a point, or an empty geometry (depending on 
            the larger axis and output type). Otherwise, if VertextCount &lt; 10, the number of vertices will default to 10.
            Supported output geometry types are Polygon, Polyline and Multipoint.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns <c>true</c> if geometry1 is the same a geometry2. Automatically returns 
            <c>false</c> if either geometry is null or if the GeometryType of each are not the 
            same.
            </summary>
            <param name="geometry1">The geometry1.</param>
            <param name="geometry2">The geometry2.</param>
            <returns>Returns <c>true</c> if geometry1 is the same a geometry2.</returns>
            <remarks>
            <para>
            This method is one of several that determines the spatial relationship between two geometries. If the spatial relationship exists between the two input geometries then true is returned. 
            If the spatial relationship does not exist between the two input geometries then false is returned. The spatial relationship test used by this method is based on the Dimensionally Extended 
            9 Intersection Model (DE-9IM) developed Clementini, et al., and is discussed further in the web pages: 
            <a href="http://en.wikipedia.org/wiki/DE-9IM" target="_top">DE-9IM</a> and 
            <a href="http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm" target="_top">Understanding spatial relations</a>.  
            </para>
            <para>
            The GeometryEngine.Equals Method returns true if the two geometries have the same type and identical X,Y coordinate values. The following is a visual example of when this method returns true:
            </para>
            <para>
            <img border="0" alt="GeometryEngine.Equals visual examples." src="../media/DE19M_Equals.png"/>
            </para>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.ConvexHull(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Returns the convex hull of a geometry
            </summary>
            <param name="geometry">Specifies the input geometry.</param>
            <returns>A geometry that represents the convex hull</returns>
            <remarks>
            <para>
            A convex hull is the smallest polygon that encloses a group of objects, such as points. Visually, the boundary of a convex hull polygon is the 
            shape a rubber band would take around a group of objects.
            </para>
            <para>
            <img border="0" alt="Convex hull diagram." src="../media/ConvexHullDiagram.png"/>
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Relate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry,System.String)">
            <summary>
            Compares the spatial relationship of two geometries. Can can compare Interior, Boundary and Exterior
            of two geometries based on a DE-9IM encoded string. This must be 9 characters long and contain combinations 
            only of these characters: TF*012
            </summary>
            <param name="geometry1">The geometry that will be compared to geometry2 for relation</param>
            <param name="geometry2">The geometry that will be compared to geometry1 for relation</param>
            <param name="relation">The DE-9IM encoded string.</param>        
            <returns>Returns <c>true</c> if the relationship criteria is met otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.BufferGeodesic(Esri.ArcGISRuntime.Geometry.Geometry,System.Double,Esri.ArcGISRuntime.Geometry.LinearUnit,System.Double,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            Performs a geodesic buffer operation on a single geometry.
            </summary>
            <param name="geometry">The geometry to buffer.</param>
            <param name="distance">The distance to buffer.</param>        
            <param name="unit">The unit of distance.</param>      
            <param name="geodeticCurveType">The curve type to calculate.</param>      
            <param name="maxDeviation">The maximum deviation between points.</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Boundary(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Performs a boundary operation on a single geometry.
            <para>For Point - returns an empty point.</para>
            <para>For Multipoint - returns an empty point.</para>
            <para>For Polyline - returns a multipoint.</para>
            <para>For Polygon - returns a polyline that bounds the polygon (adds all rings of the polygon to a polyline).</para>
            </summary>
            <param name="geometry">The geometry to calculate the boundary for.</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.ShapePreservingLength(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.LinearUnit)">
            <summary>
            Calculates the length of the geometry on the surface of the Earth ellipsoid. This method 
            preserves the shape of the geometry in its coordinate system. This means the true length 
            will be calculated for the geometry you see in the map. Thus, if you have a line that 
            spans the width of the world, with only two vertices, each on edges of the map, the 
            length returned would be comparable to the distance on earth.
            </summary>
            <param name="geometry">Calculate the length of the geometry.</param>
            <param name="unit">The unit of measurement that needs to be calculated.</param>
            <returns>Length of the geometry expressed in the unit of measurement provided. </returns>        
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.ShapePreservingArea(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.AreaUnit)">
            <summary>
            Calculates the area of the geometry on the surface of the Earth ellipsoid. This method 
            preserves the shape of the geometry in its coordinate system. This means the true area 
            will be calculated for the geometry you see in the map.
            </summary>
            <param name="geometry">Calculate the area of the geometry.</param>
            <param name="unit">The unit of measurement that needs to be calculated.</param>
            <returns>Area of the geometry expressed in the unit of measurement provided.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.DistanceGeodesic(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.LinearUnit,Esri.ArcGISRuntime.Geometry.AngularUnit,Esri.ArcGISRuntime.Geometry.GeodeticCurveType)">
            <summary>
            Calculates the geodesic distance between 2 given points and calculates the azimuth at
            both points for the geodesic curves that connects the points.
            </summary>
            <param name="point1">The first point to calculate.</param>
            <param name="point2">The second point to calculate.</param>
            <param name="linearUnit">The unit of measurement that needs to be calculated for geodesic distance.</param>
            <param name="angularUnit">The angular unit of measurement to be calculated for Azimuth1 and Azimuth2.</param>
            <param name="geodeticCurveType">Type of the geodetic curve.</param>
            <returns>
            Geodesic distance between the two points expressed in the linear unit of measurement provided.
            Azimuth1 and Azimuth2 expressed in the angular unit of measurement provide.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.IsSimple(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
              Gets a value indicating whether or not the geometry is simple.
            </summary>
            <remarks>
            <para>
             For Polylines the only condition is there can be no
              degenerate segments. When the polyline has no Z, the degenerate segments are those that have length in xy plane less or
              equal the tolerance. When the polyline has Z, the degenerate segments are those that are shorter than the tolerance in
              xy plane, and the change in Z value along the segment is less than or equal to the Z tolerance.   For Polygons: Exterior
              rings are clockwise, and holes are counterclockwise. Rings can touch other rings in finite number of points. Rings can
              be self tangent in finite number of points. Vertices are either exactly coincident, or further than the
              Spatial_reference tolerance from each other. If a vertex is not equal to any boundary point of a segment, it has to be
              further than tolerance from any segment. No segment length is zero or less than tolerance. Each path contains at least
              three non-equal vertices. No empty paths allowed. Order of rings does not matter.
             </para>
             <para>
              Point geometry is always simple.  For Multi_point: there can be no point with exactly equal x and y - the tolerance is
              not taken into account.
              </para>
            </remarks>
            <param name="geometry">The geometry object.</param>
             <returns>A <see cref="T:System.Boolean"/> value where true means the geometry is simple, false if not.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.GeometryUtils">
            <summary>
            Contains helper methods for checking spatial references, and points
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.ValidateSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference,Esri.ArcGISRuntime.Geometry.SpatialReference,System.Boolean)">
            <summary>
            Checks if SR's are the equal or both nulls if not throws an exception. If ignoreNulls is true then if either are 
            null then it still returns true.
            </summary>
            <param name="inSR1"></param>
            <param name="inSR2"></param>
            <param name="ignoreNulls">If true it will ignore if one sr is null and another is valid</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.ValidateAndUpdateSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference,Esri.ArcGISRuntime.Geometry.SpatialReference@)">
            <summary>
            Checks incoming SR and compares to an existing SR (typically in a field of a class) and takes on a new SR if the srRef is null
            If fieldSR is not null (ie SR already established) then the SR's are compared and exception thrown if they don't match
            </summary>
            <param name="inSR"></param>
            <param name="srRef"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.IsEqualSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference,Esri.ArcGISRuntime.Geometry.SpatialReference,System.Boolean)">
            <summary>
            Returns true of the Spatial references are the same , this includes where older WKID refer to the same underlying spatial reference as a newer id.
            </summary>
            <remarks>
            Some SpatialReferences can have older WKID referring to the same underlying definition.
            An example is the Web mercator old id of 102100 and 3857 are both considered to be equal.
            </remarks>
            <param name="spatialreference1">The first spatial reference.</param>
            <param name="spatialReference2">The spatial reference to compare to.</param>
            <param name="ignoreNulls">if set to <c>true</c> if one SpatialReference is null and the other is not, the two will be considered the same.</param>
            <returns><c>true</c> is the two spatial references are the same.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.CheckPointsSpatialReference(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary> checks for a consistent SR in the points, if the incoming SR was null then a consistent Sr is checked for in the points</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.CheckPointsSpatialReference(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference@,System.Int32@)">
            <summary> checks for a consistent SR in the points , if the incoming SR was null its updated to that SR</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.CheckValidPoint(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Checks if the incoming point is not null
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.ConvertPointsToPointCollections(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference,System.Int32@)">
            <summary>
            Returns collections ready for creating native geometries. It will pickup if a PointCollection is passed as a part.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.CheckValidLineSegment(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Checks if the Segment is a valid LineSegment
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.GeometryUtils.ConvertSegmentsToPointCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference,System.Int32@)">
            <summary>
            Checks parts have consistent with spatialReference. If spatialReference is null, then it gets updated to the SR from the points (which must be consistent)
            Returns collections ready for creating native geometries.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.IPointCollectionAccess">
            <summary>
            Implemented on ReadOnlyPointCollection and PointCollection to allow an enumerator to access to their content
            in an array like style.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.IPointCollectionAccess.GetArrays(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[]@,System.Double[]@,System.Double[]@,System.Int32@,System.Int32@)">
            <summary>
            Gets arrays holding point data, the points themselves can have an offset within the array
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.LinearUnit">
            <summary>
            Represents a linear unit of measure used by a Geometry or SpatialReference, or in measurement 
            conversion functions. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LinearUnit.CreateFromAreaUnit(Esri.ArcGISRuntime.Geometry.AreaUnit)">
            <summary>
            Creates a linear unit from a corresponding area unit. For example square meters will become meters.
            </summary>
            <param name="areaUnit">The area unit.</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.LinearUnit"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">No standard linear unit corresponds to the supplied area unit.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnit.UnitType">
            <summary>
            Returns the type of unit.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LinearUnit.ConvertTo(System.Double,Esri.ArcGISRuntime.Geometry.LinearUnit)">
            <summary>Converts a value in the unit of this instance to another unit.</summary>
            <param name="inDistance">distance to convert.</param>
            <param name="outUnit">Unit to convert to.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LinearUnit.ConvertToMeters(System.Double)">
            <summary>Converts a value in the unit of this instance to meters.</summary>
            <param name="distance">distance to convert.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LinearUnit.ConvertFromMeters(System.Double)">
            <summary>Converts a value in meters to the unit of this instance.</summary>
            <param name="meters">distance to convert from in meters.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LinearUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.LinearUnits">
            <summary>Provides linear units.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Millimeters">
            <summary>Gets a linear unit representing millimeters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Centimeters">
            <summary>Gets a linear unit representing centimeters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Meters">
            <summary>Gets a linear unit representing meters.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Kilometers">
            <summary>Gets a linear unit representing kilometers.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Inches">
            <summary>Gets a linear unit representing international inches.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Feet">
            <summary>Gets a linear unit representing international foot.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Yards">
            <summary>Gets a linear unit representing international yards.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.Miles">
            <summary>Gets a linear unit representing statute miles.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.LinearUnits.NauticalMiles">
            <summary>Gets a linear unit representing international nautical miles.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.LineSegment">
            <summary>
            A class representing a straight line between a start and end point. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.GetWithSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            If the LineSegment doesn't have a SpatialReference is will assign the passed in one and return a copy.
            Otherwise the LineSegment is returned.
            </summary>
            <param name="spatialReference"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.GetWithNewStartEnd(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Simply returns a new line segment with the newStart and End - nothing else to carry through.
            Ensure the SR's match in the calling code
            </summary>
            <param name="newStart"></param>
            <param name="newEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Constructs a LineSegment with supplied start and end points.
            </summary>
            <param name="start">The start point of the line segment</param>
            <param name="end">The end point of the line segment</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a LineSegment with supplied start and end coordinates.
            </summary>
            <param name="startX">Starting X coordinate</param>
            <param name="startY">Starting Y coordinate</param>
            <param name="endX">Ending X coordinate</param>
            <param name="endY">Ending Y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Constructs a LineSegment with supplied start and end coordinates.
            </summary>
            <param name="startX">Starting X coordinate</param>
            <param name="startY">Starting Y coordinate</param>
            <param name="endX">Ending X coordinate</param>
            <param name="endY">Ending Y coordinate</param>
            <param name="spatialReference">The <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> of the coordinates</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Returns true if this Segments contents is the same as the other.
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">Segment to compare to</param>
            <returns>A <see cref="T:System.Boolean"/> value where true means the segments are the same, false if not.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.LineSegment.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.MapPoint">
            <summary>
            Map coordinate
            </summary>
            <remarks>
            <para>
            MapPoints are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. If you need to modify a MapPoint once it has been created, use the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder">MapPointBuilder</see>
            Class instead. The <see cref="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.ToGeometry">MapPointBuilder.ToGeometry</see> Method will provide you with the MapPoint object. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.GetWithSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            If the MapPoint doesn't have a Spatial Reference, it returns a new MapPoint with the supplied SR
            If it already has a SR then just returns itself
            </summary>
            <param name="spatialReference"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.GetAsString(System.Boolean)">
            <summary>
            Returns MapPoint for ToString, but without the type name at the start and optional SpatialReference
            </summary>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.#ctor(System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="spatialReference">Spatial Reference</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.#ctor(System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> class.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
            <param name="spatialReference">Spatial Reference</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.CreateWithM(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new 2D map point with an M (measure) value. The spatial reference will be null.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="m">m measure</param>
            <returns>MapPoint instance with HasM true</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.CreateWithM(System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Creates a new 2D map point with an M (measure) value and a spatial reference.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="m">m</param>
            <param name="spatialReference">spatial reference of the MapPoint</param>
            <returns>MapPoint instance with HasM true</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.CreateWithM(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new 3D map point with an Z and M (measure) values.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
            <param name="m">m</param>
            <returns>MapPoint instance with HasM true</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.CreateWithM(System.Double,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Creates a new 3D map point with an Z and M (measure) values.
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
            <param name="m">m</param>
            <param name="spatialReference">spatial reference of the MapPoint</param>
            <returns>MapPoint instance with HasM true</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.GeometryType">
            <summary>
            Gets the geometry type.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.X">
            <summary>
            Gets the X coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.Y">
            <summary>
            Gets the Y coordinate
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.MoveTo(System.Double,System.Double)">
            <summary>
            Moves a point to the specified location.
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.Z">
            <summary>
            Gets the Z coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.M">
            <summary>
            Gets the measure value.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.HasZ">
            <summary>
            Gets a value indicating if the geometry has Z coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.HasM">
            <summary>
            Gets a value indicating if the geometry has M
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.IsEmpty">
            <summary>
            Gets a value indicating whether or not the geometry is empty.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPoint.Extent">
            <summary>
            Gets the minimum enclosing envelope of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> for equality. This will check for a matching <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> 
            and coordinates for a match. 
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder">
            <summary>
            Builder for creating <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint">map points</see>.
            </summary>
            <remarks>
            <para>
            Use the MapPointBuilder Class to to create and/or modify a <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint">MapPoint</see> shape. The builder is best suited 
            for editing workflows where the user may be adding, inserting or removing parts of a MapPoint geometry interactively. MapPoints
            are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. Hence the MapPointBuilder provides the way to make changes when working with a MapPoint. Use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.ToGeometry">MapPointBuilder.ToGeometry</see> Method to get the MapPoint geometry from the builder.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.ToGeometry">
            <summary>
            Returns a <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint" /> instance representing the current state of the builder.
            </summary>
            <returns>MapPoint</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.Clone">
            <summary>
            Returns a clone of the builder.
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="spatialReference">Spatial reference of the MapPoint</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="point">Point to edit</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder"/></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder"/></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="m">Measure</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.#ctor(System.Double,System.Double,System.Double,System.Double,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder" /> class.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="m">Measure</param>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.MapPointBuilder"/></param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPointBuilder.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPointBuilder.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPointBuilder.Z">
            <summary>
            Gets or sets the Z coordinate.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MapPointBuilder.M">
            <summary>
            Gets or sets the measure value.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.SetValues(System.Double,System.Double)">
            <summary>
            Sets the X and Y coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MapPointBuilder.SetValues(System.Double,System.Double,System.Double)">
            <summary>
            Sets the X, Y and Z coordinates.
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Multipart">
            <summary>
            Represents an abstract multipart geometry type
            </summary>
            <remarks>
            <para>
            MultiParts are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. If you need to modify a MultiPart once it has been created, use the MultiPartBuilder
            Class instead. The MultiPartBuilder.ToGeometry Method will provide you with the base Geometry object. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Multipart.CreateCoreMultipartFromParts(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.IPointCollectionAccess},RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder,System.Boolean)">
            <summary>
            Efficiently create a core polygon or polyline for the partsEnum. Make sure the parts are checked for consistent SR first
            Use this from constructors for Polygon and Polyline
            </summary>
            <param name="partsEnum">The parts enum.</param>
            <param name="builder">The builder.</param>
            <param name="isPolygon">set to true if this is making a polygon, this will skip the closing point</param>
            <returns></returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipart.Parts">
            <summary>
            Gets the parts in the geometry
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipart.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope" /> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipart.IsEmpty">
            <summary>
            Gets a value indicating whether or not the geometry is empty.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipart.HasZ">
            <summary>
            Gets a value indicating if the geometry has Z.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipart.HasM">
            <summary>
            Gets a value indicating if the geometry has M
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1">
            <summary>
            Base class for the geometry multipart builders
            </summary>
            <remarks>
            <para>
            Use the MultiPartBuilder Class to to create and/or modify a base <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> shape. The builder is best suited 
            for editing workflows where the user may be adding, inserting or removing parts of a MultiPart geometry interactively. MultiParts
            are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. Hence the MultiPartBuilder provides the way to make changes when working with a Geometry. Use the 
            MultiPartBuilder.ToGeometry Method to get the base geometry from the builder.
            </para>
            </remarks>
            <typeparam name="T"><see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/> type</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.Parts">
            <summary>
            Gets or sets the multi part collection
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPoint(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Adds a new point to the end of the last part. 
            This will create a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> connecting with the end of the previous segment, if there is one.
            </summary>
            <remarks>
            If there are no parts initially then a new part (a <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>) will be created.
            </remarks>
            <param name="point">The point to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a new point to the end of the last part. 
            This will create a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> connecting with the end of the previous segment, if there is one.
            </summary>
            <remarks>
            If there are no parts initially then a new part (a <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>) will be created.
            </remarks>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new point to the end of the last part. 
            This will create a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> connecting with the end of the previous segment, if there is one.
            </summary>
            <remarks>
            If there are no parts initially then a new part (a <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>) will be created.
            </remarks>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The z coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPoints(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds new points to the end of the last part, this will create new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> instances.
            </summary>
            <remarks>
            If there are no parts initially then a new part (a <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>) will be created.
            </remarks>
            <param name="points">Points to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPart(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Adds a new part using a collection of segments
            </summary>
            <param name="part">New parts to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddPart(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds a new part using a collection of points to make segments
            </summary>
            <param name="part">New parts to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddParts(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Adds new parts to this builder
            </summary>
            <param name="parts">New parts to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipartBuilder`1.AddParts(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Adds new parts to this builder 
            </summary>
            <param name="parts">New parts to add</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Multipoint">
            <summary>
            An collection of points that represent a single geometry instance.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Multipoint.MultipointInfo">
            <summary>
            Holds basic information about Multipoint
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Multipoint.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint"/> class.
            </summary>
            <param name="points">The coordinates.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Multipoint.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint" /> class.
            </summary>
            <param name="points">The coordinates.</param>
            <param name="spatialReference">The spatial reference.</param>
            <exception cref="T:System.ArgumentNullException">points</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.Points">
            <summary>
            Gets the read-only collection of points in the <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint" /> instance.
            </summary>        
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.Extent">
            <summary>
            Gets the minimum enclosing <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope" /> of the instance
            </summary>
            <returns>Envelope</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.GeometryType">
            <summary>
            Gets the geometry type.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.IsEmpty">
            <summary>
            Gets a value indicating whether or not the geometry is empty.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.HasZ">
            <summary>
            Gets a value indicating if the geometry has Z.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Multipoint.HasM">
            <summary>
            Gets a value indicating if the geometry has M
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint"/> for equality. This will check for a matching <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> 
            and points for a match. 
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Multipoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder">
            <summary>
            Builder for creating <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint">multipoints</see>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /> class.
            </summary>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.#ctor(Esri.ArcGISRuntime.Geometry.Multipoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /> class.
            </summary>
            <param name="multipoint">Multipoint to copy into the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder"/></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /> class.
            </summary>
            <param name="points">Points</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /> class.
            </summary>
            <param name="points">Points</param>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.MultipointBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.ToGeometry">
            <summary>
            Returns a <see cref="T:Esri.ArcGISRuntime.Geometry.Multipoint" /> instance representing the current state of the builder.
            </summary>
            <returns>Multipoint</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.Clone">
            <summary>
            Returns a clone of the builder.
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.MultipointBuilder.Points">
            <summary>
            Gets or sets the <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection">points</see> in the Multipoint.
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>.
            <exception cref="T:System.InvalidOperationException">Incompatible spatial references. Mixed spatial references are not allowed.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point to the point collection
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the point collection
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.AddPoints(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds a collection of points to the end of this point collection
            </summary>
            <param name="points">The points to be added.</param>
            <remarks>This will copy in the supplied points. The best performance is with an instance of a <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/></remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the coordinates of a specified point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.MultipointBuilder.GetPoint(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the coordinates of a specified 3D point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="z">z coordinate</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.OffsetType">
            <summary> 
             Offset type is used in the GeometryEngine.Offset method
             </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.OffsetType.Round">
            <summary>
            Corners should be rounded
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.OffsetType.Bevel">
            <summary>
            Corners should be Beveled
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.OffsetType.Miter">
            <summary>
            Corners should be Mitered
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.OffsetType.Square">
            <summary>
            Corners should be Squared
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.OffsetType.Unknown">
            <summary>
            Corners type is unknown
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.PartCollection">
            <summary>
            A collection of <see cref="T:Esri.ArcGISRuntime.Geometry.Part" /> parts used by
            <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> and <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" />.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.AddPartsInternal(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Part})">
            <summary>
            Adds directly to the part collection, ensure segments have been checked for equal SR's first
            </summary>
            <param name="segments"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.UpdatePart(System.Action{Esri.ArcGISRuntime.Geometry.Part})">
            <summary>
            Gets access to the last part, or if there is none, then creates it, calls the action parameter with the part
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class without a Spatial reference.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="spatialReference">SpatialReference for all content added to this class.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="parts">The PartCollection parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="parts">The PartCollection parts.</param>
            <param name="spatialReference">The spatial reference of the PartCollection.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="parts">The PartCollection parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/> class.
            </summary>
            <param name="parts">The PartCollection parts.</param>
            <param name="spatialReference">The spatial reference of the PartCollection.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.AddPart(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds a new Part copying in the supplied points. 
            Any points with a null SpatialReference will be assumed to be in the SpatialReference of the collection
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.AddPart(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Adds a new part copying in the supplied segments. 
            Any segments with a null spatial reference will be assumed to be in the spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>.
            </summary>
            <param name="part">The new part content to copy in.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.AddParts(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Adds new Parts, copying in the supplied points.
            Any points with a null spatial reference will be assumed to be in the spatial reference of the PartCollection.
            </summary>
            <param name="parts">The parts to copy in.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.AddParts(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Adds new Parts, copying in the supplied segments.
            Any segments with a null spatial reference will be assumed to be in the spatial reference of the PartCollection.
            </summary>
            <param name="parts"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Clone">
            <summary>
            Creates a deep clone of the current <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>. All parts and points points are copied into the new instance.
            </summary>
            <returns>A deep clone of the current Object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PartCollection.SpatialReference">
            <summary>
            SpatialReference used for this <see cref="T:Esri.ArcGISRuntime.Geometry.PartCollection"/>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.GetPartsAsPoints">
            <summary>
            Returns each part as a collection of points. Each point is a distinct start or end point on the line segments.
            </summary>
            <returns>An enumerator across each part, where each part consists of an enumerator of its points.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PartCollection.Capacity">
            <summary>
            Reserves space to hold a specified number of parts. If the number of parts are known in advance this can provide
            a performance benefit avoiding reallocations as the collection grows up to the capacity value.
            </summary>
            <remarks>
            If the capacity is set to be less than the current size it will be capped at the current size.</remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.IndexOf(Esri.ArcGISRuntime.Geometry.Part)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Insert(System.Int32,Esri.ArcGISRuntime.Geometry.Part)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PartCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Add(Esri.ArcGISRuntime.Geometry.Part)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Contains(Esri.ArcGISRuntime.Geometry.Part)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains
            a specific value.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.CopyTo(Esri.ArcGISRuntime.Geometry.Part[],System.Int32)">
            <summary>
            Copies a collection of coordinates to this instance.
            </summary>
            <param name="array">The array to copy.</param>
            <param name="arrayIndex">Index to start copying the coordinates into.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PartCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PartCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
            is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only;
            otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.Remove(Esri.ArcGISRuntime.Geometry.Part)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            This method also returns false if <paramref name="item" /> is not found in the
            original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PartCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.PointCollection">
            <summary>
            Collection of <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint">MapPoints</see>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.ResizeArrays(System.Int32)">
            <summary>Resizes coordinate arrays to a new capacity</summary>
            <param name="capacity">amount of space to reserve</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.CloneArray``1(``0[],System.Int32,``0[]@)">
            <summary>
            Clones an array and copies content up to the specified size.
            If the array is null or the size is 0, the destination is set to null;
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.AllocZM(System.Double[]@)">
            <summary>
            Allocates a Z or M array to match the size of _xy array
            Fills any expose values with Nan
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.SetM(System.Int32,System.Double,System.Double[]@)">
            <summary>
            Sets an m value, if the value is not Nan the array is allocated
            </summary>
            <param name="index">index to set a value</param>
            <param name="v">value to set</param>
            <param name="arr">array to update</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.SetZ(System.Int32,System.Double,System.Double[]@)">
            <summary>
            Sets a z value, if the value is not 0 the array is allocated
            </summary>
            <param name="index">index to set a value</param>
            <param name="v">value to set</param>
            <param name="arr">array to update</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> class without a SpatialReference
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> class with a given SpatialReference
            </summary>
            <param name="spatialReference">The spatial reference to be used by all points in this collection</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> class. Populates with the supplied points.
            </summary>
            <param name="points">Populates with the supplied points</param>
            <remarks>If the input is another <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> a more efficient copy is made.</remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> class.
            The spatial reference is used if the input points don't have one.
            </summary>
            <param name="points">Populates with the supplied points</param>
            <param name="spatialReference">A spatial reference for the input points</param>
            <remarks>If the input is another <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/> a more efficient copy is made.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PointCollection.Capacity">
            <summary>
            Reserves space to hold a specified number of points. If the number of points are known in advance this provides
            a performance benefit as it avoid reallocations as the collection grows.
            </summary>
            <remarks>
            If the capacity is less than the current size it will be capped at the current size.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PointCollection.SpatialReference">
            <summary>
            The spatial reference of this point collection.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Add(System.Double,System.Double)">
            <summary>
            Adds a new point with the specified x and y coordinate
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new point with a specified x,y,z coordinate
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.AddPoints(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds a collection of points to the end of this point collection
            </summary>
            <param name="points">The points to be added.</param>
            <remarks>This will copy in the supplied points and will perform best with another instance of a <see cref="T:Esri.ArcGISRuntime.Geometry.PointCollection"/></remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the coordinates of a specified point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.GetPoint(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the coordinates of a specified 3D point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="z">z coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the coordinates of a specified point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.SetPoint(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets the coordinates of a specified point
            </summary>
            <param name="index">index within the point collection</param>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="z">z coordinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Clone">
            <summary>
            Creates a deep clone of the current PointCollection. All points are copied into the new instance.
            </summary>
            <returns>A deep clone of the current Object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.IndexOf(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Insert(System.Int32,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Add(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Contains(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains
            a specific value.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.CopyTo(Esri.ArcGISRuntime.Geometry.MapPoint[],System.Int32)">
            <summary>
            Copies a collection of coordinates to this instance.
            </summary>
            <param name="array">The array to copy.</param>
            <param name="arrayIndex">Index to start copying the coordinates into.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PointCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.PointCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
            is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only;
            otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.Remove(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            This method also returns false if <paramref name="item" /> is not found in the
            original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PointCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.PointCollectionEnumerator">
            <summary>
            Enumerator implementation for ReadOnlyPointCollection and PointCollection
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Polygon">
            <summary>
            A collection of Rings used to represent a Polygon <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>.
            </summary>
            <remarks>
            <para>
            A polygon is a closed shape defined by one or more rings. Each ring is a connected sequence of x,y coordinate pairs, where the first and last 
            coordinate pair are the same and all other pairs are unique. If a polygon has more than one ring, the rings may be separate from one another 
            or they may nest inside one another, but they may not overlap. When defining the x,y coordinate pairs in a ring, it is not necessary to specify 
            the first and last coordinate pair to have the same coordinate values. The API automatically closes the ring by connecting a segment between the 
            first and last coordinate pair.
            </para>
            <para>
            <b>Note:</b> Interior rings to make donut polygons should be counter-clockwise in direction to be topology correct. If there is ever a doubt 
            about the topological correctness of a polygon, call the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Simplify(Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Simplify</see> 
            method to correct any issues. This is especially true if you pass a polygon to ArcGIS Server for a geoprocessing task to avoid any 
            ArcGIS Server errors being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="parts">The polygon parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="parts">The polygon parts.</param>
            <param name="spatialReference">The spatial reference of the polygon.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="parts">The polygon parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> class.
            </summary>
            <param name="parts">The polygon parts.</param>
            <param name="spatialReference">The spatial reference of the polygon.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Polygon.GeometryType">
            <summary>
            Gets the geometry type.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> for equality. This will check for a matching <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> 
            and the content of <see cref="P:Esri.ArcGISRuntime.Geometry.Multipart.Parts"/> match. The order of parts must match too.
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polygon.ToPolyline">
            <summary>
            Returns a Polyline representation of this polygon.
            </summary>
            <returns>A Polyline of the Polygon</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder">
            <summary>
            Builder for creating <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon">polygons</see>.
            </summary>
            <remarks>
            <para>
            Use the PolygonBuilder Class to to create and/or modify a <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon">Polygon</see> shape. The builder is best suited 
            for editing workflows where the user may be adding, inserting or removing parts of a Polygon geometry interactively. Polygons
            are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. Hence the PolygonBuilder provides the way to make changes when working with a Polygon. Use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.ToGeometry">PolygonBuilder.ToGeometry</see> Method to get the Polygon geometry from the builder.
            </para>
            <para>
            A polygon is a closed shape defined by one or more parts <see cref="P:Esri.ArcGISRuntime.Geometry.Multipart.Parts"/>. 
            Each part in a polygon is a connected sequence of <see cref="T:Esri.ArcGISRuntime.Geometry.Segment"/> instances that start and end at the same point (a closed ring).
            If a polygon has more than one ring, the rings may be separate from one another or they may nest inside one another, but they should not overlap. 
            </para>
            <para>
            <b>Note:</b> Interior rings to make donut polygons should be counter-clockwise in direction to be topology correct. If there is ever a doubt 
            about the topological correctness of a polygon, call the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Simplify(Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Simplify</see> 
            method to correct any issues. This is especially true if you pass a polygon to ArcGIS Server for a geoprocessing task to avoid any 
            ArcGIS Server errors being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(Esri.ArcGISRuntime.Geometry.Polygon)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="polygon">Polygon to edit</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="spatialReference">Spatial reference of the polygon</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="part">Points for the first part</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="part">Points for the first part</param>
            <param name="spatialReference">Spatial reference of the Polygon</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="parts">The Polygon parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="parts">The Polygon parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="part">The Polygon parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="part">The Polygon parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="parts">The Polygon parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /> class.
            </summary>
            <param name="parts">The Polygon parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolygonBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.ToGeometry">
            <summary>
            Returns a <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon" /> instance representing the current state of the builder.
            </summary>
            <returns>Polygon</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolygonBuilder.Clone">
            <summary>
            Returns a clone of the builder.
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Polyline">
            <summary>
            A collection of Paths used to represent a Polyline <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry"/>
            </summary>
            <remarks>
            <para>
            Polylines are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. If you need to modify a Polyline once it has been created, use the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder">PolylineBuilder</see>
            Class instead. The <see cref="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.ToGeometry">PolylineBuilder.ToGeometry</see> Method will provide you with the Polyline object. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="parts">The polyline parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="parts">The polyline parts.</param>
            <param name="spatialReference">The spatial reference of the polyline.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="part">Points to be used for the first part.</param>
            <param name="spatialReference">The spatial reference.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="parts">The Polyline parts.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> class.
            </summary>
            <param name="parts">The Polyline parts.</param>
            <param name="spatialReference">The spatial reference of the Polyline.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Polyline.GeometryType">
            <summary>
            Gets the geometry type.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">
            <summary>
            Compares two <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> for equality. This will check for a matching <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> 
            and the content of <see cref="P:Esri.ArcGISRuntime.Geometry.Multipart.Parts"/> match. The order of parts must match too.
            </summary>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <param name="other">A geometry to test for equality.</param>
            <returns>Value to indicate if the two geometries are equal.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Polyline.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder">
            <summary>
            Builder for creating <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline">polylines</see>.
            </summary>
            <remarks>
            <para>
            Use the PolylineBuilder Class to to create and/or modify a <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline">Polyline</see> shape. The builder is best suited 
            for editing workflows where the user may be adding, inserting or removing parts of a Polyline geometry interactively. Polylines
            are based upon the parent <see cref="T:Esri.ArcGISRuntime.Geometry.Geometry">Geometry</see> Class. The Geometry Class is immutable which means that you can not change
            its shape once it is created. Hence the PolylineBuilder provides the way to make changes when working with a Polyline. Use the 
            <see cref="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.ToGeometry">PolylineBuilder.ToGeometry</see> Method to get the Polyline geometry from the builder.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(Esri.ArcGISRuntime.Geometry.Polyline)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="polyline">Polyline to edit</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="spatialReference"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="part">Points for the first part</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="part">Points for the first part</param>
            <param name="spatialReference">Spatial reference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="parts">The polyline parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="parts">The polyline parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="part">The polyline parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="part">The polyline parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="parts">The polyline parts</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment}},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /> class.
            </summary>
            <param name="parts">The polyline parts</param>
            <param name="spatialReference">SpatialReference of the <see cref="T:Esri.ArcGISRuntime.Geometry.PolylineBuilder" /></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.ToGeometry">
            <summary>
            Returns a <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline" /> instance representing the current state of the builder.
            </summary>
            <returns>Polyline</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.PolylineBuilder.Clone">
            <summary>
            Returns a clone of the builder.
            </summary>
            <returns>Clone</returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.ProximityResult">
            <summary>
             Instances of this class represent results of a proximity search using the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestVertex(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">GeometryEngine.NearestVertex</see> or 
             <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestCoordinate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)">GeometryEngine.NearestCoordinate</see> Methods to find the nearest vertex or a coordinate of a geometry.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestCoordinate(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.NearestVertex(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.MapPoint)"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ProximityResult.Point">
            <summary>The point found</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ProximityResult.PointIndex">
            <summary>The index of the point that was found within it's part.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ProximityResult.PartIndex">
            <summary>The index of the part in which the point was found</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ProximityResult.Distance">
            <summary>The result distance</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection">
            <summary>
            A Read-only collection of <see cref="T:Esri.ArcGISRuntime.Geometry.ReadOnlyPart" /> parts used by
            <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline" /> and <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon" />.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.SpatialReference">
            <summary>
            SpatialReference used for this read-only part collection.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.GetPartsAsPoints">
            <summary>
            Returns each part as a collection of points. 
            </summary>
            <returns>An enumerator across each part, where each part conists of an enumerator of its points</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException" >
            index is less than 0.-or-index is equal to or greater than <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPartCollection.Count"/>.
            </exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection">
            <summary>
            Read-only collection of <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint">MapPoints</see>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[],System.Int32,System.Int32,Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
             Holds a reference to the arrays, the z and m could be null
             Start index is an offset into the array (could be 0)
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException" >
            index is less than 0.-or-index is equal to or greater than <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.Count"/>.
            </exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets a point at the specified index.
            </summary>
            <param name="index">Index of the point</param>
            <param name="x">the x component of the point at the index</param>
            <param name="y">the y component of the point at the index</param>
            <exception cref="T:System.ArgumentOutOfRangeException" >
            index is less than 0.-or-index is equal to or greater than <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.Count"/>.
            </exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.GetPoint(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets a point at the specified index.
            </summary>
            <param name="index">Index of the point</param>
            <param name="x">the x component of the point at the index</param>
            <param name="y">the y component of the point at the index</param>
            <param name="z">the z component of the point at the index</param>
            <exception cref="T:System.ArgumentOutOfRangeException" >
            index is less than 0.-or-index is equal to or greater than <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPointCollection.Count"/>.
            </exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.ReadOnlyPart">
            <summary>
            Read only collection of <see cref="T:Esri.ArcGISRuntime.Geometry.Segment"/> classes.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.SpatialReference">
            <summary>
            Returns the <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.SpatialReference"/> used on segments in this collection.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.GetPoints">
            <summary>
            Returns a collection of points making up distinct start and end points of segments. 
            If the segments are connected, that is the end of one is the same as the start of another, then the point is not repeated.
            </summary>
            <returns>A collection of <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> objects.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.StartPoint">
            <summary>
            Returns the start point of the first segment.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.EndPoint">
            <summary>
            Returns the end point of the last segment.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.GetPoint(System.Int32)">
            <summary>
            Return a point given a segment index, returns the start point unless the index is past the end
            tin which case the end point is returned
            </summary>
            <param name="index"></param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.IsClosed">
            <summary>
            Returns true if this <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> has its <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.StartPoint"/> with the same values 
            as its <see cref="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.EndPoint"/>. If the collection is empty this returns false.
            Polygons parts are typically closed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.ReadOnlyPart.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Segment">
            <summary>
            A class representing a start and end point and how they are connected. The most common is a striaght line <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/>.
            </summary>
            <remarks>Segments are used as the building blocks of the parts of <see cref="T:Esri.ArcGISRuntime.Geometry.Polygon"/> and <see cref="T:Esri.ArcGISRuntime.Geometry.Polyline"/> classes.</remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Segment.GetWithSpatialReference(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            If the Segment doesn't have a SpatialReference is will assign the passed in one and return a copy.
            Otherwise the LineSegment is returned.
            </summary>
            <param name="spatialReference"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Segment.GetWithNewStartEnd(Esri.ArcGISRuntime.Geometry.MapPoint,Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Returns a copy of the segment with the new start and end points.
            Preserves the spatial reference of the cuurent segment (ensure they are compatible)
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.HasZ">
            <summary>
            Returns true if the segment has Z values
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.HasM">
            <summary>
            Returns true if the segment has M values
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.StartPoint">
            <summary>
            The start point of a segment
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.EndPoint">
            <summary>
            The end point of a segment
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.SpatialReference">
            <summary>
            The spatial reference of the Segment
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Returns true if this Segments contents is the same as the other.
            </summary>
            <param name="other">Segment to compare to</param>
            <remarks>
            <para>
            The various geometry <b>IsEqual</b> Methods (i.e. 
            <see cref="M:Esri.ArcGISRuntime.Geometry.Envelope.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Envelope</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Geometry.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Geometry</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.MapPoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">MapPoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.LineSegment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">LineSegment</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Multipoint.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Multipoint</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polygon.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polygon</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Polyline.IsEqual(Esri.ArcGISRuntime.Geometry.Geometry)">Polyline</see>,
            <see cref="M:Esri.ArcGISRuntime.Geometry.Segment.IsEqual(Esri.ArcGISRuntime.Geometry.Segment)">Segment</see>) 
            provide the most strict comparison of two geometries to ensure they are equal (aka.
            identical). You can also use the <see cref="M:Esri.ArcGISRuntime.Geometry.GeometryEngine.Equals(Esri.ArcGISRuntime.Geometry.Geometry,Esri.ArcGISRuntime.Geometry.Geometry)">GeometryEngine.Equals</see> Method
            but the test for ensuring that two geometries are equal (aka. identical) is not quite as strict. The following table provides a
            comparison of the geometry comparison options:  
            </para>
            <list type="table">  
            <listheader>
              <IsEqual>geometryA.IsEqual(geometryB)</IsEqual>
              <Equals>GeometryEngine.Equals(geometryA,geometryB)</Equals>
            </listheader>  
            <item><IsEqual>Type</IsEqual><Equals>Type</Equals></item>
            <item><IsEqual>Shape</IsEqual><Equals>Shape</Equals></item>
            <item><IsEqual>Orientation</IsEqual><Equals>Orientation</Equals></item>
            <item><IsEqual>Order of Coordinates</IsEqual><Equals>--</Equals></item>
            </list>
            <para>
            In a nutshell, if you need to ensure that the 'Order of Coordinates' that comprise your geometries 
            are exactly the same, use the various geometry <b>IsEqual</b> Methods.
            </para>
            </remarks>
            <returns>A <see cref="T:System.Boolean"/> value where true means the segments are the same, false if not.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Segment.IsClosed">
            <summary>
            Returns true if the start and end points are the same
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Part">
            <summary>
            Collection of <see cref="T:Esri.ArcGISRuntime.Geometry.Segment"/> classes.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.IsOnePointPart">
            <summary>
            Returns true if this Part represents only a single point.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.HasOnlyOnePoint(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Returns true if there is only one point in the segments.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.GetDistinctStartEndPoints(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Returns the distinct start and end points of a part
            </summary>
            <param name="segs"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddPointsInternal(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},System.Int32)">
            <summary>
            Adds the points as segments. 
            ensure points have been checked for consistent SR before this is called.
            Ensures they all get the a SpatialReference of the Part.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddSegmentInternal(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Adds an incomming segment and gets it into the right SR mathcing the collection.
            Also optimises start point instance to be shared with previous EndPoint
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddSegmentsInternal(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},System.Int32)">
            <summary>
            Adds incomming segments giving them the right SR for the collection
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.CheckIndex(System.Int32,System.Int32,System.String)">
            <summary>
            Checks if the index is within the specified index range
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.#ctor(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> class with a given <see cref="P:Esri.ArcGISRuntime.Geometry.Part.SpatialReference"/>.
            </summary>
            <param name="spatialReference">The Spatial Reference used by all segments in this collection</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> class. Populates with the supplied points. 
            The <see cref="P:Esri.ArcGISRuntime.Geometry.Part.SpatialReference"/> of the Part is taken from the input points
            </summary>
            <param name="points">Populates with the supplied points</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> class.
            The spatial reference is checked against the input points and it is also used if the inputs have a null SpatialReference
            </summary>
            <param name="points">Populates with the supplied points</param>
            <param name="spatialReference">A spatial reference for the input points</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> class. Populates with the supplied segments.
            The <see cref="P:Esri.ArcGISRuntime.Geometry.Part.SpatialReference"/> of the Part is taken from the input segments
            </summary>
            <param name="segments">segments to populate the collection with</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.#ctor(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment},Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> class.
            The spatial reference is checked against the input points and it is also used if the inputs have a null SpatialReference
            </summary>
            <param name="segments">Populates with the supplied segments</param>
            <param name="spatialReference">A spatial reference for the input segments</param>
            <remarks>If the input is another <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> a more efficient copy is made.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.SpatialReference">
            <summary>
            Returns the <see cref="P:Esri.ArcGISRuntime.Geometry.Part.SpatialReference"/> used on segments in this collection.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.GetPoints">
            <summary>
            Returns a collection of points making up distinct start and end points of segments. 
            If the segments are connected, that is the end of one is the same as the start of another, then the point is not repeated.
            </summary>
            <returns>An enumerable of points</returns>
            <remarks>If a single point was added, but not segment, that is also returned</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.StartPoint">
            <summary>
            Returns the start point of the first segment.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.EndPoint">
            <summary>
            Returns the end point of the last segment.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.GetPoint(System.Int32)">
            <summary>
            Returns a point given a index.
            </summary>
            <param name="pointIndex">The index of the point</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.MapPoint"/> object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.IsClosed">
            <summary>
            Returns true if this <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> has its <see cref="P:Esri.ArcGISRuntime.Geometry.Part.StartPoint"/> with the same values 
            as its <see cref="P:Esri.ArcGISRuntime.Geometry.Part.EndPoint"/>. If the collection is empty this returns false.
            Polygons parts should be closed to form a complete ring.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.MovePoint(System.Int32,Esri.ArcGISRuntime.Geometry.MapPoint)">
             <summary>
             Moves a specified point in a segment keeping segments connected.
             </summary>
             <remarks>
             The pointIndex is the same as segment index and less than <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/>refers to the <see cref="P:Esri.ArcGISRuntime.Geometry.Segment.StartPoint"/>
             if pointIndex is the same as <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/> this will move the end point of the last segment.
            </remarks>
             <param name="pointIndex">an index of a point</param>
             <param name="newPoint">The point to move to</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.RemovePoint(System.Int32)">
             <summary>
             Removes a point from the Part adjusting StartPoint and EndPoints. 
             </summary>
             <remarks>
             The pointIndex is the same as segment index if less than <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/>refers to the <see cref="P:Esri.ArcGISRuntime.Geometry.Segment.StartPoint"/>
             if pointIndex is the same as <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/> this will delete the end point of the last segment.
            </remarks>
             <param name="pointIndex">The index of the point to move</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.InsertPoint(System.Int32,Esri.ArcGISRuntime.Geometry.MapPoint)">
             <summary>
             Inserts a new point by inserting a <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> and adjusts the previous Segment to connect to it.
             </summary>
             <remarks>
             The pointIndex is the same as segment index and if less than <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/>refers to the <see cref="P:Esri.ArcGISRuntime.Geometry.Segment.StartPoint"/>
             if pointIndex is the same as <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/> this will insert before the end point of the last segment.
             if pointIndex is the same as <see cref="P:Esri.ArcGISRuntime.Geometry.Part.Count"/>+1 this will insert after the end point of the last segment.
            </remarks>
             <param name="pointIndex">The index before which the new point will be inserted</param>
             <param name="newPoint">The new point to insert.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Close">
            <summary>
            Modifies the Part to ensure it has a closing segment.
            If its already closed or empty nothing is added.
            A closing segment ensures the <see cref="P:Esri.ArcGISRuntime.Geometry.Part.EndPoint"/> has the same cooridnates as the <see cref="P:Esri.ArcGISRuntime.Geometry.Part.StartPoint"/>
            Polygons parts are typically closed.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Unclose">
            <summary>
            Modifies the Part removing a closing segment if there is one. 
            Polygons parts are typically closed.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.Capacity">
            <summary>
            Reserves space to hold a specified number of segments. If the number of segments is known in advance this provides
            a performance benefit as it avoid reallocations as the collection grows.
            </summary>
            <remarks>
            If the capacity is less than the current size it will be capped at the current size.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddPoints(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.MapPoint})">
            <summary>
            Adds a range of points these will create LineSegments
            </summary>
            <param name="points">The points to add as LineSegments.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddPoint(Esri.ArcGISRuntime.Geometry.MapPoint)">
            <summary>
            Adds a point to the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> this will add a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> 
            connecting with the end of the previous segment, if there is one.
            </summary>
            <param name="point">The point to add</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddPoint(System.Double,System.Double)">
            <summary>
            Adds a point to the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> this will add a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> 
            connecting with the end of the previous segment, if there is one.
            </summary>
            <param name="x">The x cooridinate</param>
            <param name="y">The y cooridinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> this will add a new <see cref="T:Esri.ArcGISRuntime.Geometry.LineSegment"/> 
            connecting with the end of the previous segment, if there is one.
            </summary>
            <param name="x">The x cooridinate</param>
            <param name="y">The y cooridinate</param>
            <param name="z">The z cooridinate</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.AddSegments(System.Collections.Generic.IEnumerable{Esri.ArcGISRuntime.Geometry.Segment})">
            <summary>
            Adds a collection of segments to the collection.
            </summary>
            <param name="segments">The collection of <see cref="T:Esri.ArcGISRuntime.Geometry.Segment"/> objects to add.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Clone">
            <summary>
            Creates a clone of this <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/>
            </summary>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Geometry.Part"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.IndexOf(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Insert(System.Int32,Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">
            The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Add(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Contains(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains
            a specific value.
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.CopyTo(Esri.ArcGISRuntime.Geometry.Segment[],System.Int32)">
            <summary>
            Copies a collection of coordinates to this instance.
            </summary>
            <param name="array">The array to copy.</param>
            <param name="arrayIndex">Index to start copying the coordinates into.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Part.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
            is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only;
            otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.Remove(Esri.ArcGISRuntime.Geometry.Segment)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the
            <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            This method also returns false if <paramref name="item" /> is not found in the
            original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Part.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.SpatialReference">
            <summary>
            Instances of this class represent a spatial reference.
            </summary>
            <remarks>
            <para>
            Each spatial reference can be represented by either a
            well-known ID (wkid), or a well-known text (wkt). Spatial References define the spatial properties of a geometry,
            for instance the coordinate system it uses. There are 2 broad classes of coordinate systems - Geographic &amp; Projected.
            A Geographic Coordinate system uses a 3-dimensional spherical surface to define locations on the earth. A Projected
            Coordinate system on the other hand uses a flat, 2-dimensional surface. More information about spatial references
            and coordinate systems is available
            <a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_are_map_projections/003r00000001000000/">here</a>.
            </para>
            <para>It is very important to associate spatial data, such as geometry objects, with corresponding spatial references.</para>
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.SpatialReference.CacheSpatialReference">
            <summary>
            Holds a cache of recently used spatial references using just wkid+vertid combined
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.CacheSpatialReference.Find(System.Int32,System.Int32)">
            <summary>
            Given a wkid goes looking to see if its already cached
            </summary>
            <param name="wkid">Wkid of the SR</param>
            <param name="vertId">Certical spatial reference Id, or 0 if not known</param>
            <returns>An instance of a spatial reference if its in the cache</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.CacheSpatialReference.Add(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Adds the existing spatial reference to the cache, if its already there its not added
            </summary>
            <param name="sr"></param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.CreateCoreCheckParams(System.String)">
            <summary>Creates the core spatial reference.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.CreateCoreCheckParams(System.Int32,System.Int32)">
            <summary>Creates the core spatial reference, throwing the right exepctions if the parameters are invalid</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wkid">The Well-known ID that represents the Spatial Reference.</param> 
            <remarks>
            <para>
            Each spatial reference can be represented by either a
            well-known ID (wkid), or a well-known text (wkt). Spatial References define the spatial properties of a geometry,
            for instance the coordinate system it uses. There are 2 broad classes of coordinate systems - Geographic &amp; Projected.
            A Geographic Coordinate system uses a 3-dimensional spherical surface to define locations on the earth. A Projected
            Coordinate system on the other hand uses a flat, 2-dimensional surface. More information about spatial references
            and coordinate systems is available
            <a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_are_map_projections/003r00000001000000/">here</a>.
            </para>
            <para>It is very important to associate spatial data, such as geometry objects, with corresponding spatial references.</para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wkid">The Well-known ID that represents the Spatial Reference.</param> 
            <param name="verticalWkid">The Vertical Coordinate System Well-known ID.</param> 
            <remarks>
            <para>
            Each spatial reference can be represented by either a
            well-known ID (wkid), or a well-known text (wkt). Spatial References define the spatial properties of a geometry,
            for instance the coordinate system it uses. There are 2 broad classes of coordinate systems - Geographic &amp; Projected.
            A Geographic Coordinate system uses a 3-dimensional spherical surface to define locations on the earth. A Projected
            Coordinate system on the other hand uses a flat, 2-dimensional surface. More information about spatial references
            and coordinate systems is available
            <a href="http://help.arcgis.com/en/arcgisdesktop/10.0/help/index.html#/What_are_map_projections/003r00000001000000/">here</a>.
            </para>
            <para>It is very important to associate spatial data, such as geometry objects, with corresponding spatial references.</para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wktext">The Well known text that represents the Spatial Reference.</param> 
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.Create(System.Int32)">
            <summary>Returns an instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wkid">The Well-known ID that represents the Spatial Reference.</param> 
            <remarks>This method is more efficient than a constructor and can reuse instances.</remarks>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.Create(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wkid">The Well-known ID that represents the Spatial Reference.</param> 
            <param name="verticalWkid">The Vertical Coordinate System Well-known ID.</param> 
            <remarks>This method is more efficient than a constructor and can reuse instances.</remarks>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.Create(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> class.</summary>
            <param name="wktext">The Well known text that represents the Spatial Reference.</param> 
            <remarks>This method is more efficient than a constructor and can reuse instances.</remarks>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.IsValidVerticalWkid(System.Int32)">
            <summary>
            Returns a value indicating whether the specified well-known ID can be used to create a vertical coordinate system.
            </summary>
            <param name="wkid">The specified well-known ID to check.</param>
            <returns>Returns true if wkid can be used to create a vertical coordinate system; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.IsValidWkid(System.Int32)">
            <summary>
            Returns a value indicating whether the specified well-known ID can be used to create a horizontal coordinate system.
            </summary>
            <param name="wkid">The specified well-known ID to check.</param>
            <returns>Returns true if wkid can be used to create a horizontal coordinate system; otherwise, false.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.IsValidWkText(System.String)">
            <summary>
            Returns a value indicating whether the specified string is a valid well-known text.
            </summary>
            <param name="wkText">The specified well-known text to check.</param>
            <returns>Returns true if wkText is a valid well-known text; otherwise, false.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.IsGeographic">
            <summary>Returns true if this is a geographic coordinate system.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.IsPannable">
            <summary>Returns true if this coordinate system supports wrap around.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.IsProjected">
            <summary>Returns true if this is a projected coordinate system.</summary> 
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.Extent">
            <summary>
            Gets the extent of the spatial reference.
            </summary>
            <value>The extent of the spatial reference.</value>
            <see cref="T:Esri.ArcGISRuntime.Geometry.Envelope"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.BaseGeographic">
            <summary>Gets the base geographic coordinate system if this is a projected coordinate system.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.Unit">
            <summary>The units that the spatial reference coordinates are in.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.Wkid">
            <summary> Gets the Well-known ID for this instance. </summary>  
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.VerticalWkid">
            <summary>Gets the vertical coordinate system Well-known ID.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReference.WkText">
            <summary>Gets the Well-known Text for this instance.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.IsEqual(Esri.ArcGISRuntime.Geometry.SpatialReference)">
            <summary>
            Returns true of the Spatial references are the same, this includes where older <see cref="P:Esri.ArcGISRuntime.Geometry.SpatialReference.Wkid" /> refer to the same underlying spatial reference as a newer id.
            </summary>
            <remarks>
            Some SpatialReferences can have older <see cref="P:Esri.ArcGISRuntime.Geometry.SpatialReference.Wkid"/> referring to the same underlying definition.
            An example is the Web mercator old id of 102100 and 3857 are both considered to be equal.
            </remarks>
            <param name="other">The spatial reference to compare with.</param>
            <returns><c>true</c> is the two spatial references are the same.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.ToJson">
            <summary>
            Creates an ArcGIS JSON representation of the spatial reference/>
            </summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.SpatialReference.FromJson(System.String)">
            <summary>
            Creates an instance of a spatial reference from a JSON string.
            </summary>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> object that was converted from a JSON string.
            </returns>
            <param name="json">JSON string that represents a <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/>.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.SpatialReferences">
            <summary>
            Provides properties to return common spatial references
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReferences.WebMercator">
            <summary>
            Returns a web mercator spatial reference object which is a projected coordinate system.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.SpatialReferences.Wgs84">
            <summary>Returns a spatial reference object WGS84 (4326) which is a geographic coordinate system.</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.UnitType">
            <summary>Enumeration of unit types.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.UnitType.Linear">
            <summary>Linear unit.</summary>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.LinearUnit" />
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.UnitType.Angular">
            <summary>Angular unit.</summary>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.AngularUnit" />
        </member>
        <member name="F:Esri.ArcGISRuntime.Geometry.UnitType.Area">
            <summary>Area unit.</summary>
            <seealso cref="T:Esri.ArcGISRuntime.Geometry.AreaUnit" />
        </member>
        <member name="T:Esri.ArcGISRuntime.Geometry.Unit">
            <summary>A common base class between all units, linear, area and angular units.</summary>
            <remarks>Custom <see cref="T:Esri.ArcGISRuntime.Geometry.Unit"/> implementations are not supported by ArcGIS Runtime.</remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Unit.PrivateCreateFromCache``1(RuntimeCoreNet.GeneratedWrappers.CoreUnit,System.Func{RuntimeCoreNet.GeneratedWrappers.CoreUnit,Esri.ArcGISRuntime.Geometry.Unit},System.Boolean)">
            <summary>
            Shared function for creating a drived type of CoreUnit, also using the cache of units.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coreUnit"></param>
            <param name="creationFunction"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Unit.Create(System.Int32)">
            <summary>
            Creates a unit based on a unit ID
            </summary>
            <param name="id">The unit ID.</param>
            <returns>A <see cref="T:Esri.ArcGISRuntime.Geometry.Unit"/> object.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Unit.Id">
            <summary>Gets the well-known ID of the unit.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Unit.Name">
            <summary>Gets the name of the unit.</summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Unit.Abbreviation">
            <summary>Gets the abberviation of the unit.</summary>
            <value>The abbreviation of the unit.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Unit.DisplayName">
            <summary>Gets the display name of the unit.</summary>
            <value>The display name of the unit.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Geometry.Unit.UnitType">
            <summary>Returns the type of unit.</summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Geometry.Unit.IsEqual(Esri.ArcGISRuntime.Geometry.Unit)">
            <summary>
            Returns true of the Unit instances are the same. 
            </summary>
            <param name="other">The other unit to compare to.</param>
            <returns><c>true</c> is the two units are the same.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.ILoadable">
            <summary>
              A interface for loading meta-data for an object.
            </summary>
            <remarks>
            <p><b>Remark</b>: A resource that is capable of loading its meta-data asynchronously is referred to as a loadable. 
            It could represent a remote service, or a dataset on disk. </p>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.ILoadable.LoadError">
            <summary>
              Retrieve the load error as an Exception.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.ILoadable.LoadStatus">
            <summary>
              Retrieve the load status.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.ILoadable.Loaded">
            <summary>
              Occurs when the object is done loading.
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.ILoadable.LoadStatusChanged">
            <summary>
              Occurs when the loadable load status changed.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.ILoadable.CancelLoad">
            <summary>
              Cancel loading meta-data for the object.
            </summary>
            <remarks>
            <p><b>Remark</b>: Will cancel loading the meta-data if the object is loading. Will always call the done loading if this is called.</p>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.ILoadable.LoadAsync">
            <summary>
            Load the meta-data for the object asynchronously.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Will load the meta-data if the object is not loaded. Will always call the done loading if this is called.</p>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.ILoadable.RetryLoadAsync">
            <summary>
              Load or retry loading meta-data for the object asynchronously.
            </summary>
            <returns>A task that represents the asynchronous load operation.</returns>
            <remarks>
            <p><b>Remark</b>: Will retry loading the meta-data if the object is failed to load. Will load the object if the object is not loaded.
             Will not retry to load the object if the object is loaded. Will always call the done loading if this is called.</p>
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.LoadStatusEventArgs">
            <summary>
            Event argument used by <see cref="T:Esri.ArcGISRuntime.ILoadable"/> 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.LoadStatusEventArgs.#ctor(Esri.ArcGISRuntime.LoadStatus)">
            <summary>
            Initializes the event arguments with a <see cref="T:Esri.ArcGISRuntime.LoadStatus"/> 
            </summary>
            <param name="loadStatus"></param>
        </member>
        <member name="P:Esri.ArcGISRuntime.LoadStatusEventArgs.Status">
            <summary>
            Gets the load status of the loadable resource.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.LicenseLevel">
            <summary>
            Reflects the current license level of the ArcGISRuntime API.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseLevel.Developer">
            <summary>Developer license level application is running on a developer machine</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseLevel.Basic">
            <summary>Basic deployment level license</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseLevel.Standard">
            <summary>Standard deployment level license</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.LicenseResult">
            <summary>Results of license validity checks.</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseResult.Invalid">
            <summary>License is invalid</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseResult.InvalidMixedLicense">
            <summary>An extension license has been given instead of a main license or vice versa</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseResult.Expired">
            <summary>License has expired</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseResult.LoginRequired">
            <summary>License from portal authentication has exceeded login period, user will need to login in again</summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LicenseResult.Valid">
            <summary>License is valid</summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.LicenseException">
            <summary>
            An exception indicating a licensing error
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.LicenseException.#ctor(Esri.ArcGISRuntime.LicenseResult,System.String)">
            <summary>
            Constructs an exception indicating a ArcGISRuntime license failure.
            </summary>
            <param name="result">Indicates the type of license failure</param>
            <param name="message">Message text for the Exception</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.LicenseException.Result">
            <summary>
            The result of setting a license
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.LicenseInfo">
            <summary>
            Holds information about a license returned from a <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser"/> this can be used to enable
            licensing though <see cref="M:Esri.ArcGISRuntime.License.SetLicense(Esri.ArcGISRuntime.LicenseInfo)"/>. This instance also be saved to a Json string and reloaded for offline use.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.LicenseInfo.FromJson(System.String)">
            <summary>
            Deserializes the json string into a LicenseInfo.
            </summary>
            <param name="json"></param>
            <returns>
            A <see cref="T:Esri.ArcGISRuntime.LicenseInfo"/> object that was converted from a JSON string.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.LicenseInfo.ToJson">
            <summary>
            Returns a json strong containing license information. This can be stored and reloaded to enable offline use.
            </summary>
            <returns>
            A JSON string representation of a <see cref="T:Esri.ArcGISRuntime.LicenseInfo"/> object.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.License">
            <summary>
            This class is used to control Initialization and process wide settings for the ArcGIS Runtime. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.License.#ctor">
            <summary>
            Creates a License instance, this can only be accessed from <see cref="P:Esri.ArcGISRuntime.ArcGISRuntimeEnvironment.License"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.License.Level">
            <summary>
            Returns the current level of the ArcGISRuntime license
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.License.SetLicense(System.String)">
            <summary>
            Sets the runtime license to standard level
            </summary>
            <param name="license">The string containing the main runtime deployment license.</param>
            <remarks>
            <para>
            As a developer, when you license the ArcGIS Runtime .Net SDK, you license your machine for all available product levels and extensions. 
            If you do not set the license explicitly, the runtime will look for a developer license during initialization. It is therefore not necessary to set 
            the license during initial development but a license must be set when testing and deploying applications. 
            </para>
            </remarks>
            <exception cref="T:Esri.ArcGISRuntime.LicenseException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:Esri.ArcGISRuntime.License.SetLicense(Esri.ArcGISRuntime.LicenseInfo)">
            <summary>
            Takes a LicenseInfo and attempts to apply the new license level. An exception will be thrown if the license is invalid or has expired.
            </summary>
            <remarks>For an expired license check the <see cref="P:Esri.ArcGISRuntime.LicenseException.Result"/> property for <see cref="F:Esri.ArcGISRuntime.LicenseResult.LoginRequired"/> value.</remarks>
            <param name="licenseInfo"></param>
            <exception cref="T:Esri.ArcGISRuntime.LicenseException" />
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="P:Esri.ArcGISRuntime.License.Expiry">
            <summary>
            Returns the date on which the current license will expire. If there
            is no expiry then <see cref="F:System.DateTimeOffset.MaxValue"/> is returned.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.License.ResetToBasic">
            <summary>
             Resets license level back to Basic.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.LoadStatus">
            <summary>
              The load status for a loadable object.
            </summary>
            <remarks>
            <p><b>Remark</b>: This is used to determine the status of an object that is loadable.</p>
            </remarks>
        </member>
        <member name="F:Esri.ArcGISRuntime.LoadStatus.Loaded">
            <summary>
              The object is fully loaded and ready to use.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LoadStatus.Loading">
            <summary>
              The object is currently being loaded and some functionality may not work.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LoadStatus.FailedToLoad">
            <summary>
              The object failed to load and some functionality may not work.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.LoadStatus.NotLoaded">
            <summary>
              The object is not loaded and some functionality may not work.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.Location">
            <summary>
            Provides data for a single location, including position, course, velocity, and accuracy
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.Location.#ctor(Esri.ArcGISRuntime.Geometry.MapPoint,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Instantiates a <see cref="T:Esri.ArcGISRuntime.Location.Location"/> object
            </summary>
            <param name="position">The horizontal and vertical map position of the location</param>
            <param name="horizontalAccuracy">The horizontal accuracy of the location</param>
            <param name="velocity">The velocity of the location</param>
            <param name="course">The heading of the location</param>
            <param name="isLastKnown">Whether the location represents the current device position or one retrieved previously</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.Location.Position">
            <summary>
            Gets the horizontal and vertical position of the location
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.Location.HorizontalAccuracy">
            <summary>
            Gets the estimated horizontal accuracy of the location in meters
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.Location.Course">
            <summary>
            Gets the course of the device in degrees, or NaN if not available.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.Location.Velocity">
            <summary>
            Velocity of the device in meters per second
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.Location.IsLastKnown">
            <summary>
            Gets whether the instance represents the location that was last recorded (i.e. may not be current)
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.LocationDataSource">
            <summary>
            Provides location information.  Can be displayed on a map using the GeoView.LocationDisplay property.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.#ctor">
            <summary>
            Instantiates a default <see cref="T:Esri.ArcGISRuntime.Location.LocationDataSource"/> object
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDataSource.IsStarted">
            <summary>
            Gets whether location is being tracked
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.StartAsync">
            <summary>
            Starts location tracking
            </summary>
            <returns>A task that represents the asynchronous start operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.StopAsync">
            <summary>
            Stops location tracking
            </summary>
            <returns>A task that represents the asynchronous stop operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.UpdateHeading(System.Double)">
            <summary>
            Updates the current heading
            </summary>
            <param name="heading">The current heading in degrees</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.UpdateLocation(Esri.ArcGISRuntime.Location.Location)">
            <summary>
            Updates the current location
            </summary>
            <param name="location">The current location</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.OnStopError">
            <summary>
            Reports that an error occurred while stopping location tracking
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.OnStartAsync">
            <summary>
            Called when location tracking has started
            </summary>
            <returns>A task that represents the asynchronous on start operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDataSource.OnStopAsync">
            <summary>
            Called when location tracking has stopped
            </summary>
            <returns>A task that represents the asynchronous on stop operation.</returns>
        </member>
        <member name="E:Esri.ArcGISRuntime.Location.LocationDataSource.LocationChanged">
            <summary>
            Raised when the location data source has a new location.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode">
            <summary>
            The auto pan mode for the <see cref="T:Esri.ArcGISRuntime.Location.LocationDisplay"/>
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Off">
            <summary>
            The map does not auto pan, and the location symbol may move off screen.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Recenter">
            <summary>
            The map recenters on the location symbol whenever it moves out of
            the wander extent
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Navigation">
            <summary>
            The location symbol is fixed and always points to the top edge of
            the device. The map pans and rotates based on location and course
            updates.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.CompassNavigation">
            <summary>
            The location symbol is fixed and always points to the top edge of 
            the device. The map pans and rotates based on location and heading 
            (magnetic) updates.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.LocationDisplay">
            <summary>
            Defines how location is displayed on a MapView.
            </summary>
            <remarks>
            Location Display requires the Location Capability for the app to be enabled.
            </remarks>
            <summary>
            Defines how location is displayed on a <see cref="T:Esri.ArcGISRuntime.UI.MapView"/>.
            </summary>
            <remarks>
            Location Display requires the Location Capability for the app to be enabled.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.Location">
            <summary>
            Gets the most recent location reported by the location data source.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.MapLocation">
            <summary>
            Gets the map position of the most recnt location reported by the location data source
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.IsStarted">
            <summary>
            Gets whether location is being tracked
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.Heading">
            <summary>
            Gets the heading of the current location
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDisplay.Start">
            <summary>
             Starts updating location data.
             </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.LocationDisplay.Stop">
            <summary>
             Stops updating location data.
             </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Location.LocationDisplay.PropertyChanged">
            <summary>
            Occurs when a property value changes
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Location.LocationDisplay.LocationChanged">
            <summary>
            Occurs when the location changes
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Location.LocationDisplay.StatusChanged">
            <summary>
            Occurs when the status of the location changes
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanModeChanged">
            <summary>
            Occurs when the <see cref="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode"/> changes
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.NavigationPointHeightFactor">
            <summary>
            Gets or sets the offset of the navigation center when the <seealso cref="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode"/> 
            is set to <see cref="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Navigation"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.InitialZoomScale">
            <summary>
            Gets or sets the initial zoom scale
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.WanderExtentFactor">
            <summary>
            Gets or sets the proportion of the current extent within which the location can be without automatically panning the map.  
            Valid range is between 0 (continuous panning) and 1 (only pan when the location reaches the edge of the current extent.  
            Only applies when <see cref="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode"/> is set to  <see cref="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Recenter"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.DefaultSymbol">
            <summary>
            Gets or sets the symbol used for location when not moving.
            </summary>
            <value>
            The default symbol.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.AccuracySymbol">
            <summary>
            Gets or sets the symbol indicating how accurate the current location is
            </summary>
            <value>
            The accuracy symbol
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.ShowAccuracy">
            <summary>
            Gets or sets whether to display the accuracy of the current location
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.CourseSymbol">
            <summary>
            Gets or sets the symbol when moving. The symbol is rotated with the heading of the movement.
            </summary>
            <value>
            The course symbol.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.UseCourseSymbolOnMovement">
            <summary>
            Gets or sets whether to use the course symbol when moving
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.HeadingSymbol">
            <summary>
            Gets or sets the symbol shown in compass mode. The symbol is rotated with the heading of the compass.
            </summary>
            <value>
            The heading symbol.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.AcquiringSymbol">
            <summary>
            Gets or sets the symbol shown while the location is being acquired
            </summary>
            <value>
            The acquiring symbol
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode">
            <summary>
            Gets or sets the auto pan mode.
            </summary>
            <value>
            The auto pan mode.
            </value>
            <remarks>
            If the map is being panned while the <see cref="P:Esri.ArcGISRuntime.Location.LocationDisplay.AutoPanMode"/> is enabled, 
            it will automatically be set to <see cref="F:Esri.ArcGISRuntime.Location.LocationDisplayAutoPanMode.Off"/>.
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.Opacity">
            <summary>
            Gets or sets the opacity to apply to the location symbols
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.DataSource">
            <summary>
            Gets or sets the location data source used for generating location updates.
            </summary>
            <remarks>
            By default this uses the built-in system location data source <see cref="T:Esri.ArcGISRuntime.Location.SystemLocationDataSource"/>.
            </remarks>
            <seealso cref="T:Esri.ArcGISRuntime.Location.SystemLocationDataSource"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.ShowLocation">
            <summary>
            Gets or sets a value whether location display is shown on the <see cref="T:Esri.ArcGISRuntime.UI.MapView"/>
            this instance is associated with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.ShowPingAnimationSymbol">
            <summary>
            Gets or sets the flag indicating whether the ping animation is shown.
            </summary>
            <value>
            <c>true</c> if the ping animation is shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.LocationDisplay.PingAnimationSymbol">
            <summary>
            Gets or sets the ping animation symbol
            </summary>
            <value>
            The ping animation symbol
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.StatusChangedEventArgs">
            <summary>
            Event argument used by the <see cref="E:Esri.ArcGISRuntime.Location.LocationDisplay.StatusChanged"/> event
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Location.StatusChangedEventArgs.IsStarted">
            <summary>
            Gets whether location tracking has started
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Location.SystemLocationDataSource">
            <summary>
            Provides location for the GeoView.LocationDisplay using the system's built-in
            location data source (if available).
            </summary>
            <remarks>
            Location Display requires the Location Capability for the app to be enabled.
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.SystemLocationDataSource.#ctor">
            <summary>
            Instantiates a location data source for receiving location information from the platform's built-in location capabilities
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.SystemLocationDataSource.OnStartAsync">
            <summary>
            Invoked when the location tracking is started via the <see cref="M:Esri.ArcGISRuntime.Location.LocationDataSource.StartAsync"/> method
            </summary>
            <returns>
            Task
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Location.SystemLocationDataSource.OnStopAsync">
            <summary>
            Invoked when the location tracking is stopped via the <see cref="M:Esri.ArcGISRuntime.Location.LocationDataSource.StopAsync"/> method
            </summary>
            <returns>
            Task
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.ObjectCollection">
            <summary>
            A collection of objects
            </summary>
            <remarks>
            Supported item types: bool, float, double, short, int, long, sbyte, string, ushort, ulong, byte, DateTime, Guid
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.ObjectCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.ObjectCollection"/> class.
            </summary>
            <param name="vector">The core vector of objects.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.RuntimeCollection`1">
            <summary>
            This Collection handles internal ArcGIS Runtime collections and is functionally equivalent to <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            This type is for internal use only and is not meant to be used directly.
            Instead use the concrete subclasses provided.
            </summary>
            <typeparam name="T">Collection type</typeparam>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This should ONLY be called from RuntimeObservableCollection
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Initialize">
            <summary>
            Do not call this method. Only for ObservableRuntimeCollection.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">Collection is Read Only</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is greater than <see cref="P:Esri.ArcGISRuntime.RuntimeCollection`1.Count"/>.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index"> The zero-based index of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is equal to or greater than <see cref="P:Esri.ArcGISRuntime.RuntimeCollection`1.Count"/>.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types if the collection allows it.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.-or-index is greater than <see cref="P:Esri.ArcGISRuntime.RuntimeCollection`1.Count"/>.</exception>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the collection at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the collection.</exception>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the collection.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object 
            that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be 
            used to iterate through the collection.</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only.</summary>
            <value>
            <c>true</c> if the collection is read-only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Esri.ArcGISRuntime.RuntimeCollection`1"/>.</summary>
            <value>The number of elements contained in the <see cref="T:Esri.ArcGISRuntime.RuntimeCollection`1"/></value>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Add(`0)">
            <summary>Adds an item to the collection.</summary>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Clear">
            <summary>Removes all items from the collection</summary>
            <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Contains(`0)">
            <summary>Determines whether the collection contains a specific value.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns><c>true</c> if item is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an
            <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from the collection. The System.Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the collection</summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>
            <c>true</c> if item was successfully removed from the collections;
            otherwise, <c>false</c>. This method also returns <c>false</c> if item is not found in
            the originalcollection.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an System.Array,
            starting at a particular System.Array index.</summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from <see cref="T:System.Collections.ICollection" />. The System.Array must have zero-based
            indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
            <value>
            <c>true</c> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
            <value>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</value>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.></returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#Add(System.Object)">
            <summary> Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList" />.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that
            the item was not inserted into the collection.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
            <returns><c>true</c> if the System.Object is found in the <see cref="T:System.Collections.IList" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortal">
            <summary>
            The ArcGISPortal class is part of the Portal API which provides a way to build applications that work with content from ArcGIS Online or an ArcGIS Portal.
            </summary>
            <remarks>
            <para>
            ArcGIS Portal is software technology from Esri that customers can deploy either on premise or in the cloud.
            ArcGIS Online is Esri's Software as a Service offering that represents GIS as a Service and is implemented using the same technology as ArcGIS Portal.
            The Portal API allows application developers to work with users, groups and content hosted within ArcGIS Online or within an ArcGIS Portal.
            The API allows developers to build web, mobile, and desktop applications that support sharing and collaboration using web maps.
            Organizational developers can also use the API to build custom applications for their users.
            The ArcGISPortal class provides the connection information to the portal (Uri, Token, ClientAppType, CultureInfo).
            Once instantiated by calling the static factory <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync"/>, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalInfo"/>, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser"/> and <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentVersion"/> are available
            and provide information about the portal and the current user.
            </para>
            <para>
            This class is needed to instantiate all others classes of the Portal library.
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync">
            <summary>
            Creates asynchronously a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class that represents ArcGIS Online (i.e http://www.arcgis.com/sharing/rest as Portal Uri).
            </summary>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync(System.Uri)">
            <summary>
            Creates asynchronously a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class from the specified portal Uri.
            </summary>
            <remarks>The portal Uri should end with '/sharing/rest'. An earlier pre-release version prior to rationalization and public release of the ArcGIS Online REST API may exist at http://&lt;host&gt;:&lt;port&gt;/sharing for the portal you are accessing.
            Developers are cautioned not to access this pre-release version.
            There are pitfalls to doing so and no advantages over using the released version of the api which is logically equivalent.
            </remarks>
            <param name="portalUri">The portal URI.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync(System.Uri,System.Globalization.CultureInfo)">
            <summary>
            Creates asynchronously a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class from the specified portal Uri.
            </summary>
            <remarks>The portal Uri should end with '/sharing/rest'. An earlier pre-release version prior to rationalization and public release of the ArcGIS Online REST API may exist at http://&lt;host&gt;:&lt;port&gt;/sharing for the portal you are accessing.
            Developers are cautioned not to access this pre-release version.
            There are pitfalls to doing so and no advantages over using the released version of the api which is logically equivalent.
            </remarks>
            <param name="portalUri">The portal URI.</param>
            <param name="culture">The culture for the portal.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync(System.Uri,System.Threading.CancellationToken,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Creates asynchronously a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class.
            If the URI is null, ArcGIS Online is used by default (http://www.arcgis.com/sharing/rest).
            </summary>
            <remarks>An earlier pre-release version prior to rationalization and public release of the ArcGIS Online REST API may exist at http://&lt;host&gt;:&lt;port&gt;/sharing for the portal you are accessing.
            Developers are cautioned not to access this pre-release version.
            There are pitfalls to doing so and no advantages over using the released version of the api which is logically equivalent.
            </remarks>
            <param name="portalUri">The portal URI.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <param name="credential">The security credential.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync(System.Uri,System.Globalization.CultureInfo,System.Threading.CancellationToken,Esri.ArcGISRuntime.Security.Credential)">
            <summary>
            Creates asynchronously a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> class.
            If the URI is null, ArcGIS Online is used by default (http://www.arcgis.com/sharing/rest).
            </summary>
            <remarks>An earlier pre-release version prior to rationalization and public release of the ArcGIS Online REST API may exist at http://&lt;host&gt;:&lt;port&gt;/sharing for the portal you are accessing.
            Developers are cautioned not to access this pre-release version.
            There are pitfalls to doing so and no advantages over using the released version of the api which is logically equivalent.
            </remarks>
            <param name="portalUri">The portal URI.</param>
            <param name="culture">The culture for the portal.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <param name="credential">The security credential.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.Uri">
            <summary>
            The URI of the ArcGIS Portal : http://&lt;host&gt;:&lt;port&gt;/sharing/rest.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalInfo">
            <summary>
            Provides instance-level information about the ArcGIS Portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser">
            <summary>
            Provides the current user.
            Available only to authenticated users after initialization.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentVersion">
            <summary>
            Provides the current version of the ArcGIS Portal
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.Credential">
            <summary>Gets or sets the security credential used to access the portal</summary>
            <remarks>
            Setting this property overrides any credentials set in the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager"/> associated
            with this portal.
            The credential can also be set when instantiating a portal instance with <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.CreateAsync"/> and 
            passing an appropriate credential.
            Note: Credential is not a serialized property.
            </remarks>
            <value>
            The security credential.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.ClientAppType">
            <summary>
            Optional. Gets or sets the type of the client app.
            </summary>
            <remarks>Although the REST service does not use this at v1.6.1 it may in the future start providing some client specific properties.</remarks>
            <value>
            The type of the client app.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CultureInfo">
            <summary>
            Optional. Gets the culture info used to access the portal. Must be set using the appropriate CreateAsync method.
            This locale might be used by the REST service to provide customized or localized content (featured groups/items etc) for different locales. 
            </summary>
            <value>
            The culture info.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the portal object.
            At the end of the initialization, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalInfo"/>, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser"/> and <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentVersion"/> are available.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchGroupsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Searches groups from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <remarks>
            <para>
            This method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> objects. Use the 
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to 
            get the IEnumerable collection of Portal.ArcGISPortalGroup objects.
            </para>
            <para>
            Portal.ArcGISPortalGroup objects are collections (aka. groups) of items, usually related to a specific area of interest 
            such as maps, applications, and tools. Groups allow members to contribute items as a useful way to collaborate. 
            The Portal.ArcGISPortal.SearchGroupsAsync Method allows searching for specific groups within ArcGIS Online (AGOL) or ArcGIS Portal.
            The Portal.ArcGISPortal.SearchGroupsAsync Method requires providing specific 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> to 
            limit the scope of which groups are returned. 
            </para>
            <para>
            You can call this method before calling one of the ArcGISPortal.CreateAsync Methods and 
            obtain Portal.ArcGISPortalGroup information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ArcGISPortal">Portal.ArcGISPortalGroup.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchGroupsAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalGroup will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user to 
            get information from the Portal.ArcGISPortal.SearchGroupsAsync Method. You can gain this information from anonymous 
            access. However, to obtain information about groups in your organization that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use the AuthenticationManager 
            by supplying the appropriate username/password credentials.
            </para>
            <para>
            By default the <see cref="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString">Portal.SearchParameters.QueryString</see> 
            Property that is used in the Portal.ArcGISPortal.SearchGroupsAsync Method uses a default set of high 
            performance index fields when providing simple keyword string(s) for the search. As of AGOL/ArcGIS Portal v2.1, these 
            fields are: <b>id</b>, <b>title</b>, <b>description</b>, <b>snippet</b>, <b>tags</b>, and <b>owner</b>. For more advanced searches, developers can preface their 
            simple keyword strings with a more exhaustive set of REST named fields followed by a colon (:). These advanced searches 
            can also take advantage of Boolean operators (AND, NOT, OR, +), wildcard operators (* and ?), as well as other techniques 
            to more fully utilize the AGOL/ArcGIS Portal search capabilities. Comprehensive details on using the advanced search 
            strings that follow the REST specification can be found in the 
            <a href="http://www.arcgis.com/apidocs/rest/searchreference.html" target="_blank">Search Reference</a> document in the 
            ArcGIS Portal API.
            </para>
            <para>
            The following are a few advanced REST search scenarios with example strings that you might consider using for the 
            Portal.SearchParameters.QueryString Property:
            </para>
            <para>
            To find one specific ArcGISPortalGroup by it's Id: "id:1db70a32f5f84ea9a88f5f460f22557b"<br/>
            To find all Private ArcGISPortalGroups with the word 'federal' in the Title field: "title:federal AND access:private"<br/>
            To find all ArcGISPortalGroups with the word 'federal' in the Title field and the word 'restricted' in the Description field: "title:federal AND description:restricted"<br/>
            To find all ArcGISPortalGroups with the word 'state' in the Title field and not have the word 'restricted' in the Description field: "title:state NOT description:restricted"<br/>
            </para>
            <para>
            NOTE: It is not required to use the advanced REST search syntax to find ArcGISPortalGroups with this Method. Simple string syntax for the Portal.SearchParameters.QueryString Property such as: "federal" will find all occurrences 
            of that string in the default high performance index fields.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search groups operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchGroupsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchGroupsAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches groups from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <remarks>
            <para>
            This method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> objects. Use the 
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to 
            get the IEnumerable collection of Portal.ArcGISPortalGroup objects.
            </para>
            <para>
            Portal.ArcGISPortalGroup objects are collections (aka. groups) of items, usually related to a specific area of interest 
            such as maps, applications, and tools. Groups allow members to contribute items as a useful way to collaborate. 
            The Portal.ArcGISPortal.SearchGroupsAsync Method allows searching for specific groups within ArcGIS Online (AGOL) or ArcGIS Portal.
            The Portal.ArcGISPortal.SearchGroupsAsync Method requires providing specific 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> to 
            limit the scope of which groups are returned. 
            </para>
            <para>
            You can call this method before calling one of the ArcGISPortal.CreateAsync Methods and 
            obtain Portal.ArcGISPortalGroup information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ArcGISPortal">Portal.ArcGISPortalGroup.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchGroupsAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalGroup will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user to 
            get information from the Portal.ArcGISPortal.SearchGroupsAsync Method. You can gain this information from anonymous 
            access. However, to obtain information about groups in your organization that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use the AuthenticationManager 
            by supplying the appropriate username/password credentials.
            </para>
            <para>
            By default the <see cref="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString">Portal.SearchParameters.QueryString</see> 
            Property that is used in the Portal.ArcGISPortal.SearchGroupsAsync Method uses a default set of high 
            performance index fields when providing simple keyword string(s) for the search. As of AGOL/ArcGIS Portal v2.1, these 
            fields are: <b>id</b>, <b>title</b>, <b>description</b>, <b>snippet</b>, <b>tags</b>, and <b>owner</b>. For more advanced searches, developers can preface their 
            simple keyword strings with a more exhaustive set of REST named fields followed by a colon (:). These advanced searches 
            can also take advantage of Boolean operators (AND, NOT, OR, +), wildcard operators (* and ?), as well as other techniques 
            to more fully utilize the AGOL/ArcGIS Portal search capabilities. Comprehensive details on using the advanced search 
            strings that follow the REST specification can be found in the 
            <a href="http://www.arcgis.com/apidocs/rest/searchreference.html" target="_blank">Search Reference</a> document in the 
            ArcGIS Portal API.
            </para>
            <para>
            The following are a few advanced REST search scenarios with example strings that you might consider using for the 
            Portal.SearchParameters.QueryString Property:
            </para>
            <para>
            To find one specific ArcGISPortalGroup by it's Id: "id:1db70a32f5f84ea9a88f5f460f22557b"<br/>
            To find all Private ArcGISPortalGroups with the word 'federal' in the Title field: "title:federal AND access:private"<br/>
            To find all ArcGISPortalGroups with the word 'federal' in the Title field and the word 'restricted' in the Description field: "title:federal AND description:restricted"<br/>
            To find all ArcGISPortalGroups with the word 'state' in the Title field and not have the word 'restricted' in the Description field: "title:state NOT description:restricted"<br/>
            </para>
            <para>
            NOTE: It is not required to use the advanced REST search syntax to find ArcGISPortalGroups with this Method. Simple string syntax for the Portal.SearchParameters.QueryString Property such as: "federal" will find all occurrences 
            of that string in the default high performance index fields.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search groups operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchGroupsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchUsersAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Searches users from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <remarks>
            <para>
            This method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser">Portal.ArcGISPortalUser</see> objects. Use the 
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to 
            get the IEnumerable collection of Portal.ArcGISPortalUser objects.
            </para>
            <para>
            Portal.ArcGISPortalUser objects are user accounts within ArcGIS Online (AGOL) or ArcGIS Portal. Users add content 
            to AGOL/ArcGIS Portal in the form of maps, tools, and applications. The Portal.ArcGISPortal.SearchUsersAsync 
            Method allows searching for specific user accounts within ArcGIS Online (AGOL) or ArcGIS Portal. The 
            Portal.ArcGISPortal.SearchUsersAsync Method requires providing specific 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> to 
            limit the scope of which users are returned. 
            </para>
            <para>
            You can call this method before calling one of the 
            ArcGISPortal.CreateAsync Methods and 
            obtain Portal.ArcGISPortalUser information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ArcGISPortal">Portal.ArcGISPortalUser.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchUsersAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalUser will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user to 
            get information from the Portal.ArcGISPortal.SearchUsersAsync Method. You can gain this information from anonymous 
            access. However, to obtain information about users  in your organization that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use the AuthenticationManager 
            by supplying the appropriate username/password credentials.
            </para>
            <para>
            <b>NOTE:</b> While the Portal.ArcGISPortal.SearchUsersAsync Method does return an IEnumerable collection of Portal.ArcGISPortalUser objects as result of the search operation, not all of the Properties of the Portal.ArcGISPortalUser objects will contain data. This is by design to protect certain confidential information about a user. As of AGOL/ArcGIS Portal version 2.1 only the following ArcGISPortalUser Properties will be populated with information for the user search operation: .Username, .FullName, .Description, .Tags. .Culture, .Region, .ThumbnailUri, .CreationDate, and .ModificationDate. For more details on the types of information that can be obtained from the user search operation, review the ArcGIS Portal API REST documentation for the <a href="http://www.arcgis.com/apidocs/rest/usersearch.html" target="_blank">user search operation</a>.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search users operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchUsersAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches users from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <remarks>
            <para>
            This method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser">Portal.ArcGISPortalUser</see> objects. Use the 
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to 
            get the IEnumerable collection of Portal.ArcGISPortalUser objects.
            </para>
            <para>
            Portal.ArcGISPortalUser objects are user accounts within ArcGIS Online (AGOL) or ArcGIS Portal. Users add content 
            to AGOL/ArcGIS Portal in the form of maps, tools, and applications. The Portal.ArcGISPortal.SearchUsersAsync 
            Method allows searching for specific user accounts within ArcGIS Online (AGOL) or ArcGIS Portal. The 
            Portal.ArcGISPortal.SearchUsersAsync Method requires providing specific 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> to 
            limit the scope of which users are returned. 
            </para>
            <para>
            You can call this method before calling one of the 
            ArcGISPortal.CreateAsync Methods and 
            obtain Portal.ArcGISPortalUser information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ArcGISPortal">Portal.ArcGISPortalUser.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchUsersAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalUser will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user to 
            get information from the Portal.ArcGISPortal.SearchUsersAsync Method. You can gain this information from anonymous 
            access. However, to obtain information about users  in your organization that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use the AuthenticationManager 
            by supplying the appropriate username/password credentials.
            </para>
            <para>
            <b>NOTE:</b> While the Portal.ArcGISPortal.SearchUsersAsync Method does return an IEnumerable collection of Portal.ArcGISPortalUser objects as result of the search operation, not all of the Properties of the Portal.ArcGISPortalUser objects will contain data. This is by design to protect certain confidential information about a user. As of AGOL/ArcGIS Portal version 2.1 only the following ArcGISPortalUser Properties will be populated with information for the user search operation: .Username, .FullName, .Description, .Tags. .Culture, .Region, .ThumbnailUri, .CreationDate, and .ModificationDate. For more details on the types of information that can be obtained from the user search operation, review the ArcGIS Portal API REST documentation for the <a href="http://www.arcgis.com/apidocs/rest/usersearch.html" target="_blank">user search operation</a>.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search users operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)">
            <summary>
            Searches items from a query string and/or an extent.
            </summary>
            <param name="searchParameters">The spatial search parameters.</param>
            <returns>
            The task object representing the asynchronous search items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches items from a query string and/or an extent.
            </summary>
            <param name="searchParameters">The spatial search parameters.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous search items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Searches items from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <remarks>
            <para>
            This version of the Method obtains a 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItem</see> objects. 
            Use the <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> 
            Property to get the IEnumerable collection of Portal.ArcGISPortalItem objects.
            </para>
            <para>
            Portal.ArcGISPortalItems objects are user items, usually related to a specific area of interest such as 
            maps, applications, and tools. This version of the Portal.ArcGISPortal.SearchItemsAsync Method allows searching 
            for specific items within ArcGIS Online (AGOL) or ArcGIS Portal by providing 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> 
            to limit the scope of which items are returned. There is also another version of this Method that has the additional 
            capability of using a search extent to find items that are within or intersect a supplied envelope, for more details 
            see the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)">Portal.ArcGISPortal.SearchItemsAsync(SpatialSearchParameters)</see> 
            Method.
            </para>
            <para>
            You can call this version of the Method before calling the one of the 
            ArcGISPortal.CreateAsync Methods 
            and obtain Portal.ArcGISPortalItem information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ArcGISPortal">Portal.ArcGISPortalItem.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchItemsAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalItem will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user 
            to get information from this version of the Portal.ArcGISPortal.SearchItemsAsync Method. You can gain this information 
            from anonymous access. However, to obtain information about items that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use 
            the AuthenticationManager by supplying the appropriate username/password credentials.
            </para>
            <para>
            By default the <see cref="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString">Portal.SearchParameters.QueryString</see> 
            Property that is used in this version of the Portal.ArcGISPortal.SearchItemsAsync Method uses a default set of high 
            performance index fields when providing simple keyword string(s) for the search. As of AGOL/ArcGIS Portal v2.1, these 
            fields are: <b>title</b>, <b>tags</b>, <b>snippet</b>, <b>description</b>, <b>accessinformation</b>, 
            <b>spatialreference</b>, <b>type</b> and <b>typekeywords</b>. For more advanced searches, developers can preface their 
            simple keyword strings with a more exhaustive set of REST named fields followed by a colon (:). These advanced searches 
            can also take advantage of Boolean operators (AND, NOT, OR, +), wildcard operators (* and ?), as well as other techniques 
            to more fully utilize the AGOL/ArcGIS Portal search capabilities. Comprehensive details on using the advanced search 
            strings that follow the REST specification can be found in the 
            <a href="http://www.arcgis.com/apidocs/rest/searchreference.html" target="_blank">Search Reference</a> document in the 
            ArcGIS Portal API.
            </para>
            <para>
            The following are a few advanced REST search scenarios with example strings that you might consider using for the 
            Portal.SearchParameters.QueryString Property:
            </para>
            <para>
            To find one specific ArcGISPortalItem by it's Id: "id:00e5e70929e14055ab686df16c842ec1"<br/>
            To find all WebMap ArcGISPortalItems with the word 'florida' in the Title field: "title:florida AND type:web map"<br/>
            To find all Layer Package ArcGISPortalItems with the word 'florida' in the Title field: "title:florida AND type:layer package"<br/>
            To find all ArcGISPortalItems with the word 'florida' in the Title field and the word 'esri' in the Owner field: "title:florida AND owner:esri"<br/>
            To find all ArcGISPortalItems with the word 'florida' in the Title field and not have the word 'esri' in the Owner field: "title:florida NOT owner:esri"<br/>
            To find all ArcGISPortalItems with located within a specific spatial extent and the word 'esri' in the Owner: "extent:[-114.3458, 21.7518] - [-73.125, 44.0658] AND owner:esri"<br/>
            To find all ArcGISPortalItems with a SpatialReference.WKID of 4267: "spatialreference:4267"<br/>
            To find all ArcGISPortalItems with a SpatialReference.WKID of 4267 or have the word 'cancer' in the Title field: "spatialreference:4267 OR title:cancer"<br/>
            </para>
            <para>
            NOTE: It is not required to use the advanced REST search syntax to find ArcGISPortalItems with this version of the 
            Method. Simple string syntax for the Portal.SearchParameters.QueryString Property such as: "florida" will find all occurrences 
            of that string in the default high performance index fields.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches items from a query string.
            </summary>
            <param name="searchParameters">The search parameters.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <remarks>
            <para>
            This version of the Method obtains a 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">Portal.SearchResultInfo&lt;T&gt;</see> 
            object that contains <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItem</see> objects. 
            Use the <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">Portal.SearchResultInfo&lt;T&gt;.Results</see> 
            Property to get the IEnumerable collection of Portal.ArcGISPortalItem objects.
            </para>
            <para>
            Portal.ArcGISPortalItems objects are user items, usually related to a specific area of interest such as 
            maps, applications, and tools. This version of the Portal.ArcGISPortal.SearchItemsAsync Method allows 
            searching for specific items within ArcGIS Online (AGOL) or ArcGIS Portal by providing 
            <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters">Portal.SearchParameters</see> 
            to limit the scope of which items are returned. There is also another version of this Method that has the additional 
            capability of using a search extent to find items that are within or intersect a supplied envelope, for more details 
            see the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)">Portal.ArcGISPortal.SearchItemsAsync(SpatialSearchParameters)</see> 
            Method.
            </para>
            <para>
            You can call this version of the Method before calling the one of the 
            ArcGISPortal.CreateAsync Methods 
            and obtain Portal.ArcGISPortalItem information but the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ArcGISPortal">Portal.ArcGISPortalItem.ArcGISPortal</see> 
            Property will not be populated with valid information (i.e. its value will be Nothing/null). It is a recommended best 
            practice to call one of the ArcGISPortal.CreateAsync Methods before calling the Portal.ArcGISPortal.SearchItemsAsync 
            Method so that all of the properties in the Portal.ArcGISPortal.ArcGISPortalItem will contain valid data.
            </para>
            <para>
            You do not have to be a logged in user 
            to get information from this version of the Portal.ArcGISPortal.SearchItemsAsync Method. You can gain this information 
            from anonymous access. However, to obtain information about items that have a 
            <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> you need to use 
            the AuthenticationManager by supplying the appropriate username/password credentials.
            </para>
            <para>
            By default the <see cref="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString">Portal.SearchParameters.QueryString</see> 
            Property that is used in this version of the Portal.ArcGISPortal.SearchItemsAsync Method uses a default set of high 
            performance index fields when providing simple keyword string(s) for the search. As of AGOL/ArcGIS Portal v2.1, these 
            fields are: <b>title</b>, <b>tags</b>, <b>snippet</b>, <b>description</b>, <b>accessinformation</b>, 
            <b>spatialreference</b>, <b>type</b> and <b>typekeywords</b>. For more advanced searches, developers can preface their 
            simple keyword strings with a more exhaustive set of REST named fields followed by a colon (:). These advanced searches 
            can also take advantage of Boolean operators (AND, NOT, OR, +), wildcard operators (* and ?), as well as other techniques 
            to more fully utilize the AGOL/ArcGIS Portal search capabilities. Comprehensive details on using the advanced search 
            strings that follow the REST specification can be found in the 
            <a href="http://www.arcgis.com/apidocs/rest/searchreference.html" target="_blank">Search Reference</a> document in the 
            ArcGIS Portal API.
            </para>
            <para>
            The following are a few advanced REST search scenarios with example strings that you might consider using for the 
            Portal.SearchParameters.QueryString Property:
            </para>
            <para>
            To find one specific ArcGISPortalItem by it's Id: "id:00e5e70929e14055ab686df16c842ec1"<br/>
            To find all WebMap ArcGISPortalItems with the word 'florida' in the Title field: "title:florida AND type:web map"<br/>
            To find all Layer Package ArcGISPortalItems with the word 'florida' in the Title field: "title:florida AND type:layer package"<br/>
            To find all ArcGISPortalItems with the word 'florida' in the Title field and the word 'esri' in the LicenseInfo field: "title:florida AND licenseinfo:esri"<br/>
            To find all ArcGISPortalItems with the word 'florida' in the Title field and not have the word 'esri' in the LicenseInfo field: "title:florida NOT licenseinfo:esri"<br/>
            To find all ArcGISPortalItems with located within a specific spatial extent and the word 'esri' in the LicenseInfo: "extent:[-114.3458, 21.7518] - [-73.125, 44.0658] AND licenseinfo:esri"<br/>
            To find all ArcGISPortalItems with a SpatialReference.WKID of 4267: "spatialreference:4267"<br/>
            To find all ArcGISPortalItems with a SpatialReference.WKID of 4267 or have the word 'cancer' in the Title field: "spatialreference:4267 OR title:cancer"<br/>
            </para>
            <para>
            NOTE: It is not required to use the advanced REST search syntax to find ArcGISPortalItems with this version of the 
            Method. Simple string syntax for the Portal.SearchParameters.QueryString Property such as: "florida" will find all occurrences 
            of that string in the default high performance index fields.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous search items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)"/>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.AddItemAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>
            Adds an item without content asynchronously.
            This operation is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            The user automatically becomes the owner of the item.
            The item by default is flagged as private (e.g., not shared with any group). This can be changed with the share item operation.
            </para>
            <para>
            The url used for an item must be unique within the particular user's folder.
            </para>
            </remarks>
            <param name="portalItem">The portal item to add.</param>
            <returns>
            The task object representing the asynchronous add item operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">portalItem</exception>
            <exception cref="T:System.Exception">Operation is available only to authenticated users.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.AddItemAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent)">
            <summary>
            Adds an item with content asynchronously.
            This operation is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            The user automatically becomes the owner of the item.
            The item by default is flagged as private (e.g., not shared with any group). This can be changed with the share item operation.
            </para>
            <para>
            The url used for an item must be unique within the particular user's folder.
            </para>
            </remarks>
            <param name="portalItem">The portal item to add.</param>
            <param name="portalItemContent">Content of the portal item.</param>
            <returns>
            The task object representing the asynchronous add item operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">portalItem</exception>
            <exception cref="T:System.Exception">Operation is available only to authenticated users.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.AddItemAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent,System.String)">
            <summary>
            Adds an item with or without content to the specified user folder.
            This operation is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            The user automatically becomes the owner of the item.
            The item by default is flagged as private (e.g., not shared with any group). This can be changed with the share item operation.
            </para>
            The url used for an item must be unique within the particular user's folder.
            <para>
            </para>
            </remarks>
            <param name="portalItem">The portal item to add.</param>
            <param name="portalItemContent">Content of the portal item (may be null).</param>
            <param name="folderId">The user folder ID</param>
            <returns>
            The task object representing the asynchronous add item operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">portalItem</exception>
            <exception cref="T:System.Exception">Operation is available only to authenticated users.</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.AddItemAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds an item with or without content asynchronously.
            This operation is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            The user automatically becomes the owner of the item.
            The item by default is flagged as private (e.g., not shared with any group). This can be changed with the share item operation.
            </para>
            <para>
            The url used for an item must be unique within the particular user's folder.
            </para>
            </remarks>
            <param name="portalItem">The portal item to add.</param>
            <param name="portalItemContent">Content of the portal item (may be null).</param>
            <param name="folderId">The user folder ID (root folder if null)</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous add item operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
            <exception cref="T:System.ArgumentNullException">portalItem</exception>
            <exception cref="T:System.Exception">Operation is available only to authenticated users.</exception>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.UnsuccessfulOperationException">
            <summary>
            Exception returned when a portal POST operation didn't succeed (i.e. returned success=false)
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment">
            <summary>
            Represents a comment on a portal item.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> class from the specified comment id.
            </summary>
            <param name="portalItem">The portal item.</param>
            <param name="id">The comment ID.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> class from the specified comment id.
            </summary>
            <param name="portalItem">The portal item.</param>
            <param name="id">The comment ID.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the comment object from the specified comment id.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.Id">
            <summary>
            Gets the comment id.
            </summary>
            <value>
            The comment id.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.DeleteAsync">
            <summary>
            Deletes the comment asynchronously.
            Available only to the authenticated user who originally created the comment.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the comment asynchronously.
            Available only to the authenticated user who originally created the comment.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.UpdateAsync(System.String)">
            <summary>
            Updates the comment asynchronously.
            Available only to the authenticated user who originally created the comment.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="comment">The new comment.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.UpdateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the comment asynchronously.
            Available only to the authenticated user who originally created the comment.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="comment">The new comment.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.ArcGISPortalItem">
            <summary>
            Gets the portal item that the comment is associated with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.Owner">
            <summary>
            Gets the user name of the user who created the comment.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.Comment">
            <summary>
            Gets the comment text.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalComment.CreationDate">
            <summary>
            Gets the date and time the comment was created.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder">
            <summary>
            Represents a sub folder in the home folder of an user.
            The folders are used to organize content in a portal.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalUser,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> class for the specified folder ID.
            </summary>
            <param name="portalUser">The portal user.</param>
            <param name="folderId">The folder ID.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalUser,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> class for the specified folder ID.
            </summary>
            <param name="portalUser">The portal user.</param>
            <param name="folderId">The folder ID.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.InitializeAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes the folder object from the specified folder id.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.Id">
            <summary>
            Gets the folder id.
            </summary>
            <value>
            The folder id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.ArcGISPortalUser">
            <summary>
            Gets the portal user that owns this folder.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.Title">
            <summary>
            Gets the title of the folder.
            </summary>
            <value>
            The title/name of the folder.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.CreationDate">
            <summary>
            Gets the date and time the folder was created.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.GetItemsAsync">
            <summary>
            Gets the items of the user that are stored in this folder.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItems</see> that belong to a 
            particular authenticated user for nested sub-folders in their ArcGIS Online (AGOL) and ArcGIS Portal account. 
            This method performs an asynchronous request to obtain an IEnumerable of Portal.ArcGISPortalItem objects for 
            the credentialed logged in user. 
            You cannot use anonymous access to obtain a 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder">Portal.ArcGISPortalFolder</see> object and use this 
            Method to obtain valid results. As AGOL/ArcGIS Portal require the use of long term tokens to access secured 
            user information.
            </para>
            <para>
            It is a recommended best practice to call one of the 
            ArcGISPortal.CreateAsync 
            Methods to initialize the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal">Portal.ArcGISPortal</see> object 
            such that the credentialed 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser">Portal.ArcGISPortal.CurrentUser</see> can be 
            obtained. Then for the credentialed user, call the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync">Portal.ArcGISPortalUser.GetFoldersAsync</see> 
            Method to obtain an IEnumerable of Portal.ArcGISPortalFolder objects for which this Method can be used. It is not 
            recommended to try an obtain Portal.ArcGISPortalUser objects via the following Methods and Properties, because the 
            returned users are not authenticated credentialed users and you will not be able to obtain sub-folder information: 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchUsersAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">Portal.ArcGISPortal.SearchUsersAsync</see>, 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetGroupUsersAsync">Portal.ArcGISPortalGroup.GetGroupUsersAsync</see>, 
            and <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync">Portal.ArcGISPortalInfo.QueryUsersAsync</see>.
            </para>
            <para>
            To obtain Portal.ArcGISPortalItem objects that exist at the root level of the user account on AGOL/ArcGIS Portal use 
            the <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetItemsAsync">Portal.ArcGISPortalUser.GetItemsAsync</see> 
            Method.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.GetItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the items of the user that are stored in this folder.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItems</see> that belong to a 
            particular authenticated user for nested sub-folders in their ArcGIS Online (AGOL) and ArcGIS Portal account. 
            This method performs an asynchronous request to obtain an IEnumerable of Portal.ArcGISPortalItem objects for 
            the credentialed logged in user. 
            You cannot use anonymous access to obtain a 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder">Portal.ArcGISPortalFolder</see> object and use this 
            Method to obtain valid results. As AGOL/ArcGIS Portal require the use of long term tokens to access secured 
            user information.
            </para>
            <para>
            It is a recommended best practice to call one of the 
            ArcGISPortal.CreateAsync 
            Methods to initialize the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortal">Portal.ArcGISPortal</see> object 
            such that the credentialed 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser">Portal.ArcGISPortal.CurrentUser</see> can be 
            obtained. Then for the credentialed user, call the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync">Portal.ArcGISPortalUser.GetFoldersAsync</see> 
            Method to obtain an IEnumerable of Portal.ArcGISPortalFolder objects for which this Method can be used. It is not 
            recommended to try an obtain Portal.ArcGISPortalUser objects via the following Methods and Properties, because the 
            returned users are not authenticated credentialed users and you will not be able to obtain sub-folder information: 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchUsersAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">Portal.ArcGISPortal.SearchUsersAsync</see>, 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetGroupUsersAsync">Portal.ArcGISPortalGroup.GetGroupUsersAsync</see>, 
            and <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync">Portal.ArcGISPortalInfo.QueryUsersAsync</see>.
            </para>
            <para>
            To obtain Portal.ArcGISPortalItem objects that exist at the root level of the user account on AGOL/ArcGIS Portal use 
            the <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetItemsAsync">Portal.ArcGISPortalUser.GetItemsAsync</see> 
            Method.
            </para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">
            <summary>
            Represents a group within the portal (e.g., "San Bernardino Fires" ).
            </summary>
            <remarks>
            <para>
            The owner is automatically an administrator and is returned in the list of admins.
            The visibility of the group to other users is determined by the access property. If the group is private no one except the administrators and the members of the group will be able to see it.
            If the group is shared with an organization, then all members of the organization will be able to find the group.
            </para>
            <para>
            Administrators can invite, add to or remove members from a group as well as update or delete the group.
            The administrator for an organization may also reassign the group to another member of the organization. Group members may leave the group. Authenticated users may apply to join a group. 
            </para>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> class.
            </summary>
            <remarks>
            <para>
            This Method initializes a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see>. Portal.ArcGISPortalGroup 
            objects are collections (aka. groups) of items, usually related to a specific area of interest such as maps, 
            applications, and tools. Groups allow members to contribute items as a useful way to collaborate. 
            This Method finds a specific group within ArcGIS Online (AGOL) or ArcGIS Portal by providing the Id value.
            </para>
            <para>
            You do not have to be a logged in user to get information from this Method. 
            You can gain this information from anonymous access. However, to obtain information about an group that has 
            a <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> or 
            <b>Shared</b> you need to use the AuthenticationManager by supplying the appropriate username/password 
            credentials. As AGOL and ArcGIS Portal require the use of long term tokens to access secured information 
            (i.e. information that is Private/Shared).
            </para>
            <para>
            </para>
            </remarks>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="groupId">The group ID.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> class.
            </summary>
            <remarks>
            <para>
            This Method initializes a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see>. Portal.ArcGISPortalGroup 
            objects are collections (aka. groups) of items, usually related to a specific area of interest such as maps, 
            applications, and tools. Groups allow members to contribute items as a useful way to collaborate. 
            This Method finds a specific group within ArcGIS Online (AGOL) or ArcGIS Portal by providing the Id value.
            </para>
            <para>
            You do not have to be a logged in user to get information from this Method. 
            You can gain this information from anonymous access. However, to obtain information about an group that has 
            a <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> or 
            <b>Shared</b> you need to use the AuthenticationManager by supplying the appropriate username/password 
            credentials. As AGOL and ArcGIS Portal require the use of long term tokens to access secured information 
            (i.e. information that is Private/Shared).
            </para>
            <para>
            </para>
            </remarks>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="groupId">The group ID.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ArcGISPortal">
            <summary>
            Gets the ArcGIS portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">
            <summary>
            Gets the group id.
            </summary>
            <value>
            The group id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Title">
            <summary>
            Gets the group title.
            This is the name that is displayed to users and by which they refer to the group.
            </summary>
            <remarks>Every group must have a title and it must be unique for a user.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.IsInvitationOnly">
            <summary>
            Gets a value indicating whether this instance is invitation only.
            </summary>
            <value>
            	<c>true</c> if this group will not accept join requests;
            	<c>false</c> if this group do not require an invitation to join.
            </value>
            <remarks>Only group owners and admins can invite users to the group. false is the default.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Owner">
            <summary>
            Gets the username of the group's owner.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Description">
            <summary>
            Gets the detailed description of the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Snippet">
            <summary>
            Gets a short summary that describes the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Tags">
            <summary>
            Gets the tags.
            </summary>
            <remarks>Tags are words or short phrases that describe your group.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.IsViewOnly">
            <summary>
            Indicates whether the group members are not able to share items to the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.SortField">
            <summary>
            Gets the sort field to use for this group. Can be one of 'title', 'owner', 'avgrating', 'numviews', 'created', 'modified' 
            </summary>
            <remark>Sorting information is only metadata on the group and does not impact any other calls.
            It is up to the client to honor the sort field and sort order when rendering the content of the group.
            </remark>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Phone">
            <summary>
            Gets the group contact information.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ThumbnailPath">
            <summary>
            Gets the pathname to the thumbnail image to be used for the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.IsFavorites">
            <summary>
            Gets a value indicating whether the group is a user's group of favorites.
            </summary>
            <value>
              <c>true</c> if the group is a user's favorites group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.CreationDate">
            <summary>
            Gets the date the group was created.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ModificationDate">
            <summary>
            Gets the date the group was last modified.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ThumbnailUri">
            <summary>
            Gets the thumbnail URI.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Access">
            <summary>
            Gets the access level on the group. <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Private"/> is the default.
            If <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Organization">Organization</see>, only members of the organization can access the group.
            If <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Public">Public</see>, all users can access the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.SortOrder">
            <summary>
            Gets the sort order to use for this group.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.SortField"/>
            <remark>Sorting information is only metadata on the group and does not impact any other calls.
            It is up to the client to honor the sort field and sort order when rendering the content of the group.
            </remark>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetGroupUsersAsync">
            <summary>
            Gets the users, owner, and administrators of the group.
            </summary>
            <remarks>
            <para>
            This Method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers">Portal.ArcGISPortalGroupUsers</see> 
            object. The Portal.ArcGISPortalGroupUsers object provides user information for a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> such as: the usernames of the 
            administrators of the group, the username of the owner of the group, and the usernames of the members who can access 
            information in the group. Portal.ArcGISPortalGroup objects are collections (aka. groups) of items, usually related 
            to a specific area of interest such as maps, applications, and tools. Groups allow members to contribute items as a 
            useful way to collaborate.
            </para>
            <para>
            You do not have to be a logged in user to get information from this Method. 
            You can gain this information from anonymous access. However, to obtain information about a group that has 
            a <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> or 
            <b>Shared</b> you need to use the AuthenticationManager by supplying the appropriate username/password 
            credentials. As AGOL and ArcGIS Portal require the use of long term tokens to access secured information 
            (i.e. information that is Private/Shared).
            </para>
            <para>
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous get group users operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetGroupUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the users, owner, and administrators of the group.
            </summary>
            <remarks>
            <para>
            This Method obtains a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers">Portal.ArcGISPortalGroupUsers</see> 
            object. The Portal.ArcGISPortalGroupUsers object provides user information for a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> such as: the usernames of the 
            administrators of the group, the username of the owner of the group, and the usernames of the members who can access 
            information in the group. Portal.ArcGISPortalGroup objects are collections (aka. groups) of items, usually related 
            to a specific area of interest such as maps, applications, and tools. 
            Groups allow members to contribute items as a useful way to collaborate.
            </para>
            <para>
            You do not have to be a logged in user to get information from this Method. 
            You can gain this information from anonymous access. However, to obtain information about a group that has 
            a <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> or 
            <b>Shared</b> you need to use the AuthenticationManager by supplying the appropriate username/password 
            credentials. As AGOL and ArcGIS Portal require the use of long term tokens to access secured information 
            (i.e. information that is Private/Shared).
            </para>
            <para>
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get group users operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetItemsAsync">
            <summary>
            Gets the items that are shared by the group.
            </summary>
            <remarks>
            <para>
            Available only to the users of the group and the administrator of the organization which the group belongs to, if any.
            </para>
            <para>
            To get items without being an user of the group, use <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/> 
            with a query on the group by using the syntax group:&lt;groupId&gt;
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the items that are shared by the group.
            </summary>
            <remarks>
            <para>
            Available only to the users of the group and the administrator of the organization which the group belongs to, if any.
            </para>
            <para>
            To get items without being an user of the group, use <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/> 
            with a query on the group by using the syntax group:&lt;groupId&gt;
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetUserMembershipAsync">
            <summary>
            Gets the user member ship.
            Available only if the request is done from an authenticated user.
            </summary>
            <returns>
            The task object representing the asynchronous get user membership operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.UserMembership"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetUserMembershipAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the user member ship.
            Available only if the request is done from an authenticated user.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get user membership operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.UserMembership"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.ReflectionInitFrom(Esri.ArcGISRuntime.Portal.ArcGISPortalGroup)">
            <summary>
            Copy all fields except ArcGISPortal and ISInitialized (properties are copied with backing fields)
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.SearchGroupForFeaturedQuery(Esri.ArcGISRuntime.Portal.ArcGISPortal,Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches the group for a featured query.
            If the query returns more than one group, we try to select these with the exact title.
            </summary>
            <param name="arcGISPortal"></param>
            <param name="searchParameters">The search parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers">
            <summary>
            The users, owner, and administrators of a group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers.ArcGISPortalGroup">
            <summary>
            Gets the ArcGIS portal group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers.Owner">
            <summary>
            Gets the user name of the owner of the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers.Admins">
            <summary>
            Gets the user names of the administrators of the group.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroupUsers.Users">
            <summary>
            Gets the user names of the users in the group.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo">
            <summary>
            Includes information such as the name, logo, featured items and supported protocols (http vs https) for this portal.
            </summary>
            <remarks>
            <para>
            If the user is not logged in or if the logged user doesn't belong to an organization, these information concern the default view of the portal.
            If the user is logged in or if the Url is an organization custom Url, the information will be specific to the organization that the user belongs to.
            The default view of the portal is dependent on the culture of the user which is obtained from the users profile.
            </para>
            <para>
            Most generally you will get the current portal info by the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalInfo">ArcGISPortalInfo</see> property that is available after the portal has been initialized.
            But it's also possible to instantiate a new ArcGISPortalInfo object from a specific organization id by using the static <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String,System.Threading.CancellationToken)"/> factory.
            </para>
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CurrentUserSubscriptionInfo">
            <summary>
            Captures the ArcGIS online subscription info, used to validate named user login.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo"/> class.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="organizationId">The organization id.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo"/> class.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="organizationId">The organization id.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ArcGISPortal">
            <summary>
            Gets the ArcGIS portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Id">
            <summary>
            Gets the id of the organization, if the user belongs to one.
            </summary>
            <value>
            The organization id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.IsAllSSL">
            <summary>
            Gets a value indicating whether the access to the portal resources must occur over SSL.
            </summary>
            <value>
            	<c>true</c> if access to the portal resources must occur over SSL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery">
            <summary>
            Gets the query used to determine which group should drive the gallery of basemaps displayed in the client application for the specified culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected, and those items shared with the group should be displayed in the client’s basemap gallery (if applicable). 
            Ex: "title:'ArcGIS Online Basemaps' AND owner:esri" 
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanListApps">
            <summary>
            Gets a value indicating whether an organization can list applications in the marketplace 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanListData">
            <summary>
            Gets a value indicating whether an organization can list data services in the marketplace 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanListPreProvisionedItems">
            <summary>
            Gets a value indicating whether an organization can list pre-provisioned items in the marketplace.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanProvisionDirectPurchase">
            <summary>
            Gets a value indicating whether an organization can provision direct purchases in the marketplace without customer request.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanSearchPublic">
            <summary>
            Gets a value indicating whether members of the organization can search outside of the organization.
            When true, public items, groups and users are included in search queries.
            When false, no public items outside of the organization are included.
            However, public items which are part of the organization are included.
            </summary>
            <value>
            	<c>true</c> if the members of the organization can search outside of the organization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanSharePublic">
            <summary>
            Gets a value indicating whether members of the organization can share resources outside of the organization.
            </summary>
            <value>
            	<c>true</c> if the members of the organization can share outside of the organization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanSignInArcGIS">
            <summary>
            Allows an organization with an enterprise IDP configured to be able to turn on or off the ArcGIS sign in. The default is true.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanSignInIdp">
            <summary>
            Allows an organization with an enterprise IDP configured to be able to turn on or off the enterprise sign in. The default is true.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ColorSetsGroupQuery">
            <summary>
            Gets the color sets group for rendering in map viewer.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.IsCommentsEnabled">
            <summary>
            Allows the organization to disable commenting. true is the default.
            When commentsEnabled is false, comments are hidden and not removed. numComments are set to zero for all items in the organization.
            Calls to add a comment and view comments will fail. If the organization re-enables comments, the comments display and numComments are restored.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Culture">
            <summary>
            Gets the organization default locale (language and country) information.
            The format for culture code is based on a language code and a country code separated by a dash.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CustomBaseUrl">
            <summary>
            Gets the custom base URL for the organizations.
            </summary>
            <remarks>the UrlKey od the organization prefixes this base URL</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.DefaultBasemap">
            <summary>
            Gets the default basemap to be used by the client application for the specified culture when creating new maps.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Description">
            <summary>
            Gets the description of the organization.
            In the case of non-organizational users of ArcGIS Online or a multi-tenant portal, this will be null.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups">
            <summary>
            Gets the featured groups to possibly display on the group page or to feature for an organization.
            </summary>
            <remarks>This property returns an enumeration of <see cref="T:Esri.ArcGISRuntime.Portal.GroupInfo"/> that provide access to the owner and title for each featured group.
            To get the enumeration of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/>, you can use the method <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.GetFeaturedGroupsAsync"/></remarks>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.GetFeaturedGroupsAsync"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery">
            <summary>
            Gets the query used to determine which group should drive the gallery of featured items displayed in the client application for the specified culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected.
            If the selected group has a null featuredItemsId property then the client should display the items that are shared with the group.
            If the featuredItemsId is non-null then the client should display the items that are related to the featured items item 
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent">
            <summary>
            Gets the query used to determine which group should drive the featured content displayed on the home page of client application for the specified culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected, and those items shared with the group should be displayed in the home page gallery. 
            Ex: "title:'Featured Maps' AND owner:esri" 
            For a logged in user who is part of an organization this property will always be set from the account properties and will be null if not set by the organizational account administrators. 
            </summary>
            <value>
            The featured content of the home page.
            </value>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContentCount">
            <summary>
            Gets the number of items to show per page for the featured content screens (max=100).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HttpPort">
            <summary>
            Gets the port used by the portal for HTTP communication
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HttpsPort">
            <summary>
            Gets the port used by the portal for HTTPS communication
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.LayerTemplatesGroupQuery">
            <summary>
            Gets the query used to determine which group should drive the list of layer templates in map viewers for a given culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected. 
            Ex: "title:'Esri Layer Templates' AND owner:esri" 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Name">
            <summary>
            Gets the name of the organization.
            In the case of non-organizational users of ArcGIS Online or a multi-tenant portal, this will be null 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.PortalHostname">
            <summary>
            Gets the portal hostname.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.PortalName">
            <summary>
            Gets the name of the portal.
            In the case of organization subscriptions within multi-tenant portals, name and portalName wil be different.
            In the case of single-tenant Portals, name and portalName will be logically the same. 
            </summary>
            <value>
            The name of the portal.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BackgroundImagePath">
            <summary>
            Gets the background image path.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.PortalThumbnailPath">
            <summary>
            Gets the portal thumbnail path.
            In the case of multi-tenant Portals portalThumbnail and thumbnail will be different for organizational users.
            In the case of single-tenant Portals they will be logically the same.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SymbolSetsGroupQuery">
            <summary>
            Gets the query used to determine which group should drive the symbol sets in map viewers for a given culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected, and those items shared with the group should be displayed as symbol sets. 
            Ex: "title:'Esri Symbols' AND owner:esri" 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.TemplatesGroupQuery">
            <summary>
            Gets the query used to determine which group should drive the gallery of web application templates displayed in the client application for the specified culture.
            The query specified in this setting should be used as the query string parameter for a call to the groups.
            The first group returned should be selected, and those items shared with the group should be displayed in the client’s web application template gallery (if applicable). 
            Ex: "title:'ESRI Featured Content' AND owner:esri_webapi" 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.UrlKey">
            <summary>
            Gets the URL key of the organization.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ThumbnailPath">
            <summary>
            Gets the thumbnail image path for the organization.
            In the case of non-organizational users of ArcGIS Online or a multi-tenant portal, this will be null. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HelperServices">
            <summary>
            Gets various services needed by clients.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.IPCountryCode">
            <summary>
            Gets the ISO Country Code of IP address of client (Online only - Not used in Portal). 
            </summary>
            <remarks>
            Returns '--' or Null if IP cannot be located. 
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BingKey">
            <summary>
            Gets the bing key to use for webmaps using Bing. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CanShareBingPublic">
            <summary>
            Gets the a flag indicating whether the bing key can be shared to the public and will be returned as part of a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo"/> description.
            This requires the 'access' of the portal/org to be set to 'public'.
            The CanShareBingPublic property is not returned publicly but only shown to users within the organization. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SupportsOAuth">
            <summary>
            Gets a value indicating whether the portal supports OAuth.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SupportsHostedServices">
            <summary>
            Gets a value indicating whether hosted services are supported.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.IsPortal">
            <summary>
            Gets a value indicating whether the portal is on premises.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.MaxTokenExpiration">
            <summary>
            Gets the maximum validity in minutes of tokens issued for users of the organization. -1 is the default and is a special value that indicates infinite timeout or permanent tokens.
            For tokens granted using OAuth2 authorization grant, it represents the maximum validity of refresh tokens.
            For access tokens, the maximum validity is the lower of two weeks or this value.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Region">
            <summary>
            Gets the region for the organization.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.UseStandardizedQuery">
            <summary>
            Gets a value indicating whether only simple where clauses that are complaint with SQL92 can be used when querying layers and tables.
            The recommended security setting is true.
            </summary>
            <value>
            <c>true</c> if only simple where clauses that are complaint with SQL92 can be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CreationDate">
            <summary>
            Gets the date the organization was created.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ModificationDate">
            <summary>
            Gets the date the organization was last modified.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BackgroundImageUri">
            <summary>
            Gets the URI of the background image for the organization.
            The background image displays behind all other components on the home page.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ThumbnailUri">
            <summary>
            Gets the URI of the thumbnail image for the organization.
            In the case of non-organizational users of ArcGIS Online or a multi-tenant portal, this will be null. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.PortalThumbnailUri">
            <summary>
            Gets the URI of the portal thumbnail.
            In the case of multi-tenant Portals portalThumbnail and thumbnail will be different for organizational users.
            In the case of single-tenant Portals they will be logically the same.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.PortalMode">
            <summary>
            Gets the portal mode (singletenant, multitenant).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Access">
            <summary>
            Determines who can view your organization as an anonymous user.
            When public, anonymous users can access the organization's custom URL.
            When private, access is restricted to only members of the organization.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.Units">
            <summary>
            Gets the units of measure for the organization's users.
            The user default is derived from the organization's Region.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.DefaultExtent">
            <summary>
            Gets the default extent to be used by the client application for the specified culture when creating new maps.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync">
            <summary>
            Queries the users of the organization.
            Available only for organization authenticated users.
            </summary>
            <returns>
            The task object representing the asynchronous query users operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync(Esri.ArcGISRuntime.Portal.QueryParameters)">
            <summary>
            Queries the users of the organization.
            Available only for organization authenticated users.
            </summary>
            <param name="queryParameters">The query parameters that allows to specify the start index and the limit.</param>
            <returns>
            The task object representing the asynchronous query users operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync(Esri.ArcGISRuntime.Portal.QueryParameters,System.Threading.CancellationToken)">
            <summary>
            Queries the users of the organization.
            Available only for organization authenticated users.
            </summary>
            <param name="queryParameters">The query parameters that allows to specify the start index and the limit (may be null).</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous query users operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.GetFeaturedGroupsAsync">
            <summary>
            Gets the featured groups asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/>.
            </summary>
            <returns>
            The task object representing the asynchronous get featured groups operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.GetFeaturedGroupsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the featured groups asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/>.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get featured groups operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync">
            <summary>
            Searches the home page featured content asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <returns>
            The task object representing the asynchronous search home page featured content operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Searches the home page featured content asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter.
            </param>
            <returns>
            The task object representing the asynchronous search home page featured content operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches the home page featured content asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HomePageFeaturedContent"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter (may be null).
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous search home page featured content operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync">
            <summary>
            Gets the featured items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/> information and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <returns>
            The task object representing the asynchronous search featured items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Gets the featured items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/> information and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            If <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/> is not set, the methods returns all organization items.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter.
            </param>
            <returns>
            The task object representing the asynchronous search featured items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Gets the featured items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/> information and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            If <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/> is not set, the methods returns all organization items.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedItemsGroupQuery"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter (may be null).
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous search featured items operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync">
            <summary>
            Searches the basemap gallery items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <returns>
            The task object representing the asynchronous search basemap gallery operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync(Esri.ArcGISRuntime.Portal.SearchParameters)">
            <summary>
            Searches the basemap gallery items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter.
            </param>
            <returns>
            The task object representing the asynchronous search basemap gallery operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync(Esri.ArcGISRuntime.Portal.SearchParameters,System.Threading.CancellationToken)">
            <summary>
            Searches the basemap gallery items asynchronously.
            This method uses the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/> informations and returns the corresponding <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/>.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.BasemapGalleryGroupQuery"/>
            <param name="searchParameters">The search parameters that allow to manage the paginated result and to add an additional query parameter (may be null).
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous search basemap gallery operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryCustomRolesAsync">
            <summary>
            Queries the custom roles of the organization.
            Available only for organization authenticated users.
            </summary>
            <remark>The built-in roles are not returned by this method.</remark>
            <returns>
            The task object representing the asynchronous query custom roles operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryCustomRolesAsync(Esri.ArcGISRuntime.Portal.QueryParameters)">
            <summary>
            Queries the custom roles of the organization.
            Available only for organization authenticated users.
            </summary>
            <param name="queryParameters">The query parameters that allows to specify the start index and the limit.</param>
            <remark>The built-in roles are not returned by this method.</remark>
            <returns>
            The task object representing the asynchronous query custom roles operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryCustomRolesAsync(Esri.ArcGISRuntime.Portal.QueryParameters,System.Threading.CancellationToken)">
            <summary>
            Queries the custom roles of the organization.
            Available only for organization authenticated users.
            </summary>
            <param name="queryParameters">The query parameters that allows to specify the start index and the limit (may be null).</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <remark>The built-in roles are not returned by this method.</remark>
            <returns>
            The task object representing the asynchronous query custom roles operation.The value of the task result contains a
            <see cref= "T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1" > Portal.SearchResultInfo &lt;T&gt;</see> 
            object that contains<see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects. Use the
            <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results"> Portal.SearchResultInfo&lt;T&gt;.Results</see> Property to
            get the IEnumerable collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> objects.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.CurrentUserExpiryDateUtc">
            <summary>
            Populated from the current user subscriptioninfo
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.LicenseInfo">
            <summary>
            For the currently loged in portal user, this can return license information to enable additional ArcGIS Runtime capabilities.
            Null is returned if this is not the CurrentUser or there is no license information available.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.License"/>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortal.CurrentUser"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.ReflectionInitFrom(Esri.ArcGISRuntime.Portal.ArcGISPortalInfo)">
            <summary>
            Copy all fields except ArcGISPortal and ISInitialized (properties are copied with backing fields)
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">
            <summary>
            Represents an item (a unit of content) in the portal. 
            An item may have associated binary or textual data which is available via the <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetItemDataAsync(System.Threading.CancellationToken,System.String)"/>.
            For example an item of type map package returns the actual bits corresponding to the map package via the item data resource.
            </summary>
            <remarks>
            <para>
            ArcGISPortal Class is the gateway to build applications with Esri's cloud infrastructure of ArcGIS Online or ArcGIS Portal. 
            ArcGIS Portal is software technology from Esri that customers can deploy either on premise or in the cloud. ArcGIS Online 
            is Esri's Software as a Service offering that represents GIS as a Service and is implemented using the same technology as 
            ArcGIS Portal. The <b>Esri.ArcGISRuntime.Portal</b> Assembly allows application developers to work with users, groups and 
            content hosted within ArcGIS Online or within an ArcGIS Portal.
            </para>
            <para>
            An ArcGISPortalItem is an item of content in the ArcGISPortal Class. There are several ways to obtain an ArcGISPortalItem 
            via the <b>Esri.ArcGISRuntime.Portal</b> Assembly; they include: 
            </para>
            <list type="bullet">
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)">Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync">Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchBasemapGalleryAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync">Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchFeaturedItemsAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync">Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.SearchHomePageFeaturedContentAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetItemsAsync">Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetItemsAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetItemsAsync">Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalUser.GetItemsAsync</see> Method</item>
              <item><see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.GetItemsAsync">Esri.ArcGISRuntime.Portal.ArcGISPortal.ArcGISPortalFolder.GetItemsAsync</see> Method</item>
            </list>
            </remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.#ctor(Esri.ArcGISRuntime.Portal.ArcGISPortal,Esri.ArcGISRuntime.Portal.ItemType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> class.
            This constructor is useful for adding a new item only. For initializing an instance from an existing item use the <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)"/> static factory.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="itemType">The content type of the item to create.</param>
            <param name="title">The title of the item to create.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> class from the specified item ID.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="itemId">The item Id.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> class from the specified item ID.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="itemId">The item Id.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.WebMapUrlFromPortalItem(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>Return a webmap URL string from the given portal item</summary>
            <remarks>
            URL is a content/items portal URL
               i.e: http://www.arcgis.com/sharing/rest/content/items/fcbf5d1de12e4556a2b8632e29dab941/data
            </remarks>
            <param name="portalItem"></param>
            <returns>URL string</returns>
            <exception cref="T:System.ArgumentNullException">portalItem</exception>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.WebMapUrlFromUri(System.Uri)">
            <summary>Return a webmap URL string from the portal item Uri</summary>
            <remarks>
            Returned URL is a content/items portal URL
               i.e: http://www.arcgis.com/sharing/rest/content/items/fcbf5d1de12e4556a2b8632e29dab941/data
            </remarks>
            <param name="uri"></param>
            <returns>URL string or empty string if uri is not a portal item</returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.PortalItemFromUriAsync(System.Uri)">
            <summary>Return a PortalItem from a webmap Uri</summary>
            <remarks>
            Parses a Uri and returns a hydrated portal item or null if the Uri is not a portal item Uri
            Supported portal Uri values:
            <list type="bullet">
                 <item>http://www.arcgis.com/home/item.html?id=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/home/webmap/viewer.html?webmap=&lt;web_map_id&gt;</item>
                 <item>http://www.arcgis.com/sharing/rest/content/items/&lt;web_map_id&gt;/data</item>
            </list>
            </remarks>
            <param name="uri"></param>
            <returns>ArcGISPoratlItem</returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ArcGISPortal">
            <summary>
            Gets or sets the ArcGIS portal containing the item.
            </summary>
            <remarks>The setter is mainly useful in scenario where the developer serializes and deserializes the items by itself.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Id">
            <summary>
            Gets the unique id for this item.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Name">
            <summary>
            Gets the name of item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Owner">
            <summary>
            Gets the username of the user who owns this item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Guid">
            <summary>
            Gets the GUID of the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Title">
            <summary>
            Gets or sets the item title. This is the name that is displayed to users and by which they refer to the item.
            Every item must have a title.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TypeName">
            <summary>
            Gets or sets the string representation of the item type.
            <para>
            In most cases, it's the string representation of the enumeration <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Type"/>,
            but, in cases where the type is unrecognized, the actual type is returned by this TypeName property while <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Type"/> returns just <see cref="F:Esri.ArcGISRuntime.Portal.ItemType.Other"/>.
            </para>
            </summary>
            <value>
            The item type string representation.
            </value>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Type"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TypeKeywords">
            <summary>
            Gets os sets the set of keywords that further describes the type of this item.
            Each item is tagged with a set of type keywords that are derived based on its primary type.
            Set this parameter only if you wish to add additional type keywords.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Description">
            <summary>
            Gets or sets the detailed description of the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TagsInternal">
            <summary>
            Gets or sets the user defined tags that are words or short phrases that describe the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Tags">
            <summary>
            Gets or sets the user defined tags that are words or short phrases that describe the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Snippet">
            <summary>
            Gets or sets the summary description of the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.LargeThumbnailPath">
            <summary>
            Gets the pathname to the large thumbnail image to be used for the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.BannerPath">
            <summary>
            Gets the pathname to the banner to be used for the application.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ScreenShotsPaths">
            <summary>
            Gets the pathnames to the screenshots used for the application.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ThumbnailPath">
            <summary>
            Gets the pathname to the thumbnail image to be used for the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.SpatialReferenceName">
            <summary>
            Gets or sets the item's spatial reference name.
            </summary>
            <remark>This name may be either a WKID or a spatial reference code. In the latter case, the value is not meant for instantiating a <see cref="T:Esri.ArcGISRuntime.Geometry.SpatialReference"/> from it.
            </remark>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AccessInformation">
            <summary>
            Gets or sets the information on the source of the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.LicenseInfo">
            <summary>
            Gets or sets the license information, restrictions and use constraints.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Url">
            <summary>
            Gets or sets the URL for the resource represented by the item.
            Applies only to items that represent web accessible resources such as map services.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Culture">
            <summary>
            Gets or sets the item locale (language and country) information.
            </summary>
            <remarks>The format for culture code is based on a language code and a country code separated by a dash.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Size">
            <summary>
            Gets the size of the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.NumComments">
            <summary>
            Gets the number of comments on the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.NumRatings">
            <summary>
            Gets the number of ratings on the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.NumViews">
            <summary>
            Gets the number of views on the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AvgRating">
            <summary>
            Gets the average rating for this item.
            </summary>
            <remarks>Uses a weighted average called "Bayesian average".</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.IsCommentsEnabled">
            <summary>
            Gets a value indicating whether comments are allowed on the item.
            </summary>
            <value>
              <c>true</c> if comments are allowed on the item; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.IsListed">
            <summary>
            Gets a value indicating whether the item is listed in the marketplace.
            </summary>
            <value>
              <c>true</c> if the item is listed in the marketplace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.IsProtected">
            <summary>
            Gets a value indicating whether the item is protected from deletion.
            </summary>
            <value>
              <c>true</c> if the item is protected from deletion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Industries">
            <summary>
            Primarily applies to industries associated with the application. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Languages">
            <summary>
            Primarily applies to languages associated with the application. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.OwnerFolderId">
            <summary>
            Gets the ID of the folder in which the owner has stored the item.
            The property is only returned to the item owner or the org admin.
            </summary>
            <value>
            The owner folder ID.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.CreationDate">
            <summary>
            Gets the date the item was created.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ModificationDate">
            <summary>
            Gets date the item was last modified.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.LargeThumbnailUri">
            <summary>
            Gets the URI of the large thumbnail image used for the item.
            Primarily applies to thumbnails associated with an application.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.BannerUri">
            <summary>
            Gets the URI to the banner used for the application.
            Primarily applies to the banner associated with an application.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ScreenshotsUris">
            <summary>
            Gets the URIs to the screenshots used for the application.
            Primarily applies to screenshots associated with an application.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ThumbnailUri">
            <summary>
            Gets the URI of the thumbnail image used for the item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Access">
            <summary>
            Gets the access level on the item.
            <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Private">Private</see> is the default and only the item owner can access.
            <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Shared">Shared</see> allows the item to be shared with a specific group.
            Setting to <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Organization">Organization</see> restricts item access to members of your organization.
            If <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Public">Public</see>, all users can access the item. 
            </summary>
            <remarks>
            <para>
            An ArcGISPortalItem can be accessed by various types of users. There are four levels of access that can be associated 
            with an ArcGISPortalItem. Some of the access levels can be concurrent, others cannot. The ArcGISPortalItem.Access 
            Property however only returns a single PortalAccess level enumeration even though multiple levels of access may have 
            been specified via the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/> 
            and/or 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String})"/> 
            Methods. If multiple access levels have been specified on an ArcGISPortalItem, the returned access level from the 
            ArcGISPortalItem.Access Property will be the least restrictive access level. The following diagram illustrates the 
            hierarchy of access levels:
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Type">
            <summary>
            Gets or sets the gis content type of this item.
            Example types include : "Web Map" and "Web Mapping Application".
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TypeName"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Extent">
            <summary>
            Gets the bounding extent of the item (in geographical coordinates)
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRelatedItemsAsync(Esri.ArcGISRuntime.Portal.RelationshipType,System.Nullable{Esri.ArcGISRuntime.Portal.RelationshipDirection})">
            <summary>
            Gets all the related items of a certain relationship type for that item.
            An optional direction can be specified if the direction of the relationship is ambiguous. Otherwise the service will try to infer it.
            </summary>
            <param name="relationshipType">Type of the relationship.</param>
            <param name="relationshipDirection">The relationship direction (or null if you don't want to specify a direction so the service will try to infer it)</param>
            <returns>
            The task object representing the asynchronous get related items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRelatedItemsAsync(Esri.ArcGISRuntime.Portal.RelationshipType,System.Nullable{Esri.ArcGISRuntime.Portal.RelationshipDirection},System.Threading.CancellationToken)">
            <summary>
            Gets all the related items of a certain relationship type for that item.
            An optional direction can be specified if the direction of the relationship is ambiguous. Otherwise the service will try to infer it.
            </summary>
            <param name="relationshipType">Type of the relationship.</param>
            <param name="relationshipDirection">The relationship direction (or null if you don't want to specify a direction so the service will try to infer it)</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get related items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetItemDataAsync(System.String)">
            <summary>
            Gets the item data.
            The data component of an item (the "item file") is used to stream the actual data represented by the item to the client. This resource is available only for the file and text item types. 
            </summary>
            <param name="outputFormat">An optional output format parameter. Only applies to Package types. 'zip' will download a package in zip format rather than the package format. </param>
            <returns>
            The task object representing the asynchronous get item data operation. The value of the task result is a <see cref="T:System.IO.Stream"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetItemDataAsync(System.Threading.CancellationToken,System.String)">
            <summary>
            Gets the item data.
            The data component of an item (the "item file") is used to stream the actual data represented by the item to the client. This resource is available only for the file and text item types. 
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <param name="outputFormat">An optional output format parameter. Only applies to Package types. 'zip' will download a package in zip format rather than the package format. </param>
            <returns>
            The task object representing the asynchronous get item data operation. The value of the task result is a <see cref="T:System.IO.Stream"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetCommentsAsync">
            <summary>
            Gets the comments for the item that you have access to.
            Available only to authenticated users.
            </summary>
            <returns>
            The task object representing the asynchronous get comments operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetCommentsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the comments for the item that you have access to.
            Available only to authenticated users.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get comments operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AddCommentAsync(System.String)">
            <summary>
            Adds a comment to an item.
            Available only to authenticated users who have access to the item.
            </summary>
            <param name="comment">The comment to add.</param>
            <returns>
            The task object representing the asynchronous add comment operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AddCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds a comment to an item.
            Available only to authenticated users who have access to the item.
            </summary>
            <param name="comment">The comment to add.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous add comment operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalComment"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetSharingInfoAsync">
            <summary>
            Gets the item sharing info.
            This is accessible only to the owning user or to the administrator of the organization if the user is a member of one.
            </summary>
            <returns>
            The task object representing the asynchronous get sharing info operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetSharingInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the item sharing info.
            This is accessible only to the owning user or to the administrator of the organization if the user is a member of one.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get sharing info operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRatingAsync">
            <summary>
            Gets the rating given by current user, if any.
            </summary>
            <returns>
            The task object representing the asynchronous get rating operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRating"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRatingAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the rating given by current user, if any.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get rating operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRating"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AddRatingAsync(System.Double)">
            <summary>
            Adds a rating to an item that you have access to.
            Only one rating can be given to an item per user.
            If this call is made on an already rated item, the new rating will overwrite the current one.
            A user cannot rate their own item. Available only to authenticated users. 
            </summary>
            <param name="rating">The rating.</param>
            <returns>
            The task object representing the asynchronous add rating operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRating"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.AddRatingAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Adds a rating to an item that you have access to.
            Only one rating can be given to an item per user.
            If this call is made on an already rated item, the new rating will overwrite the current one.
            A user cannot rate their own item. Available only to authenticated users. 
            </summary>
            <param name="rating">The rating.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous add rating operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRating"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.DeleteRatingAsync">
            <summary>
            Deletes the rating the calling user added for the specified item.
            Available only to authenticated users.
            </summary>
            <returns>A task that represents the asynchronous delete rating operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.DeleteRatingAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the rating the calling user added for the specified item.
            Available only to authenticated users.
            </summary>
            <returns>A task that represents the asynchronous delete rating operation.</returns>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetGroupsAsync">
            <summary>
            Gets the groups the item is a part of. Only shows the groups which the calling user can access. 
            </summary>
            <returns>
            The task object representing the asynchronous get groups operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetGroupsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the groups the item is a part of. Only shows the groups which the calling user can access. 
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get groups operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Shares the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            In order to use the ArcGISPortalItem.ShareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.ShareAsync Method to establish which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is part of MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user; it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter who created/owns the ArcGISPortalItem.
              </item>
            </list>
            <para>
            <b>NOTE:</b> Setting the first parameter (groupIds) of the ArcGISPortalItem.ShareAsync to null/Nothing 
            does not set any existing <b>Group</b> values. In other words, it does not empty the list of <b>Groups</b> 
            associated with the ArcGISPortalItem. The way to remove existing <b>Group</b> values from the 
            ArcGISPortalItem is to use the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UnshareAsync(System.Collections.Generic.IEnumerable{System.String})">ArcGISPortalItem.UnshareAsync</see> Method.
            </para>
            <para>
            Using this version of the ArcGISPortalItem.ShareAsync only modifies <b>Groups</b> for the PortalAccess 
            level of <b>Shared</b>. If it is desired to add or change the other PortalAccess levels for the 
            ArcGISPortalItem, consider using the other version: 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">ArcGISPortalItem.ShareAsync</see>.
            </para>
            </remarks>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to share the item with.</param>
            <returns>
            The task object representing the asynchronous share operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ShareItemResult"/> object.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Shares the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            In order to use the ArcGISPortalItem.ShareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.ShareAsync Method to establish which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is part of MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user; it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter who created/owns the ArcGISPortalItem.
              </item>
            </list>
            <para>
            <b>NOTE:</b> Setting the first parameter (groupIds) of the ArcGISPortalItem.ShareAsync to null/Nothing 
            does not set any existing <b>Group</b> values. In other words, it does not empty the list of <b>Groups</b> 
            associated with the ArcGISPortalItem. The way to remove existing <b>Group</b> values from the 
            ArcGISPortalItem is to use the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UnshareAsync(System.Collections.Generic.IEnumerable{System.String})">ArcGISPortalItem.UnshareAsync</see> Method.
            </para>
            <para>
            Using this version of the ArcGISPortalItem.ShareAsync only modifies <b>Groups</b> for the PortalAccess 
            level of <b>Shared</b>. If it is desired to add or change the other PortalAccess levels for the 
            ArcGISPortalItem, consider using the other version: 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">ArcGISPortalItem.ShareAsync</see>.
            </para>
            </remarks>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to share the item with.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous share operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ShareItemResult"/> object.
            </returns>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Shares the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <para>
            In order to use the ArcGISPortalItem.ShareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.ShareAsync Method to establish which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is part of MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user; it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter who created/owns the ArcGISPortalItem.
              </item>
            </list>
            <para>
            This version of ArcGISPortalItem.ShareAsync has the capability of adding <b>Groups</b> for the PortalAccess 
            level of <b>Shared</b> AND also has the capability of changing the other PortalAccess levels at the same time. 
            </para>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to share the item with.</param>
            <param name="withEveryone">If true, this item will be shared with everyone, for example, it will be publicly accessible.
             If explicitly set to false, the item will not be shared with the public.
            If null the current setting will not change.
            </param>
            <param name="withOrganization">If true, this item will be shared with the organization.
            If explicitly set to false, the item will not be shared with the organization.
            If null the current setting will not change.
            </param>
            <returns>
            The task object representing the asynchronous share operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ShareItemResult"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Shares the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <para>
            In order to use the ArcGISPortalItem.ShareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.ShareAsync Method to establish which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is part of MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user; it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter who created/owns the ArcGISPortalItem.
              </item>
            </list>
            <para>
            This version of ArcGISPortalItem.ShareAsync has the capability of adding <b>Groups</b> for the PortalAccess 
            level of <b>Shared</b> AND also has the capability of changing the other PortalAccess levels at the same time. 
            </para>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to share the item with.</param>
            <param name="withEveryone">If true, this item will be shared with everyone, for example, it will be publicly accessible.
             If explicitly set to false, the item will not be shared with the public.
            If null the current setting will not change.
            </param>
            <param name="withOrganization">If true, this item will be shared with the organization.
            If explicitly set to false, the item will not be shared with the organization.
            If null the current setting will not change.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous share operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ShareItemResult"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UnshareAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Stops sharing the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            In order to use the ArcGISPortalItem.UnshareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.UnshareAsync Method to remove which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is currently shared MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user;  it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter  who created/owns the ArcGISPortalItem.
              </item>
            </list>
            </remarks>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to stop sharing the item with.</param>
            <returns>
            The task object representing the asynchronous unshare operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.UnshareItemResult"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UnshareAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Stops sharing the ArcGISPortalItem with the specified list of 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values. This 
            Method is available only to authenticated users.
            </summary>
            <remarks>
            <para>
            In order to use the ArcGISPortalItem.UnshareAsync Method, a user must be logged into the ArcGIS Online or 
            ArcGIS Portal site with proper credentials.
            </para>
            <para>
            The individual who is authenticated and logged into the portal site that desires to use the 
            ArcGISPortalItem.UnshareAsync Method to remove which <b>Groups</b> (via their 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) the 
            ArcGISPortalItem is currently shared MUST meet one of the following criteria:
            </para>
            <list type="bullet">
              <item>
              The authenticated user is the owner of the ArcGISPortalItem.
              </item>
              <item>
              The authenticated user is the Administrator of the Organization to which the ArcGISPortalItem belongs.
              </item>
              <item>
              The ArcGISPortalItem has its <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">PortalAccess</see> value 
              of <b>Public</b> and the authenticated user is the owner of the <b>Group</b>. 
              Note: the ArcGISPortalItem may not have been created/owned by the authenticated user; it is only important 
              that the ArcGISPortalItem be <b>Public</b>, no matter who created/owns the ArcGISPortalItem.</item>
              <item>
              The ArcGISPortalItem has its PortalAccess value of <b>Public</b> and the authenticated user is the 
              Administrator of the Organization to which <b>Group</b> belongs. Note: the ArcGISPortalItem may not have 
              been created/owned by the authenticated user;  it is only important that the ArcGISPortalItem be <b>Public</b>, 
              no matter  who created/owns the ArcGISPortalItem.
              </item>
            </list>
            </remarks>
            <param name="groupIds">The IEnumerable (aka. a collection) of <b>Group</b> Ids (obtained via 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.Id">ArcGISPortalGroup.Id</see> values) that you want 
            to stop sharing the item with.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous unshare operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.UnshareItemResult"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.DeleteAsync">
            <summary>
            Deletes the item asynchronously.
            Available to the item's owner and the administrator of the organization to which the owner belongs.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the item asynchronously.
            Available to the item's owner and the administrator of the organization to which the owner belongs.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UpdateAsync">
            <summary>
            Updates the item asynchronously.
            This update item operation allows users to update item information without changing the item content.
            Users can use this operation to update item information such as the title, description, tags, etc.
            This call is available to the item owner and the administrator of the organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <remark>Before calling this method, the portal item must have been updated in memory by using the property setters such as <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Title"/>, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Description"/>, etc.</remark>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UpdateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent)">
            <summary>
            Updates the item asynchronously.
            The update item operation allows users to update item information and/or their file depending on type and/or the thumbnail.
            Users can use this operation to update item information such as the title, description, tags, etc. or use it to update an item's file. or the thumbail.
            This call is available to the item owner and the administrator of the organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="portalItemContent">Content of the portal item.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UpdateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent,System.Threading.CancellationToken)">
            <summary>
            Updates the item asynchronously.
            The update item operation allows users to update item information and their file depending on type.
            Users can use this operation to update item information such as the title, description, tags, etc. or use it to update an item's file.
            This call is available to the item owner and the administrator of the organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="portalItemContent">Content of the portal item (may be null).</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="E:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ReflectionInitFrom(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)">
            <summary>
            Copy all fields except ArcGISPortal and ISInitialized (properties are copied with backing fields)
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent">
            <summary>
            Represents the content of a portal item to use in a Add or Update operation.
            </summary>
            <para>
            There are 3 possible content types:</para>
            <list type="bullet">
            <item>No content</item>
            <item>Text content</item>
            <item>File content</item>
            </list>
            <para>Optionally a thumbnail can also be added.</para>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.AddItemAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalItem)" />
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UpdateAsync" />
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent"/> class without content (except <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.Thumbnail"/> that can be set later).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent"/> class with text content.
            </summary>
            <param name="textContent">Content of the text.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.#ctor(System.IO.Stream,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent"/> class with file content.
            </summary>
            <param name="fileContent">The file content to upload.</param>
            <param name="fileName">The file name.</param>
            <param name="contentType">The file content type.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.Thumbnail">
            <summary>
            Gets or sets the thumbnail of the portal item.
            </summary>
            <value>
            The thumbnail.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.TextContent">
            <summary>
            Gets the text content.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.FileContent">
            <summary>
            Gets the The file content to upload.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.FileName">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemContent.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>
            The type of the content.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups">
            <summary>
            The groups that can access to an item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups.ArcGISPortalItem">
            <summary>
            Gets the portal item associated with this ArcGISPortalItemGroups object.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups.Admins">
            <summary>
            Gets the groups which user is an administrator.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups.Members">
            <summary>
            Gets the groups which user is a member.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItemGroups.Others">
            <summary>
            Gets other groups that are public or shared to the user's organization but that the user is not a member of.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRating">
            <summary>
            Represents the rating associated with a Portal item.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRating.ArcGISPortalItem">
            <summary>
            Gets the portal item that the rating is associated with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRating.Rating">
            <summary>
            Gets the rating given by the current user to the item.
            </summary>
            <remarks>A null value means that the current user didn't rate the item.</remarks>
            <value>
            The rating between 1.0 and 5.0.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRating.CreationDate">
            <summary>
            Gets the date and time the rating was added to the item.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole">
            <summary>
            A role consists of a set of privileges which are allowed. Everything outside of that list is denied. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> class.
            </summary>
            <remarks>
            <para>
            This method initializes a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole">ArcGISPortalRole</see> from a role Id.
            </para>
            </remarks>
            <param name="arcGISPortalInfo">The ArcGIS portal info.</param>
            <param name="roleId">The role ID.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> class.
            </summary>
            <remarks>
            <para>
            This method initializes a single 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole">ArcGISPortalRole</see> from a role Id.
            </para>
            </remarks>
            <param name="arcGISPortalInfo">The ArcGIS portal info.</param>
            <param name="roleId">The role ID.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalRole"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.ArcGISPortalInfo">
            <summary>
            Gets the ArcGIS portal info.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.Id">
            <summary>
            Gets the role id.
            </summary>
            <value>
            The role id.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.Name">
            <summary>
            Gets the role name.
            This is the name that is displayed to users and by which they refer to the role.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.Description">
            <summary>
            Gets the detailed description of the role.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.CreationDate">
            <summary>
            Gets the date the role was created.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.ModificationDate">
            <summary>
            Gets the date the role was last modified.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.GetPrivilegesAsync">
            <summary>
            Gets the privileges associated with the custom role.
            </summary>
            <returns>
            The task object representing the asynchronous get privileges operation. The value of the task result contains a collection of <see cref="T:System.String"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalRole.GetPrivilegesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the privileges associated with the role.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get privileges operation. The value of the task result contains a collection of <see cref="T:System.String"/> objects.
            </returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo">
            <summary>
            Represents a tag used by the user when adding or updating an item to the portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo.ArcGISPortalItem">
            <summary>
            Gets the portal item that the sharing info is associated with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo.GroupIds">
            <summary>
            Gets the list of group IDs that the item is shared with.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalSharingInfo.Access">
            <summary>
            Gets the sharing access level.
            Private indicates that the item can only be accessed by the user.
            Public items are accessible by all users.
            An item shared to the organization has an access level of org.
            Shared denotes an item shared to one or more groups.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser">
            <summary>
            Represents a registered user of the portal. 
            Personal details of the user, such as email and groups, are returned only to the user or the administrator of the user's organization. 
            A user is not visible to any other users (except their organization's administrator) if their access setting is set to 'private'. 
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> class from the specified username.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="userName">Name of the user.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> class from the specified username.
            </summary>
            <param name="arcGISPortal">The ArcGIS portal.</param>
            <param name="userName">Name of the user.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous create operation. The value of the task result is a <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> object.
            </returns>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ArcGISPortal">
            <summary>
            Gets the ArcGIS portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.FullName">
            <summary>
            Gets or sets the full name of the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Description">
            <summary>
            Gets or sets the description or profile of the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
            <remarks>Available only if the user is signed-in.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.StorageQuota">
            <summary>
            Gets the storage quota for the user (in bytes).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.StorageUsage">
            <summary>
            Gets the storage usage (in bytes).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.OrgId">
            <summary>
            Gets the id of the organization the user belongs to.
            Only available for users in an organization.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.RoleId">
            <summary>
            Gets the user custom role ID.
            <para>
            The returned role ID will be null in the following cases:
            <list type="bullet">
            <item>the user is not in a custom role but in a built-in role (user, publisher, admin).</item>
            <item>the user object has been created by <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync"/>.
            In this case, you have to create a new <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUser"/> object by using <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.CreateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortal,System.String)"/> 
            in order to get the <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.RoleId"/> populated. </item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Tags">
            <summary>
            Gets or sets the words or short phrases that describe the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Culture">
            <summary>
            Gets or sets the default culture for the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Region">
            <summary>
            Gets or sets the region of featured maps and apps and the basemap gallery.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.IdpUsername">
            <summary>
            Gets the original user name if using enterprise login.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.IsDisabled">
            <summary>
            Gets a flag indicating whether the access to the organization is disabled for the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.FavoritesGroupId">
            <summary>
            Gets the users's favorites group that is created automatically for each user.
            </summary>
            <value>
            The favorites group identifier.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ThumbnailPath">
            <summary>
            Gets the pathname to the thumbnail image to be used for the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.CreationDate">
            <summary>
            Gets the date and time the user was created.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ModificationDate">
            <summary>
            Gets the date and time the user was last modified.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.LastLoginDate">
            <summary>
            Gets the last login date of the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ThumbnailUri">
            <summary>
            Gets the URI of the thumbnail image used for the user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Access">
            <summary>
            Gets or sets the access level for the user : private, organization or public.
            If <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Private">Private</see> , the users descriptive information will not be available and the user name will not be searchable.
            If <see cref="F:Esri.ArcGISRuntime.Portal.PortalAccess.Organization">Organization</see> , only members of the organization can search for the user and the user's content.
            </summary>
            <remarks>Available only if the user is signed-in.</remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Role">
            <summary>
            Gets the user's role in the organization : administrator, publisher or user.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Units">
            <summary>
            Gets or sets the user defined units for measurement.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.PreferredView">
            <summary>
            Gets or sets the user's preferred view for content, either Web or GIS.
            Web is the default.
            </summary>
            <remarks>Available only if the user is signed-in.</remarks>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetItemsAsync">
            <summary>
            Gets the items of the user that are stored at the root folder.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain the items that belong to a particular authenticated user in ArcGIS 
            Online (AGOL) and ArcGIS Portal. This method performs an asynchronous request to obtain an IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItem</see> objects for the 
            credentialed logged in user. 
            You cannot use anonymous access to obtain a Portal.ArcGISPortalUser object and use this Method to obtain valid 
            results. As AGOL/ArcGIS Portal require the use of long term tokens to access secured information user information.
            </para>
            <para>
            The Portal.ArcGISPortalItem objects that are returned from this Method must exist on the root level of the user 
            account on AGOL/ArcGIS Portal. Items that are nested in sub-folders of the user account cannot be accessed with 
            this Method; use the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync">Portal.ArcGISPortalUser.GetFoldersAsync</see> 
            Method instead. The IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder">Portal.ArcGISPortalFolder</see> objects returned from 
            the Portal.ArcGISPortalUser.GetFoldersAsync Method can be interrogated further via the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.GetItemsAsync">Portal.ArcGISPortalFolder.GetItemsAsync</see> 
            Method call to get the Portal.ArcGISPortalItems objects in the nested sub-folders.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the items of the user that are stored at the root folder.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain the items that belong to a particular authenticated user in ArcGIS 
            Online (AGOL) and ArcGIS Portal. This method performs an asynchronous request to obtain an IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem">Portal.ArcGISPortalItem</see> objects for the 
            credentialed logged in user. 
            You cannot use anonymous access to obtain a Portal.ArcGISPortalUser object and use this Method to obtain valid 
            results. As AGOL/ArcGIS Portal require the use of long term tokens to access secured information user information.
            </para>
            <para>
            The Portal.ArcGISPortalItem objects that are returned from this Method must exist on the root level of the user 
            account on AGOL/ArcGIS Portal. Items that are nested in sub-folders of the user account cannot be accessed with 
            this Method; use the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync">Portal.ArcGISPortalUser.GetFoldersAsync</see> 
            Method instead. The IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder">Portal.ArcGISPortalFolder</see> objects returned from 
            the Portal.ArcGISPortalUser.GetFoldersAsync Method can be interrogated further via the 
            <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder.GetItemsAsync">Portal.ArcGISPortalFolder.GetItemsAsync</see> 
            Method call to get the Portal.ArcGISPortalItems objects in the nested sub-folders.
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get items operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalItem"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetGroupsAsync">
            <summary>
            Gets the groups where the user is member.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain the groups that a particular authenticated user is part of in ArcGIS Online 
            (AGOL)  or ArcGIS Portal. This method performs an asynchronous request to obtain an IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> objects for the credentialed 
            logged in user. You cannot use anonymous 
            access to obtain an ArcGISPortalUser object and use this Method to obtain valid results. As AGOL/ArcGIS Portal require 
            the use of long term tokens to access secured user information.
            </para>
            </remarks>
            <returns>
            The task object representing the asynchronous get groups operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetGroupsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the groups where the user is member.
            </summary>
            <remarks>
            <para>
            The purpose of this Method is to obtain the groups that a particular authenticated user is part of in ArcGIS Online 
            (AGOL)  or ArcGIS Portal. This method performs an asynchronous request to obtain an IEnumerable of 
            <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup">Portal.ArcGISPortalGroup</see> objects for the credentialed 
            logged in user. You cannot use anonymous 
            access to obtain an ArcGISPortalUser object and use this Method to obtain valid results. As AGOL/ArcGIS Portal require 
            the use of long term tokens to access secured user information.
            </para>
            </remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get groups operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetUserTagsAsync">
            <summary>
            Gets the tags the user has already used when publishing in the portal.
            </summary>
            <returns>
            The task object representing the asynchronous get user tags operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUserTag"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetUserTagsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the tags the user has already used when publishing in the portal.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get user tags operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUserTag"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync">
            <summary>
            Gets the sub folders of the user home folder.
            </summary>
            <remarks>Multi-level folders are not supported.</remarks>
            <returns>
            The task object representing the asynchronous get folders operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetFoldersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the sub folders of the user home folder.
            </summary>
            <remarks>Multi-level folders are not supported.</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get folders operation. The value of the task result contains a collection of <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalFolder"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.UpdateAsync">
            <summary>
            Updates the user asynchronously.
            This update user operation modifies properties such as description, preferred view, tags, access, units.
            The user name cannot be modified.
            For the "arcgis" identity provider e-mail and full name can be updated with this method.
            For the "ecas" identity provider e-mail and full name can not be updated with this method. They must be modified by editing the user's Esri Global Account.
            This call is available to the user and the administrator of the user's organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <remark>Before calling this method, the user must have been updated in memory by using the property setters such as <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Description"/>, <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Units"/> etc.</remark>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.UpdateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent)">
            <summary>
            Updates the user asynchronously.
            This update user operation modifies properties such as description, preferred view, tags, access, units and/or the thumbnail.
            The user name cannot be modified.
            For the "arcgis" identity provider e-mail and full name can be updated with this method.
            For the "ecas" identity provider e-mail and full name can not be updated with this method. They must be modified by editing the user's Esri Global Account.
            This call is available to the user and the administrator of the user's organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="portalUserContent">The portal user thumbnail</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.UpdateAsync(Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent,System.Threading.CancellationToken)">
            <summary>
            Updates the user asynchronously.
            This update user operation modifies properties such as description, preferred view, tags, access, units and/or the thumbnail.
            The user name cannot be modified.
            For the "arcgis" identity provider e-mail and full name can be updated with this method.
            For the "ecas" identity provider e-mail and full name can not be updated with this method. They must be modified by editing the user's Esri Global Account.
            This call is available to the user and the administrator of the user's organization.
            </summary>
            <returns>A task that represents the asynchronous update operation.</returns>
            <param name="portalUserContent">The user thumbnail (may be null)</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetPrivilegesAsync">
            <summary>
            Gets asynchronously the user privileges.
            This operation is available only to authenticated users.
            </summary>
            <returns>
            The task object representing the asynchronous get privileges operation. The value of the task result contains a collection of <see cref="T:System.String"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.GetPrivilegesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets asynchronously the user privileges.
            This operation is available only to authenticated users.
            </summary>
            <remarks>Privileges will be returned even for built-in roles.</remarks>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> with which to cancel the operation if required.</param>
            <returns>
            The task object representing the asynchronous get privileges operation. The value of the task result contains a collection of <see cref="T:System.String"/> objects.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.ReflectionInitFrom(Esri.ArcGISRuntime.Portal.ArcGISPortalUser)">
            <summary>
            Copy all fields except ArcGISPortal and ISInitialized (properties are copied with backing fields)
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent">
            <summary>
            Represents the content of a portal user to use in a Update operation. The user thumbnail is the only supported content.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.UpdateAsync" />
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent"/> class with a thumbnail.
            </summary>
            <param name="thumbnail">The image thumbnail as a <see cref="T:System.IO.Stream"/> associated with the ArcGIS portal user content.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent.Thumbnail">
            <summary>
            Gets or sets the thumbnail of the user.
            </summary>
            <value>
            The thumbnail.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent.ThumbnailFileName">
            <summary>
            Gets or sets the name of the thumbnail (thumbnail.png by default).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUserContent.ThumbnailContentType">
            <summary>
            Gets or sets the type of the thumbnail (image/png by default).
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ArcGISPortalUserTag">
            <summary>
            Represents a tag used by the user when adding or updating an item to the portal.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUserTag.Tag">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUserTag.Count">
            <summary>
            Gets the number of times the tag was used.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ItemType">
            <summary>
            Types of Portal Item.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.Type"/>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TypeName"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MapDocument">
            <summary>
            ArcMap Document (mxd)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ExplorerMap">
            <summary>
            ArcGIS Explorer Document (nmf) 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GlobeDocument">
            <summary>
            ArcGlobe Document (3dd)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.SceneDocument">
            <summary>
            ArcScene Document (sxd)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.PublishedMap">
            <summary>
            ArcReader Document (pmf)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MapPackage">
            <summary>
            ArcGIS Map Package (mpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeoprocessingPackage">
            <summary>
            ArcGIS Geoprocessing Package (gpk) 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.LocatorPackage">
            <summary>
            ArcGIS Locator Package (gcpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.TilePackage">
            <summary>
            ArcGIS Tile Package (tpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WindowsMobilePackage">
            <summary>
            ArcGIS Windows Mobile Package
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.DesktopApplicationTemplate">
            <summary>
            The Desktop Application Template (.zip) includes either a desktop add in or a toolbar.exe.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MapTemplate">
            <summary>
            The Map Template (.zip) contains documentation, a map and Geodatabase folder 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.CodeSample">
            <summary>
            Code sample.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeoprocessingSample">
            <summary>
            Geoprocessing sample.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ServiceDefinition">
            <summary>
            Service Definition (sd)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.Layer">
            <summary>
            Layer File (lyr)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.LayerPackage">
            <summary>
            Layer Package (lpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ExplorerLayer">
            <summary>
            ArcGIS Explorer Layer (nmc)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.DesktopAddIn">
            <summary>
            ArcGIS Add In (esriaddin)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ExplorerAddIn">
            <summary>
            ArcGIS Explorer Layer (eaz)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MapService">
            <summary>
            ArcGIS Server Map Service 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeocodingService">
            <summary>
            ArcGIS Server Geocoding Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.NetworkAnalysisService">
            <summary>
            ArcGIS Server Network Analyst Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GlobeService">
            <summary>
            ArcGIS Server Globe Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeoprocessingService">
            <summary>
            ArcGIS Server Geoprocessing Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeodataService">
            <summary>
            ArcGIS Server Geodata Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ImageService">
            <summary>
            ArcGIS Server Image Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.GeometryService">
            <summary>
            ArcGIS Server Geometry Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.FeatureService">
            <summary>
            ArcGIS Feature Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.KML">
            <summary>
            Data, Map, kml 
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.VectorTileService">
            <summary>
            Vector Tile Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WMS">
            <summary>
            Data, Service, Web Map Service, OGC
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WMTS">
            <summary>
             Data, Service, Web Map Tile Service, OGC
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WebMap">
            <summary>
            Web Map authored using the arcgis.com Javascript Web Map viewer or using ArcGIS Explorer online.
            Usable by web, mobile, and desktop clients.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WebMappingApplication">
            <summary>
             A web mapping application built using ArcGIS API for Javascript, ArcGIS API for Flex, ArcGIS API for Silverlight, Java Web Application Developer Framework, .NET Web Application Developer Framework.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MobileApplication">
            <summary>
            A mobile application build using the ArcGIS for iPhone SDK, ArcGIS for Android SDK, ArcGIS Mobile SDK for the Windows Mobile Platform, or the JavaScript or Flex API.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.CodeAttachment">
            <summary>
            Attached code.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.FeaturedItems">
            <summary>
            Empty Item type with relationships to items that user wants featured.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.FeatureCollection">
            <summary>
            A feature collection is a saved web map feature layer with layer definition and a feature set
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.FeatureCollectionTemplate">
            <summary>
            A feature collection template.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.SymbolSet">
            <summary>
            A symbol set.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ColorSet">
            <summary>
            A color set.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.CollectionDefinition">
            <summary>
            The definition for a feature collection/web map feature layer
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.CSV">
            <summary>
            A CSV layer.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.Shapefile">
            <summary>
            A shapefile layer.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.OperationView">
            <summary>
            An Operation View
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.OperationsDashboardAddIn">
            <summary>
            An Operations Dashboard Add In
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.CityEngineWebScene">
            <summary>
            A CityEngine Web Scene
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WorkflowManagerPackage">
            <summary>
            A Workflow Manager Package (wpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.ArcPadPackage">
            <summary>
            An ArcPad Package (appk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MicrosoftWord">
            <summary>
            Microsoft Word Document (.doc, .docx)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MicrosoftPowerPoint">
            <summary>
            Microsoft PowerPoint (.ppt, .pptx)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MicrosoftExcel">
            <summary>
            Microsoft Excel Document (.xls, .xlsx)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.PDF">
            <summary>
            Portable Document Format (.pdf)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.Image">
            <summary>
            Image Types (.jpg, .jpeg, .tif, .tiff, .png)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.VisioDocument">
            <summary>
            Visio Document (.vsd)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.DocumentLink">
            <summary>
            Link to a web resource
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.RulePackage">
            <summary>
            ArcGIS Rule Package (rpk)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.SceneService">
            <summary>
            ArcGIS Scene Service
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.WorkforceProject">
            <summary>
            ArcGIS Workforce Project
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.MobileMapPackage">
            <summary>
            ArcGIS Mobile Map Package
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.ItemType.Other">
            <summary>
            Other item.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.TypeName"/>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.MemberType">
            <summary>
            Type of membership.
            </summary>
            <seealso cref="T:Esri.ArcGISRuntime.Portal.UserMembership"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.MemberType.Owner">
            <summary>
            Owner of the group
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.MemberType.Admin">
            <summary>
            Administrator of the group
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.MemberType.Member">
            <summary>
            Member of the group.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.MemberType.None">
            <summary>
            Not a member of the group.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.PortalAccess">
            <summary>
            Access permissions.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalAccess.Private">
            <summary>
            Private access.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalAccess.Shared">
            <summary>
            Shared access.
            Available only for items.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalAccess.Organization">
            <summary>
            Organization access.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalAccess.Public">
            <summary>
            Public access.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.PortalMode">
            <summary>
            Portal mode (multitenant or singletenant)
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalMode.MultiTenant">
            <summary>
            Multi tenant portal.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalMode.SingleTenant">
            <summary>
            Single tenant portal.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.PortalUnits">
            <summary>
            User defined units for measurement.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalUnits.Unknown">
            <summary>
            Unknown units.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalUnits.English">
            <summary>
            English units.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PortalUnits.Metric">
            <summary>
            Metric units.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.PreferredView">
            <summary>
            The user's preferred view for content, either Web or GIS.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PreferredView.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PreferredView.Web">
            <summary>
            Web preferred view.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.PreferredView.GIS">
            <summary>
            GIS preferred view.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.QuerySortOrder">
            <summary>
            Sort order options for search operations.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.QuerySortOrder.Ascending">
            <summary>
            Indicates that data should be sorted in a ascending order.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.QuerySortOrder.Descending">
            <summary>
            Indicates that data should be sorted in a descending order
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.RelationshipDirection">
            <summary>
            Relationship direction to use when getting the items related to another item (<see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRelatedItemsAsync(Esri.ArcGISRuntime.Portal.RelationshipType,System.Nullable{Esri.ArcGISRuntime.Portal.RelationshipDirection})">ArcGISPortalItem.GetRelatedItemsAsync</see>
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipDirection.Forward">
            <summary>
            Forward direction.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipDirection.Reverse">
            <summary>
            Reverse direction.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.RelationshipType">
            <summary>
            Type of relationship to use when getting the items related to another item (<see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.GetRelatedItemsAsync(Esri.ArcGISRuntime.Portal.RelationshipType,System.Nullable{Esri.ArcGISRuntime.Portal.RelationshipDirection})">ArcGISPortalItem.GetRelatedItemsAsync</see>
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.Map2Service">
            <summary>
            Relation from a web map to map services, feature services or image services.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.WebMappingApplication2Code">
            <summary>
            Relation from a web mapping application to the code.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.Map2FeatureCollection">
            <summary>
            Relation from a web map to feature collections.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.FeaturedItems2Item">
            <summary>
            Relation from feature items to items.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.MobileApp2Code">
            <summary>
            Relation from a mobile application to the code.
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.Service2Data">
            <summary>
            Relation from a service item (hosted feature service or map service) to a source data (service definition, CSV, shapefile).
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.RelationshipType.Service2Service">
            <summary>
            Models the association of a source service and a derived service.
            The source service is the origin of the relationship.
            The derived service is the destination of the relationship.
            The relationship is queryable in either direction.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.UserRole">
            <summary>
            User roles
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalUser.Role"/>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.UserRole.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.UserRole.Admin">
            <summary>
            Administrator
            </summary>
        </member>
        <member name="F:Esri.ArcGISRuntime.Portal.UserRole.Publisher">
            <summary>
            Publisher
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.GroupInfo">
            <summary>
            Represents a group identified by an owner and a title.
            </summary>
            <seealso cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.FeaturedGroups"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GroupInfo.Owner">
            <summary>
            Gets the user name of the group's owner.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GroupInfo.Title">
            <summary>
            Gets the title of the group.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.HelperServices">
            <summary>
            Various services needed by clients.
            </summary>
            <remarks>
            <para>
            This class contains properties to obtain information (most importantly the Url) for various special asynchronous web 
            services available on ArcGIS Online (AGOL) or ArcGIS Portal. The 
            <see cref="P:Esri.ArcGISRuntime.Portal.HelperServices.GeocodeServices">HelperServices.GeocodeServices</see> Property 
            provides information for <see cref="T:Esri.ArcGISRuntime.Tasks.Geocoding.LocatorTask">geocoding</see> (aka. locator) tasks. The 
            <see cref="P:Esri.ArcGISRuntime.Portal.HelperServices.GeometryService">HelperServices.GeometryService</see> Property 
            provides information for various geometry tasks (for 
            example: buffer, project, intersect, etc.). The 
            <see cref="P:Esri.ArcGISRuntime.Portal.HelperServices.PrintTaskService">HelperServices.PrintTaskService</see> Property 
            provides information for printing tasks. The 
            <see cref="P:Esri.ArcGISRuntime.Portal.HelperServices.RouteService">HelperServices.RouteService</see> Property provides 
            information for <see cref="T:Esri.ArcGISRuntime.Tasks.NetworkAnalyst.RouteTask">routing</see> tasks. To obtain a Portal.HelperServices 
            object, use the 
            <see cref="P:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.HelperServices">Portal.ArcGISPortalInfo.HelperServices</see> 
            Property.
            </para>
            <para>
            You do not have to be a logged in user using the <see cref="T:Esri.ArcGISRuntime.Security.AuthenticationManager">AuthenticationManager</see> 
            to get information for the <see cref="T:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo">Portal.ArcGISPortalInfo</see> object. 
            You can gain this information from anonymous access. However, to obtain information about the Portal.ArcGISPortalInfo 
            object that has a <see cref="T:Esri.ArcGISRuntime.Portal.PortalAccess">Portal.PortalAccess</see> level of <b>Private</b> 
            or <b>Shared</b> you need to use the AuthenticationManager by supplying the appropriate username/password credentials.
            </para>
            </remarks>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.GeocodeServices">
            <summary>
            Gets the geocode services.
            </summary>
            <value>
            The enumeration of geocode services.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.RouteService">
            <summary>
            Gets the route service.
            </summary>
            <value>
            The route service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.GeometryService">
            <summary>
            Gets the geometry service.
            </summary>
            <value>
            The geometry service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.PrintTaskService">
            <summary>
            Gets the print task service.
            </summary>
            <value>
            The print task service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.ClosestFacilityService">
            <summary>
            Gets the ArcGIS NAServer closest facility service.
            </summary>
            <value>
            The closest facility service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.AsyncClosestFacilityService">
            <summary>
            Gets the asynchronous ArcGIS NAServer closest facility service.
            </summary>
            <value>
            The closest facility service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.ServiceAreaService">
            <summary>
            Gets the ArcGIS NAServer service area service.
            </summary>
            <value>
            The service area service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.AsyncServiceAreaService">
            <summary>
            Gets the ArcGIS NAServer service area service with asynchronous functionality.
            </summary>
            <value>
            The asynchronous service area service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.SyncVRPService">
            <summary>
            Gets the ArcGIS NAServer service for synchronous Vehicle routing problem services.
            </summary>
            <value>
            The synchronous VRP service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.AsyncVRPService">
            <summary>
            Gets the ArcGIS NAServer service for asynchronous Vehicle routing problem services.
            </summary>
            <value>
            The asynchronous VRP service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.AsyncLocationAllocationService">
            <summary>
            Gets the ArcGIS geoprocessing service for asynchronous location-allocation network analysis.
            </summary>
            <value>
            The asynchronous location-allocation service.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.AnalysisService">
            <summary>
            Gets the hosted GP services that perform analyses.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.GeoenrichmentService">
            <summary>
            Gets the ArcGIS Geoenrichment server.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.TrafficService">
            <summary>
            Gets the ArcGIS TrafficMapServer service for traffic functionality.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.ElevationService">
            <summary>
            Gets the ArcGIS Geoprocessing services for elevation analysis.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.SyncElevationService">
            <summary>
            Gets the synchronous ArcGIS Geoprocessing services for elevation analysis.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperServices.HydrologyService">
            <summary>
            Gets the ArcGIS Geoprocessing services for hydrologic analysis.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.HelperService">
            <summary>
            Represents a generic helper service providing the Url of the service.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.HelperService.Url">
            <summary>
            Gets the URL of the service.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.GeocodeService">
            <summary>
            An ArcGIS GeocodeServer to use for Geocoding functionality.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.Extent">
            <summary>
            Gets the extent in geographical coordinates of the geocode service.
            </summary>
            <value>
            The extent.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.Name">
            <summary>
            Gets the geocoder name.
            For example 'Esri World Geocoder'.
            </summary>
            <value>
            The geocoder name.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.PlaceHolder">
            <summary>
            Gets the place holder.
            This text can serve as a hint to application users about the type of information they can enter in the search box. 
            </summary>
            <value>
            The place holder.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.SupportsPlaceFinding">
            <summary>
            Gets a value indicating whether the geocoder can be used for place finding.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.SupportsBatchGeocoding">
            <summary>
            Gets a value indicating whether the geocoder can be used for batch geocoding.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.ZoomScale">
            <summary>
            Gets the default zoom scale for custom geocoders.
            An application can use this scale to zoom to a point returned by the geocoder.
            </summary>
            <value>
            The default zoom scale.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.SingleLineFieldName">
            <summary>
            Gets the name of the single line field.
            </summary>
            <value>
            The name of the single line field.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.GeocodeService.SupportsSuggest">
            <summary>
            Gets a value indicating whether the geocoder supports the suggest API for autocomplete results.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.QueryParameters">
            <summary>
            Parameters to provide as input of a paginated query such as <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalInfo.QueryUsersAsync"/>
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.QueryParameters.StartIndex">
            <summary>
            Gets or sets the index of the first entry in the result set response.
            The index number is 1-based. 
            The default value of  <see cref="P:Esri.ArcGISRuntime.Portal.QueryParameters.StartIndex"/> is 1 (e.g.,. the first search result).
            The start index, along with the <see cref="P:Esri.ArcGISRuntime.Portal.QueryParameters.Limit"/> parameter can be used to paginate the search results.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.QueryParameters.Limit">
            <summary>
            Gets or sets the maximum number of results to be included in the result set response. 
            The default value is 10 and the maximum allowed value is 100.
            The start index, along with the limit parameter can be used to paginate the search results.
            The actual number of returned results may be less than <see cref="P:Esri.ArcGISRuntime.Portal.QueryParameters.Limit"/>. This happens when the number of results remaining after <see cref="P:Esri.ArcGISRuntime.Portal.QueryParameters.StartIndex"/> is less than <see cref="P:Esri.ArcGISRuntime.Portal.QueryParameters.Limit"/>.
            </summary>
            <value>
            The maximum number of results.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SearchParameters">
            <summary>
            Search parameters to provide as input of a search operation such as <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchUsersAsync(Esri.ArcGISRuntime.Portal.SearchParameters)"/>.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.SearchParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters"/> class.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.SearchParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.SearchParameters"/> class from a query string.
            </summary>
            <param name="queryString">The query string.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString">
            <summary>
            Gets or sets the query string to search against. 
            </summary>
            <value>
            The query string.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchParameters.SortField">
            <summary>
            Gets or sets the field to sort by.
            e.g for groups The allowed field names are title, owner, and created.
            </summary>
            <value>
            The sort field.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchParameters.SortOrder">
            <summary>
            Describes whether order returns in ascending or descending order. Default is ascending.
            </summary>
            <value>
            The sort order.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SpatialSearchParameters">
            <summary>
            Spatial search parameters to provide as input of a search operation such as <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortal.SearchItemsAsync(Esri.ArcGISRuntime.Portal.SpatialSearchParameters)">ArcGISPortal.SearchItemsAsync</see>
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.SpatialSearchParameters.#ctor(Esri.ArcGISRuntime.Geometry.Envelope)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.SpatialSearchParameters"/> class from a search extent.
            </summary>
            <param name="searchExtent">The search extent.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.SpatialSearchParameters.#ctor(Esri.ArcGISRuntime.Geometry.Envelope,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Esri.ArcGISRuntime.Portal.SpatialSearchParameters"/> class from a search extent and a query string.
            </summary>
            <param name="searchExtent">The search extent.</param>
            <param name="queryString">The query.</param>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SpatialSearchParameters.SearchExtent">
            <summary>
            Gets or sets the search extent for a spatial search.
            Search requires a SearchExtent, a <see cref="P:Esri.ArcGISRuntime.Portal.SearchParameters.QueryString"/> or both. 
            Spatial search is an overlaps/intersects function of the search extent and the extent of the document. 
            Sorting is not supported. 
            Documents that have no extent (e.g., mxds, 3dds, lyr) will not be found when doing a spatial search. 
            Document extent is assumed to be in geographic coordinates.
            </summary>
            <value>
            The search extent.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SearchResultInfo">
            <summary>
            Base class for the results of a search.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.Query">
            <summary>
            Gets the query string used for the search.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.TotalCount">
            <summary>
            Gets the total number of objects that fit the search query (may be more than the actual number of returned results).
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.StartIndex">
            <summary>
            Gets the index of the first entry in the result set response.
            The index number is 1-based. 
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.Limit">
            <summary>
            Gets the maximum number of results included in the result set response.
            The actual number of returned results may be less than <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.Limit"/>.
            This happens when the number of results remaining after <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.StartIndex"/> is less than <see cref="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.Limit"/>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo.NextStart">
            <summary>
            Gets the index of the entry after the actual result set response (or -1 if there is no more objects).
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SearchResultInfo`1">
            <summary>
            Represents the result of a portal search returning an enumeration of T objecs.
            </summary>
            <typeparam name="T">The type of data returned by the search as an enumeration of T.</typeparam>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfo`1.Results">
            <summary>
            Gets the result set response.
            </summary>
            <value>
            The results as an enumeration of T objects.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SearchResultInfoUsers">
            <summary>
            Represents the result of a portal search on users.
            Needs this specialized version when the results is returned as 'users' instead of 'results'
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfoUsers.Users">
            <summary>
            Gets or sets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.SearchResultInfoRoles">
            <summary>
            Represents the result of a portal search on roles.
            Needs this specialized version since the result enum is returned as 'roles' instead of 'results'
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.SearchResultInfoRoles.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.ShareItemResult">
            <summary>
            Represents the result of a <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String})">share item operation</see>.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.ShareAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean})"/>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.ShareItemResult.NotSharedWith">
            <summary>
            Gets the list of group Ids the item has not been shared with.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.UnshareItemResult">
            <summary>
            Represents the result of an <see cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalItem.UnshareAsync(System.Collections.Generic.IEnumerable{System.String})">unshare item operation</see>.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.UnshareItemResult.NotUnsharedFrom">
            <summary>
            Gets the list of group Ids the item has not been unshared from.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.UserMembership">
            <summary>
            Represents a user membership to a group.
            </summary>
            <seealso cref="M:Esri.ArcGISRuntime.Portal.ArcGISPortalGroup.GetUserMembershipAsync">ArcGISPortalGroup.GetUserMembershipAsync</seealso>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.UserMembership.UserName">
            <summary>
            Gets the requestor user name.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.UserMembership.Applications">
            <summary>
            Gets the number of applications.
            Available only to admins and owner.
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.UserMembership.MemberType">
            <summary>
            Gets the membership type.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.DateSerializer">
            <summary>
            Helper class to serialize/deserialize a date
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.EnumSerializer`1">
            <summary>
            Helper class to serialize/deserialize an enum
            </summary>
            <typeparam name="TEnum">The type of the enum or a nullable type of enum</typeparam>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.Utils.EnumSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes an Enum or a nullable Enum.
            </summary>
            <param name="value">The string value.</param>
            <returns>The TEnum object.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.Utils.EnumSerializer`1.Serialize(`0)">
            <summary>
            Serializes an enum or a nullable enum.
            </summary>
            <param name="value">The enum value.</param>
            <returns>The serialized string.</returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.Portal.Utils.EnumSerializer`1.SerializationName(System.Reflection.FieldInfo)">
            <summary>
            Returns serialization name either from EnumMemberAttribute or from field name.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.QueryBuilder">
            <summary>
            Helper to build query to arcgis on line
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.SearchAggregator">
            <summary>
            Helper sending multi requests in order to get all results of a search operation instead of a paginated result.
            </summary>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.WebRequestJson`1">
            <summary>
            Helper class to request a rest end point and to deserialize the object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Esri.ArcGISRuntime.Portal.Utils.StreamContent">
            <summary>
            Provides HTTP content based on a stream
            </summary>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.Utils.StreamContent.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.Utils.StreamContent.Filename">
            <summary>
            Gets or sets the file name.
            </summary>
            <value>
            The file name.
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.Utils.StreamContent.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>
            The type of the content (e.g image/x-png)
            </value>
        </member>
        <member name="P:Esri.ArcGISRuntime.Portal.Utils.StreamContent.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
            <value>
            The stream.
            </value>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeDictionary`2.AddInternal(`0,`1)">
            <summary>
            Adds items ignoring the read-only check
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Esri.ArcGISRuntime.RuntimeObservableCollection`1">
            <summary>
            This Collection handles internal ArcGIS Runtime collections and is functionally
             equivalent to <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            This type is for internal use only and is not meant to be used directly.
            Instead use the concrete subclasses provided.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.ClearItems">
            <summary>
            Called by base class Collection&lt;T&gt; when the list is being cleared;
            raises a CollectionChanged event to any listeners.
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is removed from list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <param name="index">Index position of the item being removed.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is added to list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <param name="index">The index number of the item.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Called by base class Collection&lt;T&gt; when an item is set in list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <param name="index">The index position of the item.</param>
            <param name="item">The item in the list.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Called by base class ObservableCollection&lt;T&gt; when an item is to be moved within the list;
            raises a CollectionChanged event to any listeners.
            </summary>
            <param name="newIndex">The new index value.</param>
            <param name="oldIndex">The old index value.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.BlockReentrancy">
            <summary>
            Disallow reentrant attempts to change this collection. E.g. a event handler
            of the CollectionChanged event is not allowed to make changes to this collection.
            </summary>
            <remarks>
            typical usage is to wrap e.g. a OnCollectionChanged call with a using() scope:
            <code>
                    using (BlockReentrancy())
                    {
                        CollectionChanged(this, new NotifyCollectionChangedEventArgs(action, item, index));
                    }
            </code>
            </remarks>
            <returns>
            A <see cref="T:System.IDisposable"/> object.
            </returns>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.CheckReentrancy">
            <summary> Check and assert for reentrant attempts to change this collection. </summary>
            <exception cref="T:System.InvalidOperationException"> raised when changing the collection
            while another collection change is still being notified to other listeners </exception>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
            <param name="e">The event data that describes the property that changed.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event  />).
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
             Raises the <see cref="E:Esri.ArcGISRuntime.RuntimeObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Helper to raise CollectionChanged event to any listeners
            </summary>
        </member>
        <member name="M:Esri.ArcGISRuntime.RuntimeObservableCollection`1.OnCollectionReset">
            <summary>
            Helper to raise CollectionChanged event with action == Reset to any listeners
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.RuntimeObservableCollection`1.PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.RuntimeObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per <see cref="T:System.ComponentModel.INotifyPropertyChanged" />).
            </summary>
        </member>
        <member name="E:Esri.ArcGISRuntime.RuntimeObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="T:Esri.ArcGISRuntime.StringCollection">
            <summary>
            A collection of field name strings
            </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment">
            <summary>Documentation not found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.EnableBreakOnException(System.Boolean)">
            <summary>*Internal Use* Enables/disables breaking on exceptions.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="enable">true if the runtime should break on an exception, false otherwise.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.EnableLeakDetection(System.Boolean)">
            <summary>*Internal Use* Enables/disables memory leak detection.</summary>
            <remarks>
              Disabling will cause the runtime to dump all of the handle instances that were currently being tracked and it will not
              track handle instances from the point of disabling. Enabling leak detection will make the the runtime track all handle
              instances allocated from the point of enabling. By default, leak detection is turned on in debug builds and off in
              release builds.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="enable">true if the runtime should be tracking handle allocations and deallocations, false otherwise.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.EnableShowAssertDialog(System.Boolean)">
            <summary>*Internal Use* Enables/disables the assert/abort dialog on Windows Desktop.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="enable">true the assert/abort dialog should appear with abort, break and continue options. enable false if all asserts and errors should go to the debug console.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.GetPointsToDIPsFactor">
            <summary>*Internal Use* Get the points to DIPs conversion factor.</summary>
            <remarks>
              Symbol sizes in JSON are in typographic points, this factor will be applied to convert the symbol's size to DIPs. The
              default conversion factor is 1.0 (meaning 1 point == 1 DIP).
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.GetScreenCoordinateType">
            <summary>*Internal Use* Get the type of screen coordinates.</summary>
            <remarks>
              Screen coordinates may be in DIPs or pixels (depending on the platform). The default is RT_ScreenCoordinateType_DIPs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetClientId(System.String)">
            <summary>License an application for basic functionality.</summary>
            <remarks>
              License an application for basic functionality. This will remove the watermark present in developer mode and must be
              called in a deployed application. Whenever standard licensed functionality is accessed, the RT_Error_fn will be called.
              The client_id must be 16 alphanumeric ASCII characters. This function must be called before setting a license with
              RT_License_setLicense. Note that if any standard licensed functionality is accessed before calling this method, the
              RT_Error_fn will be called when this function is called and the application will remain in developer mode.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="clientId">client ID to set.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetGraphicsAPI(RuntimeCoreNet.GeneratedWrappers.CoreGraphicAPIType)">
            <summary>*Internal Use* Set the graphics API to be used.</summary>
            <remarks>
              This is used to set the graphics API for the lifetime of the application. It cannot be changed once set.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="type">The graphics API to be used.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetInstallDirectory(System.String)">
            <summary>*Internal Use* Set the location of the root folder for the deployment. Also sets the pedata location.</summary>
            <remarks>
              This is used to set the default location to look for resources and will set the pedata location. Possible resources are
              the DirectX shaders, mil2525c symbol dictionary, app6b symbol dictionary, and the hydrographic layers symbol dictionary.
              DirectX shaders default location.  install_path /resources/shaders    mil2525c symbol dictionary default location.
              install_path /resources/symbols/mil2525c    app6b symbol dictionary default location.  install_path
              /resources/symbols/app6b    hydrographic layers symbol dictionary default location.  install_path
              /resources/symbols/hydrographic_s57
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="installPath">The path to the root folder of the deployment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetPointsToDIPsFactor(System.Single)">
            <summary>*Internal Use* Set the points to DIPs conversion factor.</summary>
            <remarks>
              Symbol sizes in JSON are in typographic points, this factor will be applied to convert the symbol's size to DIPs. The
              default conversion factor is 1.0 (meaning 1 point == 1 DIP).
              Error Types: RT_ErrorType_commonInvalidArgument Invalid argument, points to DIPs conversion factor must be &gt; 0.0 and cannot be
              NAN.
            </remarks>
            <param name="pointsToDipsFactor">The points to DIPs conversion factor.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetScreenCoordinateType(RuntimeCoreNet.GeneratedWrappers.CoreScreenCoordinateType)">
            <summary>*Internal Use* Set the type of screen coordinates.</summary>
            <remarks>
              Screen coordinates may be in DIPs or pixels (depending on the platform). The default is RT_ScreenCoordinateType_DIPs.
            </remarks>
            <param name="screenCoordType">The screen coordinate type.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvironment.SetTempDirectory(System.String)">
            <summary>*Internal Use* Sets the temp directory for the process.</summary>
            <remarks>
              Sets the temp directory for the process.
            </remarks>
            <param name="tempPath">Full pathname of the temporary file.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreClientReference">
            <summary>*Internal Use* The client reference object.</summary>
            <remarks>
              This is any object that the API controls the memory management but the Common API determines the lifetime. You need to
              set the client release function. This is called when client referenced items can be released. You need to pass this
              handle to all client reference functions. You will get this handle from various functions and the handle must be
              destroyed from RT_ClientReference_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.PrivateReleaseUserDefinedFailure(System.IntPtr)">
            <summary>
            Releases the GCHandle (and underlying exception) when callback from C-API fires
            </summary>
            <param name="userDefinedFailure"></param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.CreateClientReferenceHandleFromException(System.Exception)">
            <summary>
            Wraps a .Net Exception into a CoreClientReference for passing to native code.
            The Exception is kept alive with a GCHandle.
            The GCHandle is released with a callback from native code
            </summary>
            <param name="exception">.Net exception to wrap</param>
            <returns>A Handle to a CoreClientReference</returns>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.#ctor(System.Exception)">
            <summary>
            Wraps an Exception in a CoreClientReference for passing back errors to the C-API.
            This will be returned in LoadFailure as userDefinedFailure, use the static function
            FromUserDefinedFailureToException to convert back to an exception
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.LiveClientReferenceCount">
            <summary>
            Count of ClientReferences that have not been released - for debugging purposes to see if we're leaking any.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.FromUserDefinedFailureToException(System.IntPtr)">
            <summary>
            Turns a userDefinedError back into an Exception. This is used to bring back exceptions from LoadFailed callbacks.
            </summary>
            <param name="userDefinedFailure"></param>
            <returns></returns>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClientReference.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreClientReference class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreClientReference instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase">
            <summary>
            Base class for core wrapper types. Contains the C-API handle.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.SetHandle(System.IntPtr)">
            <summary>
            Used to set the handle from derived classes constructor code when the constructor list cannot be used.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.Handle">
            <summary>
            The native handle the class wraps. Prefer to use the implicit cast from wrapper to IntPtr 
            for interop calls as this will also handle a null wrapper and turn it into a NULL Handle (same as IntPtr.Zero).
            If Dispose has been called its contained IntPtr will be IntPtr.Zero.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.op_Implicit(RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase)~System.IntPtr">
            <summary>
             Implicit cast from CoreWrapperBase to IntPtr. This should be used to obtain the IntPtr, and 
             when passing the instance as parameter to native interop functions.
            </summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.IsDisposed">
            <summary>
            True if the wrapped handle is null.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.Finalize">
            <summary>Base class destructor called last after derived finalizer during finalization.
            Release callbacks and then clear the handle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.PrivateDestroyHandle(System.Boolean)">
            <summary>Destroys a handle using this classes native destroy. Used internally by wrapper code, don't call externally, use Dispose</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Implemented in concrete classes to call the appropriate destroy_ PInvoke function.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.Dispose">
            <summary>IDispose implementation. Releases any callbacks and the native handle. The wrapper should not be used after this.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreWrapperBase.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAdjustForWrapAround">
            <summary>Take wrap around mode into consideration for the calculation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAdjustForWrapAround.Enable">
            <summary>Adjust for wrap around if it is enabled and supported.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAdjustForWrapAround.Disable">
            <summary>Ignore if wrap around is enabled.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit">
            <summary>Defines an angular unit of measurement.</summary>
            <remarks>
              Same as a RT_UnitHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all angular unit functions. The angular unit class is derived from the unit class. It must be destroyed by calling
              RT_Unit_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAngularUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAngularUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.PrivateCreateFromHandleInternal_CoreAngularUnit(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAngularUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAngularUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId)">
            <summary>Creates a unit given it's known id.</summary>
            <remarks>
              Creates a unit given it's known id. This object must be destroyed by calling function RT_Unit_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Unit_destroy on the return value.
            </remarks>
            <param name="unitId">The known id of the unit.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.AngularUnitId">
            <summary>Gets the RT_AngularUnitId of the given angular unit.</summary>
            <remarks>
              If an error occurs then RT_AngularUnitId_unknown is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.ConvertFrom(RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,System.Double)">
            <summary>Converts a value in another UOM into this UOM.</summary>
            <param name="angle">The value to convert.</param>
            <param name="fromUnit">The UOM to convert from.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.ConvertTo(RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,System.Double)">
            <summary>Converts a value in this UOM into another UOM.</summary>
            <param name="angle">The value to convert.</param>
            <param name="toUnit">The UOM to convert to.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.FromRadians(System.Double)">
            <summary>Converts a radian value to this UOM.</summary>
            <param name="radians">The value to convert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit.ToRadians(System.Double)">
            <summary>Converts a value in this UOM to radians.</summary>
            <param name="angle">The value to convert.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId">
            <summary>Defines a list of the most commonly-used angular units of measurement.</summary>
            <remarks>
              These values can be used to create instances of RT_AreaUnitHandle, as an alternative to using well-known IDs (WKIDs). In
              addition to the units in this enumeration, you can also use less commonly-used units, by passing a WKID of an angular
              unit to the inherited RT_Unit_fromUnitId factory method. The function RT_Unit_getUnitId returns the WKID of the unit.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Unknown">
            <summary>
              Indicates that the unit of angular measurement is unknown. This value may be returned from an AngularUnit created from a
              WKID of a less commonly used unit of measurement that does not have an equivalent value in this enumeration.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Degrees">
            <summary>Indicates an angular measurement in degrees. This unit has a WKID of 9102.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Grads">
            <summary>Indicates an angular measurement in grads. This unit has a WKID of 9105.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Minutes">
            <summary>Indicates an angular measurement in minutes, equal to one-sixtieth of a degree. This unit has a WKID of 9103.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Radians">
            <summary>Indicates an angular measurement in radians. This unit has an WKID of 9101.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAngularUnitId.Seconds">
            <summary>Indicates an angular measurement in seconds, equal to one-sixtieth of a minute. This unit has a WKID of 9104.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode">
            <summary>*Internal Use* How animations are combined.</summary>
            <remarks>
              How animations are combined.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode.Queue">
            <summary>Starts when previous animation is finished.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode.CancelPrevious">
            <summary>Starts right away, cancels any animation of that type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode.Aggregate">
            <summary>
              Cancels any currently executing animation, but bases the end value on the end value of any currently executing
              animation. Not useful for animations that have an absolute end (zoom to), but useful for animations that have a relative
              end (zoom).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode.ReplacePending">
            <summary>Starts when previous animation is finished, but will never let the queue grow past 2 animations.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode.Unknown">
            <summary>An unknown status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve">
            <summary>*Internal Use* Control how a the map view is moved between positions.</summary>
            <remarks>
              Controls how the map view is animated. To play with the easing functions: http://gizma.com/easing/
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.Linear">
            <summary>Move linear.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInQuad">
            <summary>Move in quadratically.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutQuad">
            <summary>Move out quadratically.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutQuad">
            <summary>Move in and out quadratically.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInCubic">
            <summary>Move in cubicly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutCubic">
            <summary>Move out cubicly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutCubic">
            <summary>Move in and out cubicly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInQuart">
            <summary>Move in quartic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutQuart">
            <summary>Move out quartic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutQuart">
            <summary>Move in and out quartic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInQuint">
            <summary>Move in quintic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutQuint">
            <summary>Move out quintic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutQuint">
            <summary>Move in and out quintic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInSine">
            <summary>Move in sine.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutSine">
            <summary>Move out sine.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutSine">
            <summary>Move in and out sine.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInExpo">
            <summary>Move in exponentially.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutExpo">
            <summary>Move out exponentially.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutExpo">
            <summary>Move in and out exponentially.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInCirc">
            <summary>Move in circularly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseOutCirc">
            <summary>Move out circularly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.EaseInOutCirc">
            <summary>Move in and out circularly.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve.Unknown">
            <summary>An unknown animation curve.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties">
            <summary>*Internal Use* Information about an animation for the map view.</summary>
            <remarks>
              You need to pass this handle to all animation properties functions. This is an opaque handle. It must be destroyed by
              calling RT_AnimationProperties_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAnimationProperties class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAnimationProperties instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.#ctor">
            <summary>*Internal Use* Creates an animation property object.</summary>
            <remarks>
              The animation properties is used to control animations in the map view. This object must be destroyed by calling
              function RT_AnimationProperties_destroy. If an error occurs the error handler RT_ErrorHandler will be called.  default
              values delay = 0 seconds duration = 0.25 seconds curve = RT_AnimationCurve_easeOutQuad addMode =
              RT_AnimationAddMode_cancelPrevious
              Warning: You must call RT_AnimationProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.#ctor(System.Single,System.Single,RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve,RuntimeCoreNet.GeneratedWrappers.CoreAnimationAddMode)">
            <summary>*Internal Use* Creates an animation property object.</summary>
            <remarks>
              The animation properties is used to control animations in the map view. This object must be destroyed by calling
              function RT_AnimationProperties_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_AnimationProperties_destroy on the return value.
            </remarks>
            <param name="addMode">The animation add mode.</param>
            <param name="curve">The animation curve.</param>
            <param name="delay">The amount of delay in seconds.</param>
            <param name="duration">The duration in seconds.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.AddMode">
            <summary>*Internal Use* Retrieve the animation add mode.</summary>
            <remarks>
              Retrieve animation properties add mode.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.Curve">
            <summary>*Internal Use* Retrieve the animation curve.</summary>
            <remarks>
              Retrieve animation properties curve.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.Delay">
            <summary>*Internal Use* Retrieve the delay for the animation.</summary>
            <remarks>
              Retrieve delay for the animation in seconds.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties.Duration">
            <summary>*Internal Use* Retrieve the duration for the animation.</summary>
            <remarks>
              Retrieve duration for the animation in seconds.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAnimator">
            <summary>*Internal Use* An animator object.</summary>
            <remarks>
              Allows for fine grain control of animations. You need to pass this handle to all animator functions. This is an opaque
              handle. It must be destroyed by calling RT_Animator_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAnimator class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAnimator instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.IsPanning">
            <summary>*Internal Use* Returns true if a panning process is currently executing.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.IsRotating">
            <summary>*Internal Use* Returns true if a rotation process is currently executing.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.IsZooming">
            <summary>*Internal Use* Returns true if a zooming process is currently executing.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.Pan(System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to pan the map view by offsetting the current center of the map view.</summary>
            <remarks>
              Non-overloaded method: PanRelative
            </remarks>
            <param name="dx">An offset value to add to the current value.</param>
            <param name="dy">An offset value to add to the current value.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.RotateTo(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to rotate the map view by the provided angle.</summary>
            <remarks>
              Non-overloaded method: RotateTo
            </remarks>
            <param name="angleDegrees">The angle in degrees.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.RotateTo(System.Double,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to rotate the map view by the provided angle.</summary>
            <remarks>
              Non-overloaded method: RotateToAroundMapPoint
            </remarks>
            <param name="angleDegrees">The angle in degrees.</param>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.RotateTo(System.Double,System.Int32,System.Int32,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to rotate the map view by the provided angle.</summary>
            <remarks>
              Non-overloaded method: RotateToAroundScreenPoint
            </remarks>
            <param name="angleDegrees">The angle in degrees.</param>
            <param name="properties">An animator properties object.</param>
            <param name="screenX">The x ordinate of a point, in pixels.</param>
            <param name="screenY">The y ordinate of a point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.StopAllAnimations">
            <summary>*Internal Use* Stops all animations.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.StopPanAnimations">
            <summary>*Internal Use* Stops all pan animations.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.StopRotationAnimations">
            <summary>*Internal Use* Stops all rotation animations.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.StopZoomAnimations">
            <summary>*Internal Use* Stops all zoom animations.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.Zoom(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view by multiplying the current map view scale by the given factor.</summary>
            <remarks>
              Non-overloaded method: ZoomRelative
            </remarks>
            <param name="factor">A number to multiply the current value by.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.Zoom(System.Double,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view by multiplying the cuurrent map view scale by the given factor.</summary>
            <remarks>
              Non-overloaded method: ZoomRelativeAroundMapPoint
            </remarks>
            <param name="factor">A number to multiply the current value by.</param>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.Zoom(System.Double,System.Int32,System.Int32,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view by multiplying the current map view scale by the given factor.</summary>
            <remarks>
              Non-overloaded method: ZoomRelativeAroundScreenPoint
            </remarks>
            <param name="factor">A number to multiply the current value by.</param>
            <param name="properties">An animator properties object.</param>
            <param name="screenX">The x ordinate of a point, in pixels.</param>
            <param name="screenY">The y ordinate of a point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomTo(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided geometry.</summary>
            <remarks>
              Non-overloaded method: ZoomToGeometry
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="padding">A margin to add around the geometry so that it doesn't touch the edge of the map.</param>
            <param name="properties">An animator properties object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToResolution(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided resolution.</summary>
            <remarks>
              Non-overloaded method: ZoomToResolution
            </remarks>
            <param name="properties">An animator properties object.</param>
            <param name="resolution">The degree of detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToResolution(System.Double,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided resolution.</summary>
            <remarks>
              Non-overloaded method: ZoomToResolutionAroundMapPoint
            </remarks>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
            <param name="properties">An animator properties object.</param>
            <param name="resolution">The degree of detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToResolution(System.Double,System.Int32,System.Int32,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided resolution.</summary>
            <remarks>
              Non-overloaded method: ZoomToResolutionAroundScreenPoint
            </remarks>
            <param name="properties">An animator properties object.</param>
            <param name="resolution">The degree of detail.</param>
            <param name="screenX">The x ordinate of a point, in pixels.</param>
            <param name="screenY">The y ordinate of a point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToScale(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided scale.</summary>
            <remarks>
              Non-overloaded method: ZoomToScale
            </remarks>
            <param name="properties">An animator properties object.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToScale(System.Double,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided scale.</summary>
            <remarks>
              Non-overloaded method: ZoomToScaleAroundMapPoint
            </remarks>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
            <param name="properties">An animator properties object.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAnimator.ZoomToScale(System.Double,System.Int32,System.Int32,RuntimeCoreNet.GeneratedWrappers.CoreAnimationProperties)">
            <summary>*Internal Use* Starts an animation to zoom the map view to the provided scale.</summary>
            <remarks>
              Non-overloaded method: ZoomToScaleAroundScreenPoint
            </remarks>
            <param name="properties">An animator properties object.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
            <param name="screenX">The x ordinate of a point, in pixels.</param>
            <param name="screenY">The y ordinate of a point, in pixels.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode">
            <summary>An enumeration of various antialiasing modes.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.Unknown">
            <summary>An unknown antialiasing mode</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.None">
            <summary>No antialiasing is performed.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.Fastest">
            <summary>Minimal antialiasing is performed, optimized for speed.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.Fast">
            <summary>Some antialiasing is performed, optimized for speed with better quality than can be achieved with Fastest.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.Normal">
            <summary>A good balance of speed and quality.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAntialiasingMode.Best">
            <summary>The best quality antialiasing. This option takes the longest to render.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature">
            <summary>A handle that represents an ArcGIS feature.</summary>
            <remarks>
              You need to pass this handle to all ArcGIS Feature functions. You can get this handle from various functions and the
              handle must be destroyed from RT_Feature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeature instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.PrivateCreateFromHandleInternal_CoreArcGISFeature(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeature instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.CanEditAttachments">
            <summary>Returns true if attachments on this feature can be edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.CanUpdateGeometry">
            <summary>Returns true if the geometry of this feature can be edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.AddAttachment(System.String,System.String,System.Byte[])">
            <summary>Adds a new attachment for this feature.</summary>
            <param name="contentType">Type of the content.</param>
            <param name="data">The data.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.DeleteAttachment(RuntimeCoreNet.GeneratedWrappers.CoreAttachment)">
            <summary>Deletes an attachment of this feature.</summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.DeleteAttachments(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Deletes a list of attachments from this feature.</summary>
            <param name="attachments">A RT_VectorHandle of RT_ElementType_attachment. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.FetchAttachments">
            <summary>Gets the list of attachments on this feature.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.Load">
            <summary>Loads the object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.RetryLoad">
            <summary>Retry loading the picture marker symbol.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeature.UpdateAttachment(RuntimeCoreNet.GeneratedWrappers.CoreAttachment,System.String,System.String,System.Byte[])">
            <summary>Updates an attachment for this feature.</summary>
            <param name="attachmentInfo">Information describing the attachment.</param>
            <param name="contentType">Type of the content.</param>
            <param name="data">The data.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo">
            <summary>A handle that represents the service layer metadata for an ArcGIS Feature Layer.</summary>
            <remarks>
              You need to pass this handle to all feature service layer info functions. You will get this handle from various
              functions and the handle must be destroyed from RT_ArcGISFeatureLayerInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeatureLayerInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeatureLayerInfo instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.#ctor(System.String)">
            <summary>Creates a new handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_ArcGISFeatureLayerInfo_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ArcGISFeatureLayerInfo_destroy on the return value.
            </remarks>
            <param name="url">The feature layer's url.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.URL">
            <summary>Returns the layer's URL.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.AllowGeometryUpdates">
            <summary>Returns true if the layer allows geometry updates.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Capabilities">
            <summary>Returns the layer's capabilities.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.CopyrightText">
            <summary>Returns the layer's copyright.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.DataVersioned">
            <summary>Returns true if the layer has versioned data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.DefaultVisibility">
            <summary>Returns true if the layer default visibility value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Description">
            <summary>Returns the layer's description.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.DisplayFieldName">
            <summary>Returns the layer's display field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.DrawingInfo">
            <summary>Returns the layer's drawing info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.EditFieldsInfo">
            <summary>Returns the layer's edit fields info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.EffectiveMaxScale">
            <summary>Returns the layer's effective max scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.EffectiveMinScale">
            <summary>Returns the layer's effective min scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Extent">
            <summary>Returns the layer's extent.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.FeatureTemplates">
            <summary>Returns the layer's feature templates.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.FeatureTypes">
            <summary>Returns the layer's feature types.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Fields">
            <summary>Returns the layer's field definitions.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.GeometryType">
            <summary>Returns the layer's geometry type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.GlobalIdFieldName">
            <summary>Returns the layer's global id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.HasAttachments">
            <summary>Returns true if the layer has attachments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.HasM">
            <summary>Returns true if the layer has m ordinates.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.HasZ">
            <summary>Returns true if the layer has z ordinates.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.LayerOrTableType">
            <summary>Returns the layer's type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.MaxRecordCount">
            <summary>Returns the layer's max record count.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.MaxScale">
            <summary>Returns the layer's max scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.MinScale">
            <summary>Returns the layer's min scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ObjectIdFieldName">
            <summary>Returns the layer's object id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.OwnershipBasedAccessControl">
            <summary>Returns the layer's ownership based access control.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.RelationshipInfos">
            <summary>Returns the layer's relationship classes.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ServiceLayerId">
            <summary>Returns the layer's ID.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ServiceLayerName">
            <summary>Returns the layer's name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ServiceSourceType">
            <summary>Returns the layer's service type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SupportsAdvancedQueries">
            <summary>Returns true if the layer supports advanced queries.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SupportsRollbackOnFailureParameter">
            <summary>Returns true if the layer supports rolling back changes on failure.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SupportsStatistics">
            <summary>Returns true if the layer supports statistics.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.TimeInfo">
            <summary>Returns the layer's time info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.TypeIdFieldName">
            <summary>Returns the layer's type id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Version">
            <summary>Returns the layer's version.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ZDefault">
            <summary>Returns the layer's default z value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.ZDefaultsEnabled">
            <summary>Returns true if the layer defaults z values.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.GetFeatureType(System.String)">
            <summary>Gets a feature type with the given name.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.GetField(System.String)">
            <summary>Returns the field definition of the given field name.</summary>
            <param name="fieldNameOrAlias">The field name or it's alias.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.Load">
            <summary>Loads the object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo.RetryLoad">
            <summary>Retry loading the picture marker symbol.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo">
            <summary>A handle that represents the service metadata for an ArcGIS Feature Service.</summary>
            <remarks>
              You need to pass this handle to all feature service info functions. You will get this handle from various functions and
              the handle must be destroyed from RT_ArcGISFeatureServiceInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeatureServiceInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeatureServiceInfo instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.#ctor(System.String)">
            <summary>Creates a feature service info handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_ArcGISFeatureServiceInfo_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ArcGISFeatureServiceInfo_destroy on the return value.
            </remarks>
            <param name="url">URL of the feature service.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.URL">
            <summary>Returns the service's URL.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.AllowGeometryUpdates">
            <summary>Returns true if the service allows geometry updates.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.CopyrightText">
            <summary>Returns the service's copyright.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.Description">
            <summary>Returns the service's description.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.DocumentInfo">
            <summary>Returns the service's document info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.EditorTrackingInfo">
            <summary>Returns the service's editor tracking info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.FeatureLayerInfos">
            <summary>Returns the service's layers.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.FeatureServiceCapabilities">
            <summary>Returns the service's capabilities.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.FullExtent">
            <summary>Returns the service's full extent.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.HasStaticData">
            <summary>Returns true if the service has static data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.HasVersionedData">
            <summary>Returns true if the service has versioned data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.InitialExtent">
            <summary>Returns the service's initial extent.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.MaxRecordCount">
            <summary>Returns the service's max record count.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.ServiceDescription">
            <summary>Returns the service's description.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SpatialReference">
            <summary>Returns the service's spatial reference.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SupportsDisconnectedEditing">
            <summary>Returns true if the service supports disconnected editing.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SyncCapabilities">
            <summary>Returns the service's sync capabilities</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SyncEnabled">
            <summary>Returns true if the service has sync enabled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.TableInfos">
            <summary>Returns the service's tables.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.Unit">
            <summary>Returns units used by the service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.Version">
            <summary>Returns the service's version.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.ZDefault">
            <summary>Returns the service's default z value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.ZDefaultsEnabled">
            <summary>Returns true if the service defaults z values.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.Load">
            <summary>Loads the object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo.RetryLoad">
            <summary>Retry loading the picture marker symbol.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable">
            <summary>A handle that represents an ArcGIS feature table.</summary>
            <remarks>
              You need to pass this handle to all feature table functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureTable_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeatureTable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.PrivateCreateFromHandleInternal_CoreArcGISFeatureTable(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISFeatureTable instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.EditCapabilities">
            <summary>Returns the edit capabilities of this feature table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.EditableAttributeFields">
            <summary>Returns a list of editable fields.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.FeatureTemplates">
            <summary>Returns a list of the feature templates on this table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.FeatureTypes">
            <summary>Returns the feature types for this table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GlobalIdField">
            <summary>Gets the global id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.HasAttachments">
            <summary>Returns true if the features in this table have attachments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.LayerInfo">
            <summary>Returns the service information related to the feature layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.ObjectIdField">
            <summary>Gets the object id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.ServiceLayerId">
            <summary>Returns the layer ID in the feature service that this table was created from.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.TypeIdField">
            <summary>Gets the type id field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.UseAdvancedSymbology">
            <summary>Returns true if using advanced symbology.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.CreateFeatureWithTemplate(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate)">
            <summary>Creates a new feature based on the provided feature template.</summary>
            <param name="featureTemplate">The feature template.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.CreateFeatureWithTemplateAndGeometry(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Creates a new feature based on the provided feature template and geometry.</summary>
            <param name="featureTemplate">The feature template.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.CreateFeatureWithType(RuntimeCoreNet.GeneratedWrappers.CoreFeatureType)">
            <summary>Creates a new feature based on the provided feature type.</summary>
            <param name="featureType">Type of the feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.CreateFeatureWithTypeAndGeometry(RuntimeCoreNet.GeneratedWrappers.CoreFeatureType,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Creates a new feature based on the provided feature type and geometry.</summary>
            <param name="featureType">Type of the feature.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetAddedFeatures">
            <summary>Returns the features added since the last sync.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetAddedFeaturesCount">
            <summary>Returns the number of features added since the last sync.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetDeletedFeatures">
            <summary>Returns the features deleted since the last sync.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetDeletedFeaturesCount">
            <summary>Returns the number of features deleted since the last sync.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetFeatureTemplate(System.String)">
            <summary>Searches for the feature template with the given name.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetFeatureType(System.String)">
            <summary>Searches for the feature type with the given name.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetUpdatedFeatures">
            <summary>Returns the features updated since the last sync.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable.GetUpdatedFeaturesCount">
            <summary>Returns the number of features updated since the last sync.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer">
            <summary>
              An instance of this class allows you to display data from an ArcGIS Map service by using dynamically generated map
              images.
            </summary>
            <remarks>
              Same as a RT_LayerHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all map image layer functions. The ArcGIS map image layer class is derived from the layer class. It must be destroyed
              by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISMapImageLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISMapImageLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.PrivateCreateFromHandleInternal_CoreArcGISMapImageLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISMapImageLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISMapImageLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.#ctor">
            <summary>*Internal Use* Creates a map image layer object.</summary>
            <remarks>
              Use this object to create a map image layer. Once the layer is created you will have to set the URI by using
              RT_ArcGISMapImageLayer_setURI. Note: Prefer using RT_ArcGISMapImageLayer_createWithURI for creating a layer with an
              associated URI. This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>Creates a map image layer object from an item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="item">A RT_ItemHandle (only RT_PortalItemHandle are supported).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo)">
            <summary>Creates a map image layer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="serviceInfo">Information describing the service.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.#ctor(System.String)">
            <summary>Creates a map image layer object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="uRI">The URI to the service or to a map service portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.URI">
            <summary>Returns the URI of the map service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.GeodatabaseVersion">
            <summary>Gets the geodatabase version of the map image layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.ImageFormat">
            <summary>Gets the image format of the map image layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.MapImageSublayers">
            <summary>Gets the sublayers of a map image layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.MapServiceInfo">
            <summary>Returns the map service information.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageLayer.FromJSON(System.String)">
            <summary>*Internal Use* Creates a map image layer object.</summary>
            <remarks>
              Use this object to create a map image layer. This object must be destroyed by calling function RT_Layer_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="jSON">The JSON data describing the service.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer">
            <summary>An ArcGIS map image sublayer.</summary>
            <remarks>
              You can get this handle from RT_ArcGISMapImageLayer_getMapImageSublayers once the map image layer is loaded or you can
              get a collection of handles from another map image sublayer by using RT_ArcGISSublayer_getSublayers. You can also create
              a new sublayer from RT_ArcGISMapImageSublayer_createWithId. The handle must be destroyed from RT_ArcGISSublayer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISMapImageSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISMapImageSublayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.PrivateCreateFromHandleInternal_CoreArcGISMapImageSublayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISMapImageSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISMapImageSublayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.#ctor(System.Int32)">
            <summary>Create a map image sublayer with the specified id.</summary>
            <remarks>
              Create a map image sublayer with the specified id. This object must be destroyed by calling function
              RT_ArcGISSublayer_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The id is invalid
              Warning: You must call RT_ArcGISSublayer_destroy on the return value.
            </remarks>
            <param name="id">The sublayer id.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.DefaultVisibility">
            <summary>Returns the sublayer's default visibility.</summary>
            <remarks>
              Returns the sublayer default visibility. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapImageSublayer.SetName(System.String)">
            <summary>Sets the map image sublayer's name.</summary>
            <param name="name">The sublayer name.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo">
            <summary>Represents the map service metadata for an ArcGIS Map Service.</summary>
            <remarks>
              You need to pass this handle to all map service info functions. You can get this handle from various functions and the
              handle must be destroyed from RT_ArcGISMapServiceInfo_destroy.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISMapServiceInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISMapServiceInfo instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.#ctor(System.String)">
            <summary>Creates a map service info object from a URL.</summary>
            <remarks>
              Date: May 26th 2016
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_ArcGISMapServiceInfo_destroy on the return value.
            </remarks>
            <param name="uRL">The URL to the service.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.URL">
            <summary>Returns the map service URL.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.AttributionText">
            <summary>Returns the copyright text.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.Capabilities">
            <summary>Returns the map service's capabilities.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.CurrentVersion">
            <summary>Returns the current version of the ArcGIS map service.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.Description">
            <summary>Returns the description.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.DocumentInfo">
            <summary>Gets the document information which includes title, author and comments among other things.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.ExportTilesAllowed">
            <summary>Gets whether or not the exporting of tiles for offline use is allowed.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.FullExtent">
            <summary>Returns the full extent of the layer.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.InitialExtent">
            <summary>Returns the initial extent of the layer.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MapName">
            <summary>Returns the name of the map.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MaxExportTilesCount">
            <summary>Gets the maximum number of tiles that can be exported.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MaxImageHeight">
            <summary>Returns the max image height in pixels.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MaxImageWidth">
            <summary>Returns the max image width in pixels.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MaxRecordCount">
            <summary>Gets the maximum number of records that will be returned at once for a query.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MaxScale">
            <summary>Returns the layers's max scale.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.MinScale">
            <summary>Returns the layers's min scale.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.ServiceDescription">
            <summary>Returns the ArcGIS map service description.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.ServiceSourceType">
            <summary>Returns the type of this ArcGIS service.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SingleFusedMapCache">
            <summary>Returns true if the ArcGIS map service has a single fused map cache, false otherwise.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SpatialReference">
            <summary>Gets the spatial reference of the map service.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SupportedImageFormatTypes">
            <summary>Gets the image format types supported by this layer when generating a map image.</summary>
            <remarks>
              Returns a RT_ArrayHandle of RT_ElementType_string
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SupportsDynamicLayers">
            <summary>Returns true if the ArcGIS map service supports dynamic layers, false otherwise.</summary>
            <remarks>
              Will return false if an error occurs.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.TileInfo">
            <summary>Returns the tile information of this ArcGIS map service.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.TileServers">
            <summary>Gets a list of tile server URLs that can be used to split requests for tiles.</summary>
            <remarks>
              A RT_ArrayHandle of RT_ElementType_string.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.TimeInfo">
            <summary>
              Returns information on the support of time based queries and map requests of this map service. If this map service does
              not support time based requests, this will be null.
            </summary>
            <remarks>
              A RT_ArrayHandle of RT_ElementType_string.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.Unit">
            <summary>Gets the units used by this ArcGIS map service.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.Load">
            <summary>Loads the object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo.RetryLoad">
            <summary>Retry loading the ArcGIS map service metadata.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer">
            <summary>
              An instance of this class represents a layer that can visualize ArcGIS scene service. It must be destroyed by calling
              RT_Layer_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISSceneLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISSceneLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.PrivateCreateFromHandleInternal_CoreArcGISSceneLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISSceneLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISSceneLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.#ctor">
            <summary>*Internal Use* Creates a Scene layer object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.#ctor(System.String)">
            <summary>Creates a Scene layer object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="uRI">The URI to the service or to a scene service portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSceneLayer.URI">
            <summary>Returns the URI of the ArcGIS scene layer.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer">
            <summary>An ArcGIS sublayer.</summary>
            <remarks>
              This is a base class for RT_ArcGISMapImageSublayerHandle and RT_ArcGISTiledSublayerHandle. You can get a collection of
              handles from another sublayer by using RT_ArcGISSublayer_getSublayers. The handle must be destroyed from
              RT_ArcGISSublayer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISSublayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.PrivateCreateFromHandleInternal_CoreArcGISSublayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISSublayer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.CanChangeVisibility">
            <summary>Returns a flag indicating whether the sublayer visibility can be changed.</summary>
            <remarks>
              Returns a flag indicating whether the sublayer visibility can be changed. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.Id">
            <summary>Returns the sublayer's Id.</summary>
            <remarks>
              Returns the sublayer ID. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.IsPopupEnabled">
            <summary>Gets a flag indicating whether the RT_PopupDefinitionHandle defined on the RT_ArcGISSublayerHandle is enable / disable.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.IsVisible">
            <summary>Returns the sublayer's visibility.</summary>
            <remarks>
              Returns the sublayer visibility. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.MaxScale">
            <summary>Returns the sublayer's maximum scale.</summary>
            <remarks>
              Returns the sublayer maximum scale. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.MinScale">
            <summary>Returns the sublayer's minimum scale.</summary>
            <remarks>
              Returns the sublayer minimum scale. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.Name">
            <summary>Returns the sublayer's name.</summary>
            <remarks>
              Returns the sublayer name. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.ObjectType">
            <summary>Get the type of the sublayer.</summary>
            <remarks>
              Get the type of the sublayer object.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.PopupDefinition">
            <summary>Gets the pop-up definition for the sublayer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.ShowInLegend">
            <summary>Get whether the sublayer participates in the legend.</summary>
            <remarks>
              Get whether the sublayer is shown in the legend.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.SubLayerContents">
            <summary>Get the sub layer contents for the sublayer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.Sublayers">
            <summary>Gets the sublayers of a sublayer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the sublayer have changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.Clone">
            <summary>Copies an arcgis sublayer.</summary>
            <remarks>
              Clones a sublayer.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.FetchLegendInfos">
            <summary>Fetches the list of legend info for the sublayer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer)">
            <summary>Tests if two sublayers are equal.</summary>
            <param name="handle2">The second handle.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer.IsVisibleAtScale(System.Double)">
            <summary>Returns the sublayer's visibility at the specified scale.</summary>
            <remarks>
              Returns the sublayer visibility at the specified scale. Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayerType">
            <summary>The list of ArcGIS sublayer types.</summary>
            <remarks>
              This is used to determine the sublayer type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayerType.ArcGISMapImageSublayer">
            <summary>An ArcGIS map image sublayer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayerType.ArcGISTiledSublayer">
            <summary>An ArcGIS Tiled sublayer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayerType.Unknown">
            <summary>Unknown sublayer type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource">
            <summary>
              An instance of this class represents an elevation source that can visualize ArcGIS elevation image service. It must be
              destroyed by calling RT_ElevationSource_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledElevationSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledElevationSource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.PrivateCreateFromHandleInternal_CoreArcGISTiledElevationSource(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledElevationSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledElevationSource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.#ctor">
            <summary>Creates a ArcGIS tiled elevation source object.</summary>
            <remarks>
              An ArcGIS tiled elevation source is added to and RT_SurfaceHandle and provides elevation data on which layers may be
              draped or offset from. The ArcGIS tiled elevation source uses and ArcGIS Image service to provide the elevation data.
              This object must be destroyed by calling function RT_ElevationSource_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_ElevationSource_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.#ctor(System.String)">
            <summary>Creates a ArcGIS tiled elevation source with using a URL to an elevation service object.</summary>
            <remarks>
              An ArcGIS tiled elevation source is added to and RT_SurfaceHandle and provides elevation data on which layers may be
              draped or offset from. The ArcGIS tiled elevation source uses and ArcGIS Image service to provide the elevation data.
              This object must be destroyed by calling function RT_ElevationSource_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_ElevationSource_destroy on the return value.
            </remarks>
            <param name="uRI">The URI to a elevation service or to a elevation service portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledElevationSource.URI">
            <summary>Returns the URI of the elevation service.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer">
            <summary>An instance of this class allows you to display data from a ArcGIS Map service by using pre-generated tiles.</summary>
            <remarks>
              The service may be hosted in the cloud on ArcGIS Online or on-premise with ArcGIS Server. An ArcGIS tiled layer uses a
              cache of pre-generated tiles to create a map instead of dynamically generating map images. Same as a RT_LayerHandle.
              Changing type just to make it clear you get back a derived type. You need to pass this handle to all ArcGIS tiled layer
              functions. The ArcGIS tiled layer class is derived from the layer class. It must be destroyed by calling
              RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.PrivateCreateFromHandleInternal_CoreArcGISTiledLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor">
            <summary>*Internal Use* Creates an ArcGIS Tiled Layer object.</summary>
            <remarks>
              Use this object to create an ArcGIS tiled layer. Once the layer is created you will have to set the URI by using
              RT_ArcGISTiledLayer_setURI. Note: Prefer using RT_ArcGISTiledLayer_createWithURI for creating a layer with an associated
              URI. This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>Creates an ArcGIS Tiled Layer object from an item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="item">A RT_PortalItemHandle (only RT_PortalItemHandle are supported).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo)">
            <summary>Creates an ArcGIS Tiled Layer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="serviceInfo">Information describing the service.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTileCache)">
            <summary>Creates an ArcGIS Tiled Layer object from a tile cache.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="tileCache">A tile cache.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.#ctor(System.String)">
            <summary>Creates an ArcGIS Tiled Layer object.</summary>
            <remarks>
              Use this object to create an arcgis tiled layer. This object must be destroyed by calling function RT_Layer_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="uRI">The URI to a map service or to a map service portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.URI">
            <summary>Returns the URI of the map service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.MapServiceInfo">
            <summary>Returns the map service information.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.TileCache">
            <summary>Returns the underlying tile cache.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.TiledSublayers">
            <summary>Gets the sublayers of an ArcGIS tiled layer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledLayer.FromJSON(System.String)">
            <summary>*Internal Use* Creates an ArcGIS Tiled Layer object.</summary>
            <remarks>
              Use this object to create an arcgis tiled layer. This object must be destroyed by calling function RT_Layer_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="jSON">The JSON data describing the service.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledSublayer">
            <summary>An ArcGIS tiled sublayer.</summary>
            <remarks>
              You can get this handle from RT_ArcGISTiledLayer_getTiledSublayers once the tiled layer is loaded or you can get a
              collection of handles from another tiled sublayer by using RT_ArcGISSublayer_getSublayers. The handle must be destroyed
              from RT_ArcGISSublayer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledSublayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledSublayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledSublayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISTiledSublayer.PrivateCreateFromHandleInternal_CoreArcGISTiledSublayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISTiledSublayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISTiledSublayer instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer">
            <summary>An instance of this class allows you to display data from a ArcGIS Vector Tile data source.</summary>
            <remarks>
              The data source may be a service in ArcGIS Online or on-premise with ArcGIS Server, or a local vector tile cache. It
              must be destroyed by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISVectorTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISVectorTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.PrivateCreateFromHandleInternal_CoreArcGISVectorTiledLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArcGISVectorTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArcGISVectorTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.#ctor">
            <summary>*Internal Use* Creates an ArcGIS Vector Tiled Layer object.</summary>
            <remarks>
              This is an internal function to support two-stage construction of a ArcGIS Vector Tiled Layer. The default construction
              must be followed by a call to RT_ArcGISVectorTiledLayer_setURI or RT_ArcGISVectorTiledLayer_setItem This object must be
              destroyed by calling function RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>Creates an ArcGIS Vector Tiled Layer object from an item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="item">A RT_ItemHandle.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.#ctor(System.String)">
            <summary>Creates an ArcGIS Vector Tiled Layer object.</summary>
            <remarks>
              Use this object to create an arcgis vector tiled layer. This object must be destroyed by calling function
              RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="uRI">The URI to the data source; a style or service URL or local tile cache.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.URI">
            <summary>Returns the URI of the ArcGIS vector tiled layer</summary>
            <remarks>
              Error Types: RT_ErrorType_commonInvalidArgument
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.SourceInfo">
            <summary>Returns the vector tile source info</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.Style">
            <summary>Returns the vector tile style info</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArcGISVectorTiledLayer.SetItem(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>*Internal Use* Sets the portal_item that defines the ArcGIS vector tiled layer</summary>
            <remarks>
              This is an internal function to support two-stage construction of a ArcGIS Vector Tiled Layer. The portal item cannot be
              set after the layer has been requested to load or RT_ErrorType_commonIllegalState will occur.
              Error Types: RT_ErrorType_commonIllegalState RT_ErrorType_commonInvalidArgument
            </remarks>
            <param name="item">A RT_ItemHandle</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit">
            <summary>Defines an area unit of measurement.</summary>
            <remarks>
              Same as a RT_UnitHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all area unit functions. The area unit class is derived from the unit class. It must be destroyed by calling
              RT_Unit_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAreaUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAreaUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.PrivateCreateFromHandleInternal_CoreAreaUnit(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAreaUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAreaUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId)">
            <summary>Creates a unit given it's known id.</summary>
            <remarks>
              Creates a unit given it's known id. This object must be destroyed by calling function RT_Unit_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Unit_destroy on the return value.
            </remarks>
            <param name="unitId">The known id of the unit.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit)">
            <summary>Creates an area unit given a linear unit.</summary>
            <remarks>
              Creates a unit given a linear unit. This object must be destroyed by calling function RT_Unit_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Unit_destroy on the return value.
            </remarks>
            <param name="linearUnit">The linear unit.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.AreaUnitId">
            <summary>Gets the RT_AreaUnitId of the given Area unit.</summary>
            <remarks>
              If an error occurs then RT_AreaUnitId_unknown is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.ConvertFrom(RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit,System.Double)">
            <summary>Converts a value in another UOM into this UOM.</summary>
            <param name="area">The value to convert.</param>
            <param name="fromUnit">The UOM to convert from.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.ConvertTo(RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit,System.Double)">
            <summary>Converts a value in this UOM into another UOM.</summary>
            <param name="area">The value to convert.</param>
            <param name="toUnit">The UOM to convert to.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.FromSquareMeters(System.Double)">
            <summary>Converts a square meter value to this UOM.</summary>
            <param name="area">The value to convert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit.ToSquareMeters(System.Double)">
            <summary>Converts a value in this UOM to square meters.</summary>
            <param name="area">The value to convert.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId">
            <summary>
              Defines a list of the most commonly-used units of area measurement. These values can be used to create instances of
              RT_AreaUnitHandle, as an alternative to using well-known IDs (WKIDs). In addition to the units in this enumeration, you
              can also use less commonly-used units, by passing a WKID of an area unit to the inherited RT_Unit_fromUnitId factory
              method. The function RT_Unit_getUnitId returns the WKID of the unit.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.Unknown">
            <summary>
              Indicates that the unit of area measurement is unknown. This value may be returned from an AreaUnit created from a WKID
              of a less commonly used unit of measurement that does not have an equivalent value in this enumeration.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.Acres">
            <summary>Indicates an area measurement in acres. This unit has a WKID of 109402.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.Hectares">
            <summary>Indicates an area measurement in hectares. This unit has a WKID of 109401.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareCentimeters">
            <summary>Indicates an area measurement in square centimeters. This unit has a WKID of 109451.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareDecimeters">
            <summary>Indicates an area measurement in square decimeters. This unit has a WKID of 109450.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareFeet">
            <summary>Indicates an area measurement in square feet. This unit has a WKID of 109405.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareKilometers">
            <summary>Indicates an area measurement in square kilometers. This unit has a WKID of 109414.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareMeters">
            <summary>Indicates an area measurement in square meters. This unit has a WKID of 109404.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareMillimeters">
            <summary>Indicates an area measurement in square millimeters. This unit has a WKID of 109452.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareMiles">
            <summary>Indicates an area measurement in square statute miles. This unit has a WKID of 109439.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAreaUnitId.SquareYards">
            <summary>Indicates an area measurement in square yards. This unit has a WKID of 109442.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArray">
            <summary>Defines a immutable dynamic array.</summary>
            <remarks>
              You need to pass this handle to all array functions. You will get this handle from various functions and the handle must
              be destroyed from RT_Array_destroy. The array holds RT_ElementHandle objects. Use RT_Array_getValueType to determine
              what type of RT_ElementHandle objects are being stored in the array. A RT_ElementHandle that has been retrieved from the
              array can be converted to its underlying type by calling (for example) int32_t int_value =
              RT_Element_getValueAsInt32(element_handle, error_handler);
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArray class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArray instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.PrivateCreateFromHandleInternal_CoreArray(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArray class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArray instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArray.ObjectType">
            <summary>*Internal Use* Get the type of the array.</summary>
            <remarks>
              Get the type of the array object.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArray.Size">
            <summary>*Internal Use* Determines the number of values in the array.</summary>
            <remarks>
              Retrieves the number of values in the array. If an error occurs a 0 will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreArray.ValueType">
            <summary>*Internal Use* Returns the type of the values this array holds.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.At(System.Int64)">
            <summary>*Internal Use* Get a value at a specific position.</summary>
            <remarks>
              Retrieves the value at the specified position.
            </remarks>
            <param name="position">The position which you want to get the value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.Contains(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Does the array contain the given value.</summary>
            <remarks>
              Does the array contain a specific value.
            </remarks>
            <param name="value">The value you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.First">
            <summary>*Internal Use* Get the first value in the array.</summary>
            <remarks>
              Get the first value in the array.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.IndexOf(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Retrieves the position of the given value in the array.</summary>
            <remarks>
              Retrieves the position of the given value in the array.
            </remarks>
            <param name="value">The value you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.IsEmpty">
            <summary>*Internal Use* Determines if there are any values in the array.</summary>
            <remarks>
              Check if the array object has any values in it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreArray)">
            <summary>*Internal Use* Returns true if the two arrays are equal, false otherwise.</summary>
            <param name="array2">The second array.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArray.Last">
            <summary>*Internal Use* Get the last value in the array.</summary>
            <remarks>
              Get the last value in the array.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable">
            <summary>Defines a immutable dynamic array that provides callbacks when elements are added or removed.</summary>
            <remarks>
              You need to pass this handle to all array observable functions. You will get this handle from various functions and the
              handle must be destroyed from RT_Array_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArrayObservable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArrayObservable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.PrivateCreateFromHandleInternal_CoreArrayObservable(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreArrayObservable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreArrayObservable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.SetElementAddedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_ArrayObservable_ElementAdded)">
            <summary>*Internal Use* Callback invoked when an element has been added to the array.</summary>
            <param name="itemAdded">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreArrayObservable.SetElementRemovedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_ArrayObservable_ElementRemoved)">
            <summary>*Internal Use* Callback invoked when an element has been removed from the array.</summary>
            <param name="itemRemoved">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreArrayType">
            <summary>The different types of array.</summary>
            <remarks>
              Each of the different supported array types. Can get the type by calling RT_Array_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreArrayType.Array">
            <summary>The default array type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreArrayType.ArrayObservable">
            <summary>The observable array type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAtmosphereEffect">
            <summary>Various atmosphere effects.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAtmosphereEffect.None">
            <summary>No atmosphere effect.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAtmosphereEffect.HorizonOnly">
            <summary>Applies the atmosphere effect at the horizon of the scene view. It is not applied to the surface.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAtmosphereEffect.Realistic">
            <summary>Applies the atmosphere effect throughout the surface of the scene.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAttachment">
            <summary>A handle that represents a geodatabase attachment type.</summary>
            <remarks>
              You need to pass this handle to all attachment functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Attachment_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreAttachment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreAttachment instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.ContentType">
            <summary>Returns the content type of the attachment.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.HasFetchedData">
            <summary>Returns true if the attachment data has been retreived.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.Name">
            <summary>Returns the name of the attachment.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.Size">
            <summary>Returns the size of the attachment's data.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreAttachment.FetchData">
            <summary>Fetches the attachment's data.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAttachmentSyncDirection">
            <summary>The direction to synchronize attachments as part of geodatabase sync task.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttachmentSyncDirection.None">
            <summary>There is no specified attachment sync direction</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttachmentSyncDirection.Upload">
            <summary>The attachment changes are uploaded only.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttachmentSyncDirection.Bidirectional">
            <summary>The attachment changes are both uploaded and downloaded.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit">
            <summary>Types of unit for network attributes.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Unknown">
            <summary>An unknown unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Feet">
            <summary>A feet attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Miles">
            <summary>A miles attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Meters">
            <summary>A meters attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Kilometers">
            <summary>A kilometers attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.NauticalMiles">
            <summary>A nautical miles attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.DecimalDegrees">
            <summary>A decimal degrees attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Minutes">
            <summary>A minutes attribute unit.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreAttributeUnit.Hours">
            <summary>An hours attribute unit.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid">
            <summary>A map background determines what the map view looks like without anything in the map view.</summary>
            <remarks>
              You need to pass this handle to all map background functions. It represents an instance of a map background. You cannot
              directly access map background properties. You can get this handle from RT_BackgroundGrid_create and the handle must be
              destroyed from RT_BackgroundGrid_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBackgroundGrid class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBackgroundGrid instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.#ctor">
            <summary>Creates a background grid object.</summary>
            <remarks>
              Use this object to create a background grid object. This object must be destroyed by calling function
              RT_BackgroundGrid_destroy. If an error occurs the error handler RT_ErrorHandler will be called. defaults gridVisible =
              false gridSize = 32.0 gridLineWidth = 1.0 color = (0,0,0,255) black gridLineColor = (255,255,255,255) white
              Warning: You must call RT_BackgroundGrid_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreColor,RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Single,System.Single)">
            <summary>Creates a background grid object.</summary>
            <remarks>
              Use this object to create a background grid object. This object must be destroyed by calling function
              RT_BackgroundGrid_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument grid size must be greater than 1.0. RT_ErrorType_commonInvalidArgument grid line
              width must be greater than 0.0.
              Warning: You must call RT_BackgroundGrid_destroy on the return value.
            </remarks>
            <param name="backgroundColor">The color of the background.</param>
            <param name="gridLineColor">The color of the lines for the grid.</param>
            <param name="gridLineWidth">The width of the lines for the grid, in pixels.</param>
            <param name="gridSize">The size of the grid squares, in pixels.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.Color">
            <summary>Returns the currently set background color.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.GridLineColor">
            <summary>Returns the currently set grid line color.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.GridLineWidth">
            <summary>Returns the width of the grid lines, in typographic points.</summary>
            <remarks>
              Date: 27th May 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBackgroundGrid.GridSize">
            <summary>Returns the size of each grid square, in pixels.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBarrierType">
            <summary>Intended-usage types for barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBarrierType.Restriction">
            <summary>A restriction barrier type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBarrierType.CostAdjustment">
            <summary>A cost adjustment barrier type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBasemap">
            <summary>The basemap contains layers which are base or reference layers.</summary>
            <remarks>
              Typically, you will use one basemap layer that is drawn beneath all other layers, but you can also add a basemap layer
              on top of all other layers to depict boundaries, labels, or a road network. You need to pass this handle to all basemap
              functions. It represents an instance of a basemap. You cannot directly access basemap properties. You can get this
              handle from RT_Basemap_create and the handle must be destroyed from RT_Basemap_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBasemap class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBasemap instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor">
            <summary>Creates a basemap.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>Creates basemap with a single base layer.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
            <param name="baseLayer">A layer object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>Creates basemap with a portal item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
            <param name="item">The web map item (only RT_PortalItemHandle are supported).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Create a basemap with base layers and reference layers.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
            <param name="baseLayers">The base layers. A RT_VectorHandle of RT_ElementType_layer.</param>
            <param name="referenceLayers">The reference layers. A RT_VectorHandle of RT_ElementType_layer.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.#ctor(System.String)">
            <summary>Creates basemap with an URI.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
            <param name="uRI">URI of the basemap, most generally the URL of a webmap portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.URI">
            <summary>Retrieve the basemap's URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.BaseLayers">
            <summary>Basemap get base layers.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Item">
            <summary>Retrieves the basemap's item.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.LoadError">
            <summary>Retrieve the load error for the basemap.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.LoadStatus">
            <summary>Retrieve the basemap's load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Name">
            <summary>Retrieve the name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.ReferenceLayers">
            <summary>Basemap get reference layers.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Callback, called when the basemap set done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Set the function that will be called when the load status changes.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the basemap set load request required.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.CancelLoad">
            <summary>Cancel loading the basemap.</summary>
            <remarks>
              Cancels any outstanding requests that the basemap has sent. If the basemap is in the RT_LoadStatus_loading state then
              the RT_LoadStatus and RT_ErrorHandle will be set to RT_LoadStatus_failedToLoad and RT_ErrorType_commonUserCancelled and
              RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Clone">
            <summary>Copies a basemap.</summary>
            <remarks>
              Clones a map. RT_Basemap_setRequestRequiredCallback will not be set.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.FromJSON(System.String)">
            <summary>Creates a basemap from JSON.</summary>
            <remarks>
              The input_json can be either a webmap json that we ignore everything but the basemap metadata, or a portal info json
              that we ignore everything but the default basemap metadata. Though, in both cases, RT_Basemap_toJSON returns a webmap
              json.
            </remarks>
            <param name="inputJson">The input JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Imagery">
            <summary>Creates a basemap with imagery.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.ImageryWithLabels">
            <summary>Creates a basemap with imagery with labels.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.LightGrayCanvas">
            <summary>Creates a basemap with light gray canvas.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Load">
            <summary>Load the basemap.</summary>
            <remarks>
              Load will only try loading the object if the load status is RT_LoadStatus_notLoaded. If the object is not in the
              RT_LoadStatus_notLoaded state the object will do nothing and the RT_Loadable_doneLoading_fn function will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.NationalGeographic">
            <summary>Creates a basemap with National Geographic.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Oceans">
            <summary>Creates a basemap with oceans.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.OpenStreetMap">
            <summary>Creates a basemap with Open Street Map.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.RetryLoad">
            <summary>Retry loading the basemap.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the basemap is in the failed to load state. Does nothing if the
              basemap is in any other state.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Streets">
            <summary>Creates a basemap with streets.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.TerrainWithLabels">
            <summary>Creates a basemap with terrain with labels.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.ToJSON">
            <summary>Convert basemap to JSON.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBasemap.Topographic">
            <summary>Creates a basemap with topographic.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Basemap_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Basemap_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType">
            <summary>The list of basemap types.</summary>
            <remarks>
              This is used to determine which basemap is used.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.Imagery">
            <summary>Imagery.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.ImageryWithLabels">
            <summary>Imagery with labels.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.Streets">
            <summary>Streets.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.Topographic">
            <summary>Topographic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.TerrainWithLabels">
            <summary>Terrain with labels.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.LightGrayCanvas">
            <summary>Light gray canvas.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.NationalGeographic">
            <summary>National geographic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.Oceans">
            <summary>Oceans.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.OpenStreetMap">
            <summary>Open Street Map.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBasemapType.Unknown">
            <summary>Unknown Basemap type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer">
            <summary>An abstract base stretch renderer object which is derived from a raster renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all base stretch renderer functions.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBaseStretchRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBaseStretchRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.PrivateCreateFromHandleInternal_CoreBaseStretchRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBaseStretchRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBaseStretchRenderer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.MaxValues">
            <summary>Returns the maximum stretch values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.MinValues">
            <summary>Returns the minimum stretch values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.NumStandardDeviations">
            <summary>Returns the standard deviation factor.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.PercentClipMax">
            <summary>Returns the maximum percent clip value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.PercentClipMin">
            <summary>Returns the minimum percent clip value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.StatsEstimation">
            <summary>Returns the status of whether stats estimation is enabled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBaseStretchRenderer.StretchType">
            <summary>Returns the stretch type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer">
            <summary>An instance of this class allows you to display Bing map layers.</summary>
            <remarks>
              Information about Portal having a Bing map KeyA Bing map layer displays map content from a Bing Maps Imagery web service. The service provides access to static map
              tiles and imagery meta-data. The Bing map layer requires a Bing map key to be set. There are 2 ways to get a Bing map
              key. From a portal which contains the Bing map key. From a developer setting the Bing map key into the layer.  If the
              layer does not have a Bing map key or a portal URL where it can get the Bing map key when load is called the layer will
              fail to load. The developer must set the Bing map key or portal URL and call retry load so the layer can get the Bing
              map key.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBingMapLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBingMapLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.PrivateCreateFromHandleInternal_CoreBingMapLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBingMapLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBingMapLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle)">
            <summary>Creates a Bing map layer object.</summary>
            <remarks>
              Use this object to create a Bing map layer. This object must be destroyed by calling function RT_Layer_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="bingMapKey">The Bing map key.</param>
            <param name="style">The type of Bing map layer.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.BingMapKey">
            <summary>Get the Bing map key for the layer.</summary>
            <remarks>
              Get the Bing map key for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.Culture">
            <summary>Get the culture for the Bing map layer.</summary>
            <remarks>
              Get the culture for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.PortalURL">
            <summary>Get the portal URL for the layer.</summary>
            <remarks>
              Get the portal URL for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.Style">
            <summary>Get the style for the Bing map layer.</summary>
            <remarks>
              Get the style for the layer.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayer.FromPortalURL(System.String,RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle)">
            <summary>Creates a Bing map layer object.</summary>
            <remarks>
              Use this object to create a Bing map layer. This object must be destroyed by calling function RT_Layer_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="portalUrl">The URL to the portal.</param>
            <param name="style">The type of Bing map layer.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle">
            <summary>The list of Bing map layer styles.</summary>
            <remarks>
              This is used to determine the Bing map layer style.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle.Aerial">
            <summary>A Bing aerial layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle.Hybrid">
            <summary>A Bing hybrid layer (aerial with labels).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreBingMapLayerStyle.Road">
            <summary>A Bing road layer.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer">
            <summary>A blend renderer object which is derived from a hillshade renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all blend renderer functions. The handle must be destroyed by calling RT_RasterRenderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBlendRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBlendRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.PrivateCreateFromHandleInternal_CoreBlendRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBlendRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBlendRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.#ctor">
            <summary>Creates a blend renderer handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreColorRampName,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSlopeType,System.Double,System.Double,System.Int32)">
            <summary>Creates a blend renderer handle.</summary>
            <param name="altitude">Altitude angle of the light source.</param>
            <param name="azimuth">Azimuth angle of the light source, measured clockwise from north.</param>
            <param name="colorRampName">RT_ColorRampName</param>
            <param name="dem">The elevation data, RT_RasterHandle. Can be NULL.</param>
            <param name="gammas">RT_VectorHandle of RT_ElementType_float64. Gamma adjustment. Can be NULL.</param>
            <param name="maxValues">RT_VectorHandle of RT_ElementType_float64. Output stretch values, one for each band. Can be NULL.</param>
            <param name="minValues">RT_VectorHandle of RT_ElementType_float64. Output stretch values, one for each band. Can be NULL.</param>
            <param name="nodataValues">RT_VectorHandle of RT_ElementType_float64. Nodata values, one for each band. Can be NULL.</param>
            <param name="outputBitDepth">Output bit depth, default is 8-bit.</param>
            <param name="pixelSizeFactor">Pixel size factor, default is 1.</param>
            <param name="pixelSizePower">Pixel size power value, default is 1.</param>
            <param name="slopeType">RT_SlopeType</param>
            <param name="sourceMaxValues">RT_VectorHandle of RT_ElementType_float64. Input stretch values, one for each band. Can be NULL.</param>
            <param name="sourceMinValues">RT_VectorHandle of RT_ElementType_float64. Input stretch values, one for each band. Can be NULL.</param>
            <param name="zfactor">Factor to convert z unit to x,y unit, default is 1.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.ElevationRaster">
            <summary>Returns the elevation raster, RT_RasterHandle.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.Gammas">
            <summary>Returns gamma adjustments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.MaxValues">
            <summary>Returns maximum output stretch values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.MinValues">
            <summary>Returns minimum output stretch values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.NodataValues">
            <summary>Returns nodata values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.SourceMaxValues">
            <summary>Returns maximum source stretch values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBlendRenderer.SourceMinValues">
            <summary>Returns minimum source stretch values.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreBookmark">
            <summary>A geographic or time location for quick navigate.</summary>
            <remarks>
              You need to pass this handle to all bookmark functions. It represents an instance of a bookmark. You cannot directly
              access bookmark properties. You can get this handle from RT_Bookmark_create and the handle must be destroyed from
              RT_Bookmark_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreBookmark class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreBookmark instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.#ctor">
            <summary>Creates a bookmark object.</summary>
            <remarks>
              Use this object to create an object. This object must be destroyed by calling function RT_Bookmark_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Bookmark_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreViewpoint)">
            <summary>Creates a bookmark object.</summary>
            <remarks>
              Use this object to create an object. This object must be destroyed by calling function RT_Bookmark_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Bookmark_destroy on the return value.
            </remarks>
            <param name="name">The name.</param>
            <param name="viewpoint">The viewpoint.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.Name">
            <summary>Returns the name of the bookmark.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.TimeExtent">
            <summary>Returns the bookmark's time extent.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.Viewpoint">
            <summary>Returns the viewpoint representing the bookmark.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreBookmark.Clone">
            <summary>Copies a bookmark.</summary>
            <remarks>
              Clones a bookmark.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreByteArray">
            <summary>The byte array object.</summary>
            <remarks>
              You need to pass this handle to all byte array functions. You will get this handle from various functions and the handle
              must be destroyed from RT_ByteArray_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreByteArray.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreByteArray.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreByteArray.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreByteArray.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreByteArray class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreByteArray instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCamera">
            <summary>A camera on a view.</summary>
            <remarks>
              An immutable object used to set a location of the camera on a view. You must destroy this object using
              RT_Camera_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCamera class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCamera instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Create a camera object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Camera_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Camera_destroy on the return value.
            </remarks>
            <param name="altitude">The altitude of the camera position in meters</param>
            <param name="heading">The heading of the camera</param>
            <param name="latitude">The latitude of the camera position in degrees</param>
            <param name="longitude">The longitude of the camera position in degrees</param>
            <param name="pitch">The pitch of the camera</param>
            <param name="roll">The roll of the camera</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double,System.Double)">
            <summary>Create a camera object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Camera_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Camera_destroy on the return value.
            </remarks>
            <param name="heading">The heading of the camera</param>
            <param name="locationPoint">A point geometry containing the location and altitude at which to place the camera</param>
            <param name="pitch">The pitch of the camera</param>
            <param name="roll">The roll of the camera</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>Create a camera object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Camera_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Camera_destroy on the return value.
            </remarks>
            <param name="distance">The distance of the camera from the look at point</param>
            <param name="heading">The heading of the camera</param>
            <param name="lookAtPoint">A point geometry containing the location for the camera to look at</param>
            <param name="pitch">The pitch of the camera</param>
            <param name="roll">The roll of the camera</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCamera.Heading">
            <summary>Returns the heading of the camera</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCamera.Location">
            <summary>Returns the location of the camera</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCamera.Pitch">
            <summary>Returns the pitch of the camera</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCamera.Roll">
            <summary>Returns the roll of the camera</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.Elevate(System.Double)">
            <summary>Creates a copy of the camera with the altitude adjusted</summary>
            <param name="deltaAltitude">The altitude delta to apply to the output camera.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Check if the camera are equals.</summary>
            <remarks>
              Check if the cameras are equals.
            </remarks>
            <param name="otherCamera">The other camera object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.MoveForward(System.Double)">
            <summary>Creates a copy of the camera with the position moved by a given distance in the direction the camera is facing</summary>
            <param name="distance">The distance in meters the output camera will be moved</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.MoveTo(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates a copy of the camera with the location changed</summary>
            <param name="location">The location to move the output camera to.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.MoveToward(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double)">
            <summary>Creates a copy of the camera with the position moved in the direction of a target point by a given distance</summary>
            <param name="distance">The distance in meters the output camera will be moved.</param>
            <param name="targetPoint">The point location towards which the camera will move.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.RotateAround(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double,System.Double)">
            <summary>
              Creates a copy of the camera with the heading and pitch rotated from a give target point by a given delta angles in
              degrees
            </summary>
            <param name="deltaHeading">The delta angle in degrees by which the output camera heading will be rotated around the target_point</param>
            <param name="deltaPitch">The delta angle in degrees by which the output camera pitch will be rotated around the target_point</param>
            <param name="deltaRoll">The delta angle in degrees by which the output camera roll will be rotated around the target_point</param>
            <param name="targetPoint">The point location around which the camera will move.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.RotateTo(System.Double,System.Double,System.Double)">
            <summary>Creates a copy of the camera with a change in pitch, heading and roll to the given angles in degrees</summary>
            <param name="heading">The angle in degrees to which the output camera heading will be rotated</param>
            <param name="pitch">The angle in degrees to which the output camera pitch will be rotated</param>
            <param name="roll">The angle in degrees to which the output camera roll will be rotated</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCamera.ZoomToward(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double)">
            <summary>Creates a copy of the camera with the position moved in the direction of a target point by a given zoom factor</summary>
            <param name="factor">The factor the output camera will be moved.</param>
            <param name="targetPoint">The point location towards which the camera will zoom.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCIMLineSymbol">
            <summary>Used to draw linear features on a layer using complex patterns.</summary>
            <remarks>
              CIM line symbols display graphics using complex multi layered symbols for a line geometry. A CIM line symbol can be
              combination of symbols of different types and internally stored as symbol layers. It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMLineSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMLineSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMLineSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMLineSymbol.PrivateCreateFromHandleInternal_CoreCIMLineSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMLineSymbol instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCIMPointSymbol">
            <summary>Used to draw point or multipoint features on a layer using complex patterns.</summary>
            <remarks>
              CIM point symbols display graphics using complex multi layered symbols for a point geometry. A CIM point symbol can be
              combination of symbols of different types and internally stored as symbol layers. It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPointSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPointSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMPointSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMPointSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPointSymbol.PrivateCreateFromHandleInternal_CoreCIMPointSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMPointSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMPointSymbol instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCIMPolygonSymbol">
            <summary>Used to draw polygon features on a layer using complex patterns.</summary>
            <remarks>
              CIM polygon symbols display graphics using complex multi layered symbols for a polygon geometry. A CIM polygon symbol
              can be combination of symbols of different types and internally stored as symbol layers. It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPolygonSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPolygonSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMPolygonSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMPolygonSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMPolygonSymbol.PrivateCreateFromHandleInternal_CoreCIMPolygonSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMPolygonSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMPolygonSymbol instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol">
            <summary>A base class for CIM symbols. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              CIM symbols are used to display those graphics which are based on point, line or polygon and have multi layered complex
              symbols. Same as a RT_SymbolHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all CIM symbol functions. The CIM symbol class is derived from the symbol class. It must be destroyed by
              calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol.PrivateCreateFromHandleInternal_CoreCIMSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCIMSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCIMSymbol instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak">
            <summary>A class break object.</summary>
            <remarks>
              You need to pass this handle to all class break functions. This is an opaque handle. It must be destroyed by calling
              RT_ClassBreak_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreClassBreak class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreClassBreak instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.#ctor">
            <summary>Creates a new class break object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_ClassBreak_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ClassBreak_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.#ctor(System.String,System.String,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Creates a new class break object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_ClassBreak_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ClassBreak_destroy on the return value.
            </remarks>
            <param name="description">The description.</param>
            <param name="label">The label.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.Description">
            <summary>Gets the class break's description.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.InstanceId">
            <summary>*Internal Use* Get the instance id of the ClassBreak referenced by the specified RT_ClassBreakHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.Label">
            <summary>Returns the class break's label.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.MaxValue">
            <summary>Gets the class break's max value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.MinValue">
            <summary>Gets the class break's min value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.Symbol">
            <summary>Gets the class break's symbol.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.Clone">
            <summary>Creates a clone of the given handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.FromJSON(System.String)">
            <summary>Creates an instance of a class break by deserializing JSON.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.GetHash">
            <summary>Gets the hash value of the class break.</summary>
            <remarks>
              Get the hash value of the class break.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreClassBreak)">
            <summary>Compares two class break objects.</summary>
            <param name="right">The right.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreak.ToJSON">
            <summary>Returns a string containing the JSON representation of the handle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer">
            <summary>A Class Breaks Renderer object.</summary>
            <remarks>
              You need to pass this handle to all class breaks renderer functions. This is an opaque handle. It must be destroyed by
              calling RT_Renderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreClassBreaksRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreClassBreaksRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.PrivateCreateFromHandleInternal_CoreClassBreaksRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreClassBreaksRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreClassBreaksRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.#ctor">
            <summary>Creates a new class breaks renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a new class breaks renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
            <param name="classBreaks">An RT_VectorHandle containing RT_ElementType_classBreak types.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.ClassBreaks">
            <summary>Returns a list of all the class breaks in this renderer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.DefaultLabel">
            <summary>Gets the renderer's default label.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.DefaultSymbol">
            <summary>Gets the renderer's default symbol.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.FieldName">
            <summary>Gets the renderer's field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.MinValue">
            <summary>Gets the renderer's min value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.NormalizationField">
            <summary>Gets the renderer's normalization field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.NormalizationTotal">
            <summary>Gets the renderer's normalization total.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreClassBreaksRenderer.NormalizationType">
            <summary>Gets the renderer's normalization type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCodedValueDomain">
            <summary>A handle that specifies an explicit set of values for an RT_FieldHandle.</summary>
            <remarks>
              You need to pass this handle to all domain functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Domain_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCodedValueDomain.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCodedValueDomain.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCodedValueDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCodedValueDomain instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCodedValueDomain.PrivateCreateFromHandleInternal_CoreCodedValueDomain(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCodedValueDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCodedValueDomain instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCodedValueDomain.CodedValues">
            <summary>Gets the coded values of this domain.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreColor">
            <summary>A color object.</summary>
            <remarks>
              You need to pass this handle to all color functions. It represents an instance of a color. You cannot directly access
              color properties. This is an opaque handle. It must be destroyed by calling RT_Color_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColor.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColor.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColor.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColor.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreColor class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreColor instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColor.PrivateCreateFromHandleInternal_CoreColor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreColor class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreColor instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreColor.ObjectType">
            <summary>Get the type of color.</summary>
            <remarks>
              Get the type of color the object is.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreColorByteOrder">
            <summary>*Internal Use* Options for the pixel order in the image buffer.</summary>
            <remarks>
              Tells the export view function the pixel order for the image buffer.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorByteOrder.RGBA">
            <summary>The pixel order is red (R), green (G), blue (B) and alpha (A).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorByteOrder.BGRA">
            <summary>The pixels are in a blue, green, red, alpha order.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorByteOrder.Unknown">
            <summary>The pixel order is blue (B), green (G), red (R) and alpha (A).</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer">
            <summary>A colormap renderer object which is derived from a raster renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all colormap renderer functions. The handle must be destroyed by calling RT_RasterRenderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreColormapRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreColormapRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer.PrivateCreateFromHandleInternal_CoreColormapRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreColormapRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreColormapRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a raster colormap renderer handle.</summary>
            <param name="colors">A RT_VectorHandle of RT_ElementType_color.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreColormapRenderer.Colors">
            <summary>Returns color values used in colormap renderer.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreColorRampName">
            <summary>The list of predefined color ramp names.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorRampName.None">
            <summary>Color ramp name not defined.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorRampName.Elevation">
            <summary>Elevation color ramp.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorRampName.DemScreen">
            <summary>DEM (for screen display) color ramp</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorRampName.DemLight">
            <summary>DEM (light color) color ramp</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreColorType">
            <summary>The different types of colors.</summary>
            <remarks>
              Each of different supported color types. Can get the type by calling RT_ColorType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorType.RGBColor">
            <summary>RGBA color.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreColorType.Unknown">
            <summary>An empty color.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D">
            <summary>*Internal Use* A simple object for a 2D coordinate.</summary>
            <remarks>
              Simple object for a 2D coordinate. This should map to native types for performance improvements. This should not be
              exposed directly to the user.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute">
            <summary>A structure that describes a transportation network cost attribute.</summary>
            <remarks>
              You need to pass this handle to all route task cost attribute functions. It represents an instance of a route task cost
              attribute. This is an opaque handle. It must be destroyed by calling RT_CostAttribute_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCostAttribute class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCostAttribute instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.ParameterValues">
            <summary>Gets parameters.</summary>
            <remarks>
              Gets cost attribute's parameters.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute.Unit">
            <summary>Gets unit.</summary>
            <remarks>
              Returns cost attribute's unit.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob">
            <summary>Documentation not found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreCryptographyJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreCryptographyJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.#ctor(System.String)">
            <summary>*Internal Use* Creates a cryptography job handle</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_CryptographyJob_destroy on the return value.
            </remarks>
            <param name="source">A string that needs encrypted or decrypted.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.Result">
            <summary>*Internal Use* Returns the result string of the cryptography job.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreCryptographyJob.Source">
            <summary>*Internal Use* Returns the source string of the cryptography job.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach">
            <summary>The curb approach type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach.EitherSide">
            <summary>An either side curb approach.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach.LeftSide">
            <summary>A left side curb approach.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach.RightSide">
            <summary>A right side curb approach.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach.NoUturn">
            <summary>A no U-Turn curb approach.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach.Unknown">
            <summary>An unknown type, used when approach is not determined.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDateTime">
            <summary>A handle that represents a date time.</summary>
            <remarks>
              You need to pass this handle to all datetime functions. You will get this handle from various functions and the handle
              must be destroyed from RT_DateTime_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDateTime class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDateTime instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.#ctor">
            <summary>Creates a new date time object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.Add(System.Int64)">
            <summary>Increments a datetime object by the given number of milliseconds.</summary>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.FromFileTime(System.Int64)">
            <summary>Creates a new date time object with the given time value.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
            <param name="time">The time.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.FromString(System.String)">
            <summary>Creates a new date time object with the given time value.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
            <param name="time">The time.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.FromUnixMilliseconds(System.Int64)">
            <summary>Creates a new date time object with the given time value.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
            <param name="time">The time.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.GreaterThan(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Greater than relational test for date time objects.</summary>
            <param name="right">The right date time object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.GreaterThanOrEqual(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Greater than or equal to relational test for date time objects.</summary>
            <param name="right">The right date time object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Tests if two date time objects are equal.</summary>
            <param name="right">The right date time object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.LessThan(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Less than relational test for date time objects.</summary>
            <param name="right">The right date time object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.LessThanOrEqual(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Less than or equal relational test for date time objects.</summary>
            <param name="right">The right date time object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.Max">
            <summary>Creates a new date time object with the maximum value of a date time.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.Min">
            <summary>Creates a new date time object with the minimum value of a date time.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.Now">
            <summary>Creates a new date time object with the current date time.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_DateTime_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DateTime_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.Subtract(System.Int64)">
            <summary>Decrements a datetime object by the given number of milliseconds.</summary>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.ToCoreString">
            <summary>Returns a string containing the value of this date time.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.ToFileTime">
            <summary>Returns the value of this date time as a file time.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDateTime.ToUnixMilliseconds">
            <summary>Returns the value of this date time as unix milliseconds.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDestinationStatus">
            <summary>*Internal Use* The list of route tracking destination statuses.</summary>
            <remarks>
              This is used to determine status of destination.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDestinationStatus.NotReached">
            <summary>Not reached destination status.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDestinationStatus.NearDestination">
            <summary>Near destination status.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDestinationStatus.AtDestination">
            <summary>At destination status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDevice">
            <summary>*Internal Use* The graphics context for the GPU.</summary>
            <remarks>
              This is the graphics context for the GPU. You must create this and pass it to the map view. You need to pass this handle
              to all device functions. This is an opaque handle. It must be destroyed by calling RT_Device_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDevice.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDevice.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDevice.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDevice.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDevice class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDevice instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDevice.CreateOGL">
            <summary>*Internal Use* Creates a OpenGL device for drawing.</summary>
            <remarks>
              You must have a valid OpenGL context and be on the same thread as the OpenGL context to create this. When the device is
              used you must be on the same thread as the OpenGL context. This object must be destroyed by calling function
              RT_Device_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Device_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDictionary">
            <summary>Defines a dictionary object.</summary>
            <remarks>
              The RT_ElementHandle object can be reused for multiple calls while adding/inserting/updating values within the collection. So you can instantiate one RT_ElementHandle and iteratively change it's value and call add/update/insert on the collection to modify the values of the collection.
              If the overhead of creating these RT_ElementHandle does become too much for a specific value type, then consider subclassing the collection type and provide "overloaded" methods that would accept that value type directly. This would eliminate the overhead of instantiating these RT_ElementHandle objects.You need to pass this handle to all dictionary functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Dictionary_destroy.  There are a couple of performance optimizations to consider with the
              generic collection type:
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDictionary class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDictionary instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreElementType,RuntimeCoreNet.GeneratedWrappers.CoreElementType)">
            <summary>Creates a dictionary. This allocates memory that must be deleted.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Dictionary_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Dictionary_destroy on the return value.
            </remarks>
            <param name="keyType">The type of the dictionary's key.</param>
            <param name="valueType">The type of the dictionary's value.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.KeyType">
            <summary>Returns the type of the keys this dictionary holds.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Keys">
            <summary>Returns an array containing all the keys in the dictionary.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Size">
            <summary>Determines the number of values in the dictionary.</summary>
            <remarks>
              Retrieves the number of values in the dictionary. If an error occurs a 0 will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.ValueType">
            <summary>Returns the type of the values this dictionary holds.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.At(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Get a value for a specific key.</summary>
            <remarks>
              Retrieves the value for the specified key.
            </remarks>
            <param name="key">The key which you want to get the string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Contains(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Does the dictionary contain a key.</summary>
            <remarks>
              Does the dictionary contain a specific key.
            </remarks>
            <param name="key">The key you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.GetTypeForKey(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>
              *Internal Use* Returns the type that the value of a given key should be, if the dictionary instance supports it.
              Otherwise, RT_ElementType_variant will be returned.
            </summary>
            <param name="key">The key you want to now the value type for.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Insert(RuntimeCoreNet.GeneratedWrappers.CoreElement,RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Insert a value for a given key in the dictionary.</summary>
            <remarks>
              Insert a value at a specified key position to the dictionary.
            </remarks>
            <param name="key">The key position which you want to insert the string.</param>
            <param name="value">The value that is to be added.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.IsEmpty">
            <summary>Determines if there are any values in the dictionary.</summary>
            <remarks>
              Check if the dictionary object has any values in it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Returns true if the two dictionaries are equal, false otherwise.</summary>
            <param name="dictionary2">The second dictionary.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Remove(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Remove a value at a specific key position in the dictionary.</summary>
            <remarks>
              Remove a value at a specific position in the dictionary.
            </remarks>
            <param name="key">The key position which you want to remove the value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.RemoveAll">
            <summary>Remove all values from the dictionary.</summary>
            <remarks>
              Remove all values from the string dictionary.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionary.Replace(RuntimeCoreNet.GeneratedWrappers.CoreElement,RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Replace a value at a specific key position in the dictionary.</summary>
            <remarks>
              Replace a value at a specific key position in the dictionary.
            </remarks>
            <param name="key">The key position which you want to replace the value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer">
            <summary>A Dictionary Renderer object.</summary>
            <remarks>
              The SymbolDictionary is created using a given specification such as "mil2525d". Each specification depends on attribute names that define the symbology and text of each feature. For example, the mil2525d specification looks for attributes named "identity", "symbolset", "symbolentity", and "modifier1", among many others. These attributes reference different symbols in the style file that are assembled to create a unique symbol. In order to display features using the DictionaryRenderer, you must make sure the DictionaryRenderer and associated SymbolDictionary know which attributes in your data to use. This can be achieved in multiple ways:
              
              
              Pre-author your data so that the attribute names match the attributes needed by the specification. In the case of the mil2525d specification, author a feature service (or other data source) with a field named "identity", another named "symbolset", and so on. In this scenario, you create a FeatureTable from the source data, create a FeatureLayer from the FeatureTable, apply the DictionaryRenderer to the FeatureLayer, and the symbols are generated automatically and applied to the layer in the map. The same workflow applies for Graphics in a GraphicsOverlay. Ideally when creating graphics on the fly, you can give the attributes names that match the specification. When fields in the FeatureTable and attributes in Graphics have expected names, the DictionaryRenderer automatically finds them.
              Manually map your attribute names to those expected by the specification. You can map as many attribute names as necessary for the specification, but only need to map attribute names that do not match the specification (all matching attribute names will be automatically matched by the renderer). For example, an expected attribute "symbolset" might appear as the "symbol_set" field in your FeatureTable. In this scenario, you can create a ServiceFeatureTable from a feature service, create a FeatureLayer from that feature table, create a DictionaryRenderer by manually mapping the "symbol_set" name to the "symbolset" name expected by the specification, and finally apply the renderer to the FeatureLayer.
              
              
              A DictionaryRenderer can be applied to pre-authored data, such as feature services, mobile geodatabases (generated from ArcMap or a sync-enabled feature service), and feature layers in a mobile map package. You can also apply it to a GraphicsOverlay, which allow for on-the-fly graphic generation.You need to pass this handle to all dictionary renderer functions. This is an opaque handle. It must be destroyed by
              calling RT_Renderer_destroy.  The DictionaryRenderer uses attributes from source data (such as fields of features in a
              feature table or attributes of graphics in a graphics overlay) to display unique multilayer symbols based on those
              attributes. This is achieved through an associated SymbolDictionary.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDictionaryRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDictionaryRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.PrivateCreateFromHandleInternal_CoreDictionaryRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDictionaryRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDictionaryRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary)">
            <summary>Creates a new dictionary renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
            <param name="symbolDictionary">The symbol dictionary to be used with the renderer.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary,RuntimeCoreNet.GeneratedWrappers.CoreDictionary,RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Creates a new dictionary renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
            <param name="symbolDictionary">The symbol dictionary to be used with the renderer.</param>
            <param name="symbologyFieldOverrides">An RT_DictionaryHandle containing RT_ElementType_string types.</param>
            <param name="textFieldOverrides">An RT_DictionaryHandle containing RT_ElementType_string types.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.SymbolDictionary">
            <summary>Returns the symbol dictionary associated to the renderer</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.SymbologyFieldOverrides">
            <summary>Returns the map of symbology attribute and it's override required to fetch a symbol from symbol dictionary.</summary>
            <remarks>
              In the case where your source data's field names do not match what the SymbolDictionary specification expects, you must
              map your field names to the specification's, where the key is the specification name (e.g. "symbolset"), and the value
              is your field's name (e.g. "symbol_set").
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.TextFieldOverrides">
            <summary>
              Returns the map of text attribute and it's override required to fetch a symbol text and placement from symbol
              dictionary.
            </summary>
            <remarks>
              In the case where your source data's field names do not match what the SymbolDictionary specification expects, you must
              map your field names to the specification's, where the key is the specification name (e.g. "staffcomment"), and the
              value is your field's name (e.g. "staff_comment").
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.TextVisibility">
            <summary>Gets the visibility for the text on the symbol.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.TextVisibilityMaxScaleOrDistance">
            <summary>Gets the maximum scale for 2D or distance for 3D at which symbol's text will be visible.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDictionaryRenderer.TextVisibilityMinScaleOrDistance">
            <summary>Gets the minimum scale for 2D or distance for 3D at which symbol's text will be visible.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionDistanceTextUnits">
            <summary>Supported units of distance.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionDistanceTextUnits.Imperial">
            <summary>Imperial distance units.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionDistanceTextUnits.Metric">
            <summary>Metric distance units.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent">
            <summary>A class that contains description of directions event.</summary>
            <remarks>
              Changing type just to make it clear you get back a derived type. You need to pass this handle to all direction event
              functions. It must be destroyed by calling RT_DirectionEvent_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDirectionEvent class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDirectionEvent instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.EstimatedLocalArrivalTime">
            <summary>Gets estimated local arrival time.</summary>
            <remarks>
              Gets the estimated arrival time for this segment of the route. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.EventMessages">
            <summary>Gets event messages.</summary>
            <remarks>
              Gets the detailed direction info passed back from a route solving operation. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.Geometry">
            <summary>Gets event's geometry.</summary>
            <remarks>
              The geometry for the route direction. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent.ToJSON">
            <summary>Converts an object to JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver">
            <summary>A class that contains properties of directions maneuver.</summary>
            <remarks>
              Changing type just to make it clear you get back a derived type. You need to pass this handle to all direction maneuver
              functions. It must be destroyed by calling RT_DirectionManeuver_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDirectionManeuver class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDirectionManeuver instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.DirectionEvents">
            <summary>Gets direction events.</summary>
            <remarks>
              Get the directions events i.e. passing state boundaries, etc. from the solve operation. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.DirectionText">
            <summary>Gets direction text.</summary>
            <remarks>
              Gets the textual representation of the direction (e.g. Turn right on Main Street). If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.Duration">
            <summary>Gets duration in minutes.</summary>
            <remarks>
              Gets the time this segment of the route will take to traverse. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.EstimatedLocalArrivalTime">
            <summary>Gets estimated local arrive time.</summary>
            <remarks>
              Gets the estimated arrival time for this segment of the route. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.Geometry">
            <summary>Gets geometry.</summary>
            <remarks>
              The geometry for the route direction. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.Length">
            <summary>Gets length in meters.</summary>
            <remarks>
              Gets the length of this segment of the route. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.ManeuverMessages">
            <summary>Gets maneuver messages.</summary>
            <remarks>
              Gets the detailed direction info passed back from a route solving operation. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.ManeuverType">
            <summary>Gets maneuver type.</summary>
            <remarks>
              Gets the maneuver used to perform this direction (E.g. Depart, Go Straight, etc). If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <remarks>
              Creates a RoutingDirection object from a json representation.
            </remarks>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver.ToJSON">
            <summary>Converts an object to JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType">
            <summary>Type of direction maneuver.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Unknown">
            <summary>A unknown maneuver type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Stop">
            <summary>A stop maneuver.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Straight">
            <summary>A moving straight.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.BearLeft">
            <summary>A bear left.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.BearRight">
            <summary>A bear right.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnLeft">
            <summary>A turn left.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnRight">
            <summary>A turn right.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.SharpLeft">
            <summary>A sharp turn left.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.SharpRight">
            <summary>A sharp turn right.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.UTurn">
            <summary>An u-turn.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Ferry">
            <summary>A maneuver connected with a ferry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Roundabout">
            <summary>A maneuver via roundabout.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.HighwayMerge">
            <summary>A merge of several highways.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.HighwayExit">
            <summary>An exit from highway.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.HighwayChange">
            <summary>A change of highway.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.ForkCenter">
            <summary>A straight at fork.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.ForkLeft">
            <summary>A maneuver to the left at fork.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.ForkRight">
            <summary>A maneuver to the right at fork.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Depart">
            <summary>A departure.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TripItem">
            <summary>A connected with trip planning.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.EndOfFerry">
            <summary>An end of ferry transfer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.RampRight">
            <summary>A maneuver to the right on ramp.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.RampLeft">
            <summary>A maneuver to the left on ramp.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnLeftRight">
            <summary>A complex maneuver: turn left, then right.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnRightLeft">
            <summary>A complex maneuver: turn right, then left.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnRightRight">
            <summary>A complex maneuver: turn right, then right.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.TurnLeftLeft">
            <summary>A complex maneuver: turn left, then left.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.PedestrianRamp">
            <summary>A maneuver via pedestrian ramp.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Elevator">
            <summary>A maneuver using elevator.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Escalator">
            <summary>A maneuver using escalator.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.Stairs">
            <summary>A maneuver using stairs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuverType.DoorPassage">
            <summary>A passing through a door.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage">
            <summary>A directions string.</summary>
            <remarks>
              You need to pass this handle to all directions string functions. It represents an instance of a directions string. This
              is an opaque handle. It must be destroyed by calling RT_DirectionMessage_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDirectionMessage class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDirectionMessage instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.Text">
            <summary>Gets direction string text.</summary>
            <remarks>
              Returns the text for directions. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage.Type">
            <summary>Gets direction string type.</summary>
            <remarks>
              Returns the type of the direction string. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType">
            <summary>Type of direction string.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.General">
            <summary>A general direction.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Depart">
            <summary>A depart stop.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Arrive">
            <summary>An arrive at stop.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Length">
            <summary>A driving length.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Time">
            <summary>A driving time (for stops time = wait_time + service_time).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Summary">
            <summary>A summary.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.TimeWindow">
            <summary>A time window.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.ViolationTime">
            <summary>A violation to time window.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.WaitTime">
            <summary>A wait for time window.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.ServiceTime">
            <summary>A service time for stop, stop time.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.EstimatedArrivalTime">
            <summary>An estimated time arrival.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.CumulativeLength">
            <summary>An accumulated distance.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.StreetName">
            <summary>A street name.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.AlternativeName">
            <summary>An alternative street name.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Branch">
            <summary>A signpost branch.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Toward">
            <summary>A signpost toward.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.CrossStreet">
            <summary>An intersected street name.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessageType.Exit">
            <summary>A signpost exit.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDirectionsStyle">
            <summary>The network directions output type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionsStyle.Desktop">
            <summary>The driving directions generated by this style are good for desktop/printing apps.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionsStyle.Navigation">
            <summary>The driving directions generated by this style are good for navigation applications.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDirectionsStyle.Campus">
            <summary>The driving directions generated by this style are good for campus routing.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties">
            <summary>*Internal Use* Information about the map view for use in another thread.</summary>
            <remarks>
              You need to pass this handle to all display properties functions. This is an opaque handle. It must be destroyed by
              calling RT_DisplayProperties_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDisplayProperties class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDisplayProperties instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Height">
            <summary>*Internal Use* The height of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.MaxExtent">
            <summary>*Internal Use* Returns the maximum extent of the display in reference to the display's spatial reference.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.MaxResolution">
            <summary>*Internal Use* Returns the maximum resolution of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.MaxScale">
            <summary>*Internal Use* Returns the max scale of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.MinResolution">
            <summary>*Internal Use* Returns the minimum resolution of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.MinScale">
            <summary>*Internal Use* Returns the min scale of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Resolution">
            <summary>*Internal Use* Returns the current resolution of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.RotationAngle">
            <summary>*Internal Use* Returns the current rotation of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Scale">
            <summary>*Internal Use* Returns the current scale of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.SpatialReference">
            <summary>*Internal Use* The spatial reference of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.VisibleArea">
            <summary>*Internal Use* The visible area of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Width">
            <summary>*Internal Use* The width of the display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.X">
            <summary>*Internal Use* The x ordinate of the display's anchor point.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Y">
            <summary>*Internal Use* The y ordinate of the display's anchor point.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.Clone">
            <summary>*Internal Use* Creates a clone of the given object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.GetAnchor(System.Int32@,System.Int32@)">
            <summary>*Internal Use* The anchor point of the display.</summary>
            <param name="outScreenX">(out) If non-null, the x ordinate of a point, in pixels.</param>
            <param name="outScreenY">(out) If non-null, the y ordinate of a point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToMap(System.Int32,System.Int32)">
            <summary>*Internal Use* Converts a screen coordinate to a coordinate within the display's spatial reference.</summary>
            <remarks>
              Non-overloaded method: ToMap
            </remarks>
            <param name="screenX">The screen x coordinate.</param>
            <param name="screenY">The screen y coordinate.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToMap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>*Internal Use* Converts a screen rectangle (in pixels) to an envelope in the spatial reference of this object.</summary>
            <remarks>
              Non-overloaded method: ToMapEnvelope
            </remarks>
            <param name="maxX">The maximum x coordinate, in pixels.</param>
            <param name="maxY">The maximum y coordinate, in pixels.</param>
            <param name="minX">The minimum x coordinate, in pixels.</param>
            <param name="minY">The minimum y coordinate, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToResolution(System.Double)">
            <summary>*Internal Use* Converts a scale value to a resolution value.</summary>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToScale(System.Double)">
            <summary>*Internal Use* Converts a resolution value to a scale value.</summary>
            <param name="resolution">The degree of detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToScreen(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Int32@,System.Int32@)">
            <summary>*Internal Use* Converts a coordinate within the display's spatial reference to a screen coordinate.</summary>
            <remarks>
              Non-overloaded method: ToScreen
            </remarks>
            <param name="mapPoint">A point defined within the spatial reference of the display.</param>
            <param name="outScreenX">(out) If non-null, the x ordinate of a point, in pixels.</param>
            <param name="outScreenY">(out) If non-null, the y ordinate of a point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDisplayProperties.ToScreen(RuntimeCoreNet.GeneratedWrappers.CoreEnvelope,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>*Internal Use* Converts an envelope to a screen rectangle.</summary>
            <remarks>
              Non-overloaded method: ToScreenRectangle
            </remarks>
            <param name="mapEnvelope">The map envelope.</param>
            <param name="outMaxX">(out) If non-null, The maximum x coordinate, in pixels.</param>
            <param name="outMaxY">(out) If non-null, The maximum y coordinate, in pixels.</param>
            <param name="outMinX">(out) If non-null, The minimum x coordinate, in pixels.</param>
            <param name="outMinY">(out) If non-null, The minimum y coordinate, in pixels.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol">
            <summary>Defines a set of symbols and their visible distance range.</summary>
            <remarks>
              Distance composite scene symbol contain symbols with distance ranges. Based on distance from the camera the symbols are
              rendered or not. Note that the ranges for each symbol are independent and may overlap It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDistanceCompositeSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDistanceCompositeSceneSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol.PrivateCreateFromHandleInternal_CoreDistanceCompositeSceneSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDistanceCompositeSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDistanceCompositeSceneSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol.#ctor">
            <summary>Create a distance composite scene symbol object.</summary>
            <remarks>
              Use this method to create an distance composite scene symbol which is a container of Symbols with distance display
              ranges. Each symbol add to the contained range collection can specify a minimum and maximum display distance. when a
              feature is render the distance from the camera will be check against the specified minimum and maximum range to determin
              the symbols visibility. Note that symbol ranges for the contained symbols are not exclusing so may overlap. This object
              must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler RT_ErrorHandler will be
              called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDistanceCompositeSceneSymbol.RangeCollection">
            <summary>Return the symbols distance range collection.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange">
            <summary>Used contain multiple symbols with distance ranges.</summary>
            <remarks>
              Distance composite symbol displays graphics with multiple symbols that may have distance ranges. The range contains a
              minumim and maximum distance for rendering the symbol. Outside of that range the symbol is not visible. It must be
              destroyed by calling RT_DistanceSymbolRange_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDistanceSymbolRange class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDistanceSymbolRange instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.#ctor">
            <summary>Create a distance symbol range object.</summary>
            <remarks>
              Creates a Distance symbol range with just no symbol or no range properties. This object must be destroyed by calling
              function RT_DistanceSymbolRange_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DistanceSymbolRange_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Create a distance symbol range object.</summary>
            <remarks>
              Creates a Distance Range with just a symbol and no range properties. As a result the symbol will always be visible
              regardless of the distance from the camera. This object must be destroyed by calling function
              RT_DistanceSymbolRange_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_DistanceSymbolRange_destroy on the return value.
            </remarks>
            <param name="symbolHandle">A symbol to set in the distance symbol range.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSymbol,System.Double,System.Double)">
            <summary>Create a distance symbol range object.</summary>
            <remarks>
              Creates a Distance Range with a symbol and range properties. As a result the symbol will only be visible when the camera
              is within the specified distance range. Note that setting the maximum range to 0.0 indicates that there isn't a maximum
              range limit and the symbol will always be visible beyond it's mimimum range. This object must be destroyed by calling
              function RT_DistanceSymbolRange_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument Invalid argument error occurs if the either the minimum or maximum range are less
              than zero.
              Warning: You must call RT_DistanceSymbolRange_destroy on the return value.
            </remarks>
            <param name="maxDistance">The maximum distance to set in the distance symbol range. Must be &amp;gt;= 0.0, 0.0 indicates there is no maxumin range.</param>
            <param name="minDistance">The minimum distance to set in the distance symbol range. Must be &amp;gt;= 0.0.</param>
            <param name="symbolHandle">A symbol to set in the distance symbol range.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.MaxDistance">
            <summary>Get the maximum distance (in meters) of the distance symbol range.</summary>
            <remarks>
              Get the maximum distance (in meters) of the distance symbol range object.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.MinDistance">
            <summary>Get the minimum distance (in meters) of the distance symbol range.</summary>
            <remarks>
              Get the pitch (in degrees) of the scene marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange.Symbol">
            <summary>Get the symbol of the distance symbol range.</summary>
            <remarks>
              Get the symbol RT_SymbolHandle of the distance symbol range object.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDomain">
            <summary>A handle that represents the valid values for an RT_FieldHandle.</summary>
            <remarks>
              You need to pass this handle to all domain functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Domain_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDomain.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDomain.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDomain.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDomain.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDomain instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDomain.PrivateCreateFromHandleInternal_CoreDomain(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDomain instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDomain.Name">
            <summary>Gets the name of the domain.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDomain.ObjectType">
            <summary>Gets the instantiated type of the domain handle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDomainType">
            <summary>An enumeration of available drawing tools.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDomainType.Unknown">
            <summary>An unknown type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDomainType.CodedValueDomain">
            <summary>A coded value domain</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDomainType.InheritedDomain">
            <summary>An inherited domain</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDomainType.RangeDomain">
            <summary>A range domain</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo">
            <summary>A handle that provides various information on how to render features in a feature layer.</summary>
            <remarks>
              You need to pass this handle to all drawing info functions. You will get this handle from various functions and the
              handle must be destroyed from RT_DrawingInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreDrawingInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreDrawingInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.LabelingInfo">
            <summary>Gets the labeling info objects of this drawing info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.Renderer">
            <summary>Gets the renderer attached to this drawing info.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.ScaleSymbols">
            <summary>Returns true if symbols should be scaled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.ShowLabels">
            <summary>Returns true if labels should be shown.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreDrawingInfo.Transparency">
            <summary>Returns the transparency.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool">
            <summary>An enumeration of available drawing tools.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Unknown">
            <summary>An unknown type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.AutoCompletePolygon">
            <summary>Auto complete polygon</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Circle">
            <summary>Circle</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.DownArrow">
            <summary>Down arrow</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Ellipse">
            <summary>Ellipse</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.FreeHand">
            <summary>Free hand</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.LeftArrow">
            <summary>Left arrow</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Line">
            <summary>Line</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.None">
            <summary>None</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Point">
            <summary>Point</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Polygon">
            <summary>Polygon</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Rectangle">
            <summary>Rectangle</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.RightArrow">
            <summary>Right arrow</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Text">
            <summary>Text</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.Triangle">
            <summary>Triangle</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawingTool.UpArrow">
            <summary>Up arrow</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreDrawStatus">
            <summary>The current status for drawing.</summary>
            <remarks>
              Tells you what the current draw status is.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawStatus.InProgress">
            <summary>The drawing is still happening.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreDrawStatus.Completed">
            <summary>The drawing is completed.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities">
            <summary>A handle that identifies the various capabilities of an ArcGIS Feature Service Layer.</summary>
            <remarks>
              You need to pass this handle to all service layer capabilities functions. You will get this handle from various
              functions and the handle must be destroyed from RT_EditCapabilities_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEditCapabilities class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEditCapabilities instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.SupportsAdd">
            <summary>Returns true if the layer supports creation of features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.SupportsAddAttachments">
            <summary>Returns true if the layer supports adding attachments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.SupportsDelete">
            <summary>Returns true if the layer supports deletion of features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.SupportsUpdate">
            <summary>Returns true if the layer supportes updating features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditCapabilities.SupportsUpdateGeometry">
            <summary>Returns true if the layer supports editing geometry of features.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo">
            <summary>A handle that provides the field names for the edit fields.</summary>
            <remarks>
              You need to pass this handle to all edit fields info functions. You will get this handle from various functions and the
              handle must be destroyed from RT_EditFieldsInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEditFieldsInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEditFieldsInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.CreationDateField">
            <summary>Gets the name of the creation date field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.CreatorField">
            <summary>Gets the name of the creator field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.EditDateField">
            <summary>Gets the name of the edit date field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.EditorField">
            <summary>Gets the name of the editor field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditFieldsInfo.Realm">
            <summary>Gets the name of the realm field.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditOperation">
            <summary>The various types of edits.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditOperation.Unknown">
            <summary>An unknown operation. Normally the result when an error occurs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditOperation.Add">
            <summary>An add operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditOperation.Update">
            <summary>An update operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditOperation.Delete">
            <summary>A delete operation.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo">
            <summary>A handle that provides various information editor tracking.</summary>
            <remarks>
              You need to pass this handle to all editor tracking info functions. You will get this handle from various functions and
              the handle must be destroyed from RT_EditorTrackingInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEditorTrackingInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEditorTrackingInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.AllowOthersToDelete">
            <summary>Returns true if users other than the owner are allowed to delete.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.AllowOthersToUpdate">
            <summary>Returns true if users other than the owner are allowed to update.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.EditorTrackingEnabled">
            <summary>Returns true if editor tracking is enabled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditorTrackingInfo.OwnershipBasedAccessControlEnabled">
            <summary>Returns true if ownership access control is enabled.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditResult">
            <summary>A handle that represents the results of an attempt to push an update to a service.</summary>
            <remarks>
              You need to pass this handle to all edit result methods. You can get this handle from various functions and the handle
              must be destroyed from RT_EditResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEditResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEditResult instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.PrivateCreateFromHandleInternal_CoreEditResult(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEditResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEditResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.CompletedWithErrors">
            <summary>Returns true if the attempt to edit resulted in any errors.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.EditOperation">
            <summary>Returns the type of the operation applied to the row.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.Error">
            <summary>Returns the any error information about the edit.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.GlobalId">
            <summary>Returns the global id of the row that was edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.ObjectId">
            <summary>Returns the object id of the row that was edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEditResult.ObjectType">
            <summary>Returns the object type of this handle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEditResultType">
            <summary>The various types of edit results.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditResultType.Unknown">
            <summary>An unknown result type. Normally the result when an error occurs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditResultType.FeatureEditResult">
            <summary>An edit operation on a feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreEditResultType.EditResult">
            <summary>A generic edit operation result.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreElement">
            <summary>Defines an element that can be added to a container object.</summary>
            <remarks>
              You need to pass this handle to all element functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Element_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreElement class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreElement instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.#ctor">
            <summary>Creates an empty, unknown element type.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Element_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Element_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElement.ObjectType">
            <summary>Returns the type that the element is holding.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.Clear">
            <summary>Removes the value from the element and sets the type to RT_ElementType_none.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromArcGISFeatureLayerInfo(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo)">
            <summary>Creates an element object from an RT_ArcGISFeatureLayerInfoHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromArcGISSublayer(RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer)">
            <summary>Creates an element object from an arcgis sublayer handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromArray(RuntimeCoreNet.GeneratedWrappers.CoreArray)">
            <summary>Creates an element from an array value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromAttachment(RuntimeCoreNet.GeneratedWrappers.CoreAttachment)">
            <summary>Creates a element from a geodatabase attachment.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromBookmark(RuntimeCoreNet.GeneratedWrappers.CoreBookmark)">
            <summary>Creates an element object from a bookmark handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromBool(System.Boolean)">
            <summary>Creates a element from an boolean value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromBuffer(System.Byte[])">
            <summary>Creates a element from a memory buffer.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromCIMSymbol(RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol)">
            <summary>Creates an element object from a cim symbol handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromClassBreak(RuntimeCoreNet.GeneratedWrappers.CoreClassBreak)">
            <summary>Creates an element object from a class break handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromColor(RuntimeCoreNet.GeneratedWrappers.CoreColor)">
            <summary>Creates a element from a color value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromCostAttribute(RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute)">
            <summary>Creates a element from a polygon barrier.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDateTime(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Creates a element from a date time value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDictionary(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Creates an element from a dictionary value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDirectionEvent(RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent)">
            <summary>Creates a element from a direction event.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDirectionManeuver(RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver)">
            <summary>Creates a element from a direction maneuver.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDirectionMessage(RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage)">
            <summary>Creates a element from a direction string.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDistanceSymbolRange(RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromDomain(RuntimeCoreNet.GeneratedWrappers.CoreDomain)">
            <summary>Creates an element handle with the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromEditResult(RuntimeCoreNet.GeneratedWrappers.CoreEditResult)">
            <summary>Creates a element from an edit result.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromElevationSource(RuntimeCoreNet.GeneratedWrappers.CoreElevationSource)">
            <summary>Creates an element object from a elevation source handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromExportTileCacheSizeEstimate(RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate)">
            <summary>Creates an element containing the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Creates an element from a feature handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeatureEditResult(RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult)">
            <summary>Creates a element from an feature edit result.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeatureQueryResult(RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult)">
            <summary>Creates an element from a feature query result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable)">
            <summary>Creates an element from a feature table handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeatureTemplate(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate)">
            <summary>Creates an element handle with the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFeatureType(RuntimeCoreNet.GeneratedWrappers.CoreFeatureType)">
            <summary>Creates an element handle with the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromField(RuntimeCoreNet.GeneratedWrappers.CoreField)">
            <summary>Creates an element handle with the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFloat32(System.Single)">
            <summary>Creates a element from a float32 value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromFloat64(System.Double)">
            <summary>Creates a element from a float64 value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGUID(RuntimeCoreNet.GeneratedWrappers.CoreGUID)">
            <summary>Creates a element from a guid value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGenerateGeodatabaseParameters(RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters)">
            <summary>Creates an element from a RT_GenerateGeodatabaseParametersHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGenerateLayerOption(RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption)">
            <summary>Creates an element from a generate layer option handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGeocodeResult(RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult)">
            <summary>Creates an element object from a geocode result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGeodatabase(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Creates an element from a geodatabase handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGeodatabaseFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable)">
            <summary>Creates an element from a geodatabase feature table handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGeometry(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Creates a element from a geometry value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGraphic(RuntimeCoreNet.GeneratedWrappers.CoreGraphic)">
            <summary>*Internal Use* Creates an element object from a graphic handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromGraphicsOverlay(RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay)">
            <summary>*Internal Use* Creates an element object from a graphics overlay handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromIdentifyGraphicsOverlayResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult)">
            <summary>Creates an element object from an identify result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromIdentifyLayerResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult)">
            <summary>Creates an element object from an identify result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromIdentifyPopupResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult)">
            <summary>Creates an element object from an identify popup result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromImage(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>Creates a element from an image object.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromImageLayerGeoElement(RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement)">
            <summary>Creates an element object from an RT_ImageLayerGeoElementHandle</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromInt16(System.Int16)">
            <summary>Creates a element from an int16_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromInt32(System.Int32)">
            <summary>Creates a element from an int32_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromInt64(System.Int64)">
            <summary>Creates a element from an int64_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromInt8(System.SByte)">
            <summary>Creates a element from an int8_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromJobMessage(RuntimeCoreNet.GeneratedWrappers.CoreJobMessage)">
            <summary>Creates a element from a geometry value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromKMLFeature(RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature)">
            <summary>Creates an element object from a KML feature.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromKMLGeometry(RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry)">
            <summary>Creates an element object from a KML geometry.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromLabelingInfo(RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo)">
            <summary>Creates an element handle with the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromLayer(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>Creates an element object from a layer handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromLegendInfo(RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo)">
            <summary>Creates an element object from a legend info handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromLevelOfDetail(RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail)">
            <summary>Creates an element object from a level of detail handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromLocatorAttribute(RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute)">
            <summary>Creates an element object from a locator attribute handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromMap(RuntimeCoreNet.GeneratedWrappers.CoreMap)">
            <summary>Creates an element containing the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromOrderBy(RuntimeCoreNet.GeneratedWrappers.CoreOrderBy)">
            <summary>Creates an element handle from an RT_OrderByHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPointBarrier(RuntimeCoreNet.GeneratedWrappers.CorePointBarrier)">
            <summary>Creates a element from a point barrier.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPolygonBarrier(RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier)">
            <summary>Creates a element from a polygon barrier.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPolylineBarrier(RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier)">
            <summary>Creates a element from a polyline barrier.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPopup(RuntimeCoreNet.GeneratedWrappers.CorePopup)">
            <summary>Creates an element object from a popup handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPopupField(RuntimeCoreNet.GeneratedWrappers.CorePopupField)">
            <summary>Creates an element object from a popup field handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromPopupMedia(RuntimeCoreNet.GeneratedWrappers.CorePopupMedia)">
            <summary>Creates an element object from a popup media handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromRequestAttachment(RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment)">
            <summary>Creates an element object from a request attachment handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromRestrictionAttribute(RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute)">
            <summary>Creates a element from a polygon barrier.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromRoute(RuntimeCoreNet.GeneratedWrappers.CoreRoute)">
            <summary>Creates a element from a route.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromRouteParameters(RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters)">
            <summary>Creates a element from a route parameters.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromRouteResult(RuntimeCoreNet.GeneratedWrappers.CoreRouteResult)">
            <summary>Creates a element from a route result.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromStop(RuntimeCoreNet.GeneratedWrappers.CoreStop)">
            <summary>Creates a element from a stop.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromString(System.String)">
            <summary>Creates a element from a string value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromStyleSymbolSearchParameters(RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters)">
            <summary>Creates an element object from style symbol search parameters handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromStyleSymbolSearchResult(RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult)">
            <summary>Creates an element object from style symbol search results handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromSuggestResult(RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult)">
            <summary>Creates an element object from a suggest result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromSymbolDictionary(RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary)">
            <summary>Creates an element object from symbol dictionary handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromSyncGeodatabaseParameters(RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters)">
            <summary>Creates an element from a RT_SyncGeodatabaseParametersHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromSyncLayerOption(RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption)">
            <summary>Creates an element from a sync layer option handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromSyncLayerResult(RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult)">
            <summary>Creates an element from a sync layer result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromTileCache(RuntimeCoreNet.GeneratedWrappers.CoreTileCache)">
            <summary>Creates an element containing the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromTransportationNetworkDataset(RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset)">
            <summary>Creates an element from a transportation network dataset handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromTravelMode(RuntimeCoreNet.GeneratedWrappers.CoreTravelMode)">
            <summary>Creates a element from a travel mode.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromUInt16(System.UInt16)">
            <summary>Creates a element from a uint16_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromUInt32(System.UInt32)">
            <summary>Creates a element from a uint32_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromUInt64(System.UInt64)">
            <summary>Creates a element from a uint64_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromUInt8(System.Byte)">
            <summary>Creates a element from a uint8_t value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromUniqueValue(RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue)">
            <summary>Creates an element object from a unique value handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.FromVector(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates an element from a vector value.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsArcGISFeatureLayerInfo">
            <summary>Returns the handle of the element as a level of detail handle.</summary>
            <remarks>
              If the value stored in the handle is not an arcgis feature layer info, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsArcGISSublayer">
            <summary>Returns the element's value as a sublayer handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsArray">
            <summary>Gets the element value as an array.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsAttachment">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsBookmark">
            <summary>Returns the element's value as a bookmark handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsBool">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsBuffer">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsCIMSymbol">
            <summary>Returns the element's value as a cim symbol handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsClassBreak">
            <summary>Returns the element's value as a class break handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsColor">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsCostAttribute">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDateTime">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDictionary">
            <summary>Gets the element value as a dictionary.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDirectionEvent">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDirectionManeuver">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDirectionMessage">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDistanceSymbolRange">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsDomain">
            <summary>Returns the handle of the element as a domain handle.</summary>
            <remarks>
              If the value stored in the handle is not a domain type, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsEditResult">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsElevationSource">
            <summary>Returns the element's value as a elevation source handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsExportTileCacheSizeEstimate">
            <summary>Returns the handle of the element as an export tile cache size estimate handle.</summary>
            <remarks>
              If the value stored in the handle is not an export tile cache size estimate, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeature">
            <summary>Gets the value of an element as a feature handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeatureEditResult">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeatureQueryResult">
            <summary>Gets the value of an element as a feature query result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeatureTable">
            <summary>Gets the value of an element as a feature table handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeatureTemplate">
            <summary>Returns the handle of the element as a feature template handle.</summary>
            <remarks>
              If the value stored in the handle is not a feature template, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFeatureType">
            <summary>Returns the handle of the element as a feature type handle.</summary>
            <remarks>
              If the value stored in the handle is not a feature type, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsField">
            <summary>Returns the handle of the element as a field handle.</summary>
            <remarks>
              If the value stored in the handle is not a field, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFloat32">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsFloat64">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGUID">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGenerateGeodatabaseParameters">
            <summary>Gets the value of an element as a RT_GenerateGeodatabaseParametersHandle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGenerateLayerOption">
            <summary>Gets the value of an element as a generate layer option handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGeocodeResult">
            <summary>Returns the element's value as a geocode result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGeodatabase">
            <summary>Gets the value of an element as a geodatabase handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGeodatabaseFeatureTable">
            <summary>Gets the value of an element as a geodatabase feature table handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGeometry">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGraphic">
            <summary>*Internal Use* Returns the element's value as a graphic handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsGraphicsOverlay">
            <summary>*Internal Use* Returns the element's value as a graphics overlay handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsIdentifyGraphicsOverlayResult">
            <summary>Returns the element's value as an identify result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsIdentifyLayerResult">
            <summary>Returns the element's value as an identify result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsIdentifyPopupResult">
            <summary>Returns the element's value as an identify popup result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsImage">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsImageLayerGeoElement">
            <summary>Returns the element's value as an image layer geo element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsInt16">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsInt32">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsInt64">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsInt8">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsJobMessage">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsKMLFeature">
            <summary>Returns the element's value as a KML feature.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsKMLGeometry">
            <summary>Returns the element's value as a KML geometry.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsLabelingInfo">
            <summary>Returns the handle of the element as a label class handle.</summary>
            <remarks>
              If the value stored in the handle is not a label class, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsLayer">
            <summary>Returns the element's value as a layer handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsLegendInfo">
            <summary>Returns the handle of the element as a legend info handle.</summary>
            <remarks>
              If the value stored in the handle is not a legend info, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsLevelOfDetail">
            <summary>Returns the handle of the element as a level of detail handle.</summary>
            <remarks>
              If the value stored in the handle is not a level of detail, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsLocatorAttribute">
            <summary>Returns the element's value as a locator attribute handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsMap">
            <summary>Returns the element's value as a map handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsOrderBy">
            <summary>Gets the value of an element as an RT_OrderByHandle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPointBarrier">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPolygonBarrier">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPolylineBarrier">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPopup">
            <summary>Returns the element's value as a popup handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPopupField">
            <summary>Returns the element's value as a popup field handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsPopupMedia">
            <summary>Returns the element's value as a popup media handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsRequestAttachment">
            <summary>Returns the element's value as a request attachment handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsRestrictionAttribute">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsRoute">
            <summary>Gets the value of the element for route.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsRouteParameters">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsRouteResult">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsStop">
            <summary>Gets the value of the element for stop.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsString">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsStyleSymbolSearchParameters">
            <summary>Returns the element's value as a style symbol search parameter handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsStyleSymbolSearchResult">
            <summary>Returns the element's value as a style symbol search result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsSuggestResult">
            <summary>Returns the element's value as a suggest result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsSymbolDictionary">
            <summary>Returns the element's value as a symbol dictionary handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsSyncGeodatabaseParameters">
            <summary>Gets the value of an element as a RT_SyncGeodatabaseParametersHandle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsSyncLayerOption">
            <summary>Gets the value of an element as a sync layer option handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsSyncLayerResult">
            <summary>Gets the value of an element as a sync layer result handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsTileCache">
            <summary>Returns the element's value as a tile cache handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsTransportationNetworkDataset">
            <summary>Gets the value of an element as a transportation network dataset handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsTravelMode">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsUInt16">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsUInt32">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsUInt64">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsUInt8">
            <summary>Gets the value of the element.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsUniqueValue">
            <summary>Returns the element's value as a unique value handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.GetValueAsVector">
            <summary>Gets the element value as a vector.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.IsEmpty">
            <summary>Returns true if the element doesn't have a value.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Tests if two element are equal.</summary>
            <param name="element2">The second element.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromArcGISFeatureLayerInfo(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureLayerInfo)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromArcGISSublayer(RuntimeCoreNet.GeneratedWrappers.CoreArcGISSublayer)">
            <summary>Sets the value of the element from a sublayer handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromArray(RuntimeCoreNet.GeneratedWrappers.CoreArray)">
            <summary>Sets the value of this element to be an array.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromAttachment(RuntimeCoreNet.GeneratedWrappers.CoreAttachment)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromBookmark(RuntimeCoreNet.GeneratedWrappers.CoreBookmark)">
            <summary>Sets the value of the element from a bookmark handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromBool(System.Boolean)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromBuffer(System.Byte[])">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromCIMSymbol(RuntimeCoreNet.GeneratedWrappers.CoreCIMSymbol)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromClassBreak(RuntimeCoreNet.GeneratedWrappers.CoreClassBreak)">
            <summary>Sets the value of the element from a class break handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromColor(RuntimeCoreNet.GeneratedWrappers.CoreColor)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromCostAttribute(RuntimeCoreNet.GeneratedWrappers.CoreCostAttribute)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDateTime(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDictionary(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Sets the value of this element to be a dictionary</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDirectionEvent(RuntimeCoreNet.GeneratedWrappers.CoreDirectionEvent)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDirectionManeuver(RuntimeCoreNet.GeneratedWrappers.CoreDirectionManeuver)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDirectionMessage(RuntimeCoreNet.GeneratedWrappers.CoreDirectionMessage)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDistanceSymbolRange(RuntimeCoreNet.GeneratedWrappers.CoreDistanceSymbolRange)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromDomain(RuntimeCoreNet.GeneratedWrappers.CoreDomain)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromEditResult(RuntimeCoreNet.GeneratedWrappers.CoreEditResult)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromElevationSource(RuntimeCoreNet.GeneratedWrappers.CoreElevationSource)">
            <summary>Sets the value of the element from a elevation source handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromExportTileCacheSizeEstimate(RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Sets the value of an element to a feature handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeatureEditResult(RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeatureQueryResult(RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult)">
            <summary>Sets the value of an element to a feature query result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable)">
            <summary>Sets the value of an element to a feature table handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeatureTemplate(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFeatureType(RuntimeCoreNet.GeneratedWrappers.CoreFeatureType)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromField(RuntimeCoreNet.GeneratedWrappers.CoreField)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFloat32(System.Single)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromFloat64(System.Double)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGUID(RuntimeCoreNet.GeneratedWrappers.CoreGUID)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGenerateGeodatabaseParameters(RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters)">
            <summary>Sets the value of an element to a RT_GenerateGeodatabaseParametersHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGenerateLayerOption(RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption)">
            <summary>Sets the value of an element to a generate layer option handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGeocodeResult(RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult)">
            <summary>Sets the value of the element from a geocode result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGeodatabase(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Sets the value of an element to a geodatabase handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGeodatabaseFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable)">
            <summary>Sets the value of an element to a geodatabase feature table handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGeometry(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGraphic(RuntimeCoreNet.GeneratedWrappers.CoreGraphic)">
            <summary>Sets the value of the element from a graphic handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromGraphicsOverlay(RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay)">
            <summary>*Internal Use* Sets the value of the element from a graphics overlay handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromIdentifyGraphicsOverlayResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult)">
            <summary>Sets the value of the element from an identify result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromIdentifyLayerResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult)">
            <summary>Sets the value of the element from an identify result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromIdentifyPopupResult(RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult)">
            <summary>Sets the value of the element from an identify popup result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromImage(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>Sets the value of this element to be an image</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromImageLayerGeoElement(RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement)">
            <summary>Sets the value of the element from an RT_ImageLayerGeoElementHandle</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromInt16(System.Int16)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromInt32(System.Int32)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromInt64(System.Int64)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromInt8(System.SByte)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromJobMessage(RuntimeCoreNet.GeneratedWrappers.CoreJobMessage)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromKMLFeature(RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature)">
            <summary>Sets the value of the element from a KML feature.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromKMLGeometry(RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry)">
            <summary>Sets the value of the element from a KML geometry.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromLabelingInfo(RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromLayer(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>Sets the value of the element from a layer handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromLegendInfo(RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromLevelOfDetail(RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail)">
            <summary>Sets the value of the element to the given handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromLocatorAttribute(RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute)">
            <summary>Sets the value of the element from a locator attribute handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromMap(RuntimeCoreNet.GeneratedWrappers.CoreMap)">
            <summary>Sets the value of the element from a map handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromOrderBy(RuntimeCoreNet.GeneratedWrappers.CoreOrderBy)">
            <summary>Sets the value of an element to an RT_OrderByHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPointBarrier(RuntimeCoreNet.GeneratedWrappers.CorePointBarrier)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPolygonBarrier(RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPolylineBarrier(RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPopup(RuntimeCoreNet.GeneratedWrappers.CorePopup)">
            <summary>Sets the value of the element from a popup handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPopupField(RuntimeCoreNet.GeneratedWrappers.CorePopupField)">
            <summary>Sets the value of the element from a popup field handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromPopupMedia(RuntimeCoreNet.GeneratedWrappers.CorePopupMedia)">
            <summary>Sets the value of the element from a popup media handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromRequestAttachment(RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment)">
            <summary>Sets the value of the element from a request attachment handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromRestrictionAttribute(RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromRoute(RuntimeCoreNet.GeneratedWrappers.CoreRoute)">
            <summary>Sets the value of the element for route.</summary>
            <param name="value">The route's value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromRouteParameters(RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromRouteResult(RuntimeCoreNet.GeneratedWrappers.CoreRouteResult)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromStop(RuntimeCoreNet.GeneratedWrappers.CoreStop)">
            <summary>Sets the value of the element for stop.</summary>
            <param name="value">The stop's value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromString(System.String)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromStyleSymbolSearchParameters(RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters)">
            <summary>Sets the value of the element from a style symbol search parameter handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromStyleSymbolSearchResult(RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult)">
            <summary>Sets the value of the element from a style symbol search result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromSuggestResult(RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult)">
            <summary>Sets the value of the element from a suggest result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromSymbolDictionary(RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary)">
            <summary>Sets the value of the element from a symbol dictionary handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromSyncGeodatabaseParameters(RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters)">
            <summary>Sets the value of an element to a RT_SyncGeodatabaseParametersHandle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromSyncLayerOption(RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption)">
            <summary>Sets the value of an element to a sync layer option handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromSyncLayerResult(RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult)">
            <summary>Sets the value of an element to a sync layer result handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromTileCache(RuntimeCoreNet.GeneratedWrappers.CoreTileCache)">
            <summary>Sets the value of the element from a tile cache handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromTransportationNetworkDataset(RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset)">
            <summary>Sets the value of an element to a transportation network dataset handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromTravelMode(RuntimeCoreNet.GeneratedWrappers.CoreTravelMode)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromUInt16(System.UInt16)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromUInt32(System.UInt32)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromUInt64(System.UInt64)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromUInt8(System.Byte)">
            <summary>Sets the value of the element.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromUniqueValue(RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue)">
            <summary>Sets the value of the element from a unique value handle.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElement.SetValueFromVector(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Sets the value of this element to be a vector.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreElementType">
            <summary>The different types that a element can hold.</summary>
            <remarks>
              Each of the different supported element types. Can get the type by calling RT_Element_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ArcgisFeature">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ArcGISFeatureLayerInfo">
            <summary>An RT_ArcGISFeatureLayerInfoHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ArcGISFeatureServiceInfo">
            <summary>An RT_ArcGISFeatureServiceInfoHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ArcGISMapServiceInfo">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ArcGISSublayer">
            <summary>An ArcGIS sublayer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Array">
            <summary>An array.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Attachment">
            <summary>An attachment value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Basemap">
            <summary>An RT_BasemapHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Bookmark">
            <summary>A bookmark object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Bool">
            <summary>A boolean value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Buffer">
            <summary>A buffer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.CIMSymbol">
            <summary>A cim symbol object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ClassBreak">
            <summary>A class break object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Color">
            <summary>A color object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.CostAttribute">
            <summary>A network analyst cost attribute.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.DateTime">
            <summary>A date time value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Dictionary">
            <summary>Element holds a dictionary.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.DirectionEvent">
            <summary>A network analyst direction event.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.DirectionManeuver">
            <summary>A network analyst direction maneuver.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.DirectionMessage">
            <summary>A network analyst direction message.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.DistanceSymbolRange">
            <summary>An RT_DistanceSymbolRangeHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Domain">
            <summary>A domain object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.EditResult">
            <summary>The result of an edit to an attachment.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ElevationSource">
            <summary>An RT_ElevationSourceHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ExportTileCacheTask">
            <summary>An RT_ExportTileCacheTaskHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ExportTileCacheSizeEstimate">
            <summary>An RT_ExportTileCacheSizeEstimateHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Feature">
            <summary>A feature object.   An ArcGIS feature object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.FeatureEditResult">
            <summary>The result of an edit to a feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.FeatureQueryResult">
            <summary>A feature query result object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.FeatureTable">
            <summary>An RT_FeatureTableHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.FeatureTemplate">
            <summary>A feature template object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.FeatureType">
            <summary>A feature type object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Field">
            <summary>A field value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Float32">
            <summary>A 32 bit float value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Float64">
            <summary>A 64 bit float value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GenerateGeodatabaseParameters">
            <summary>An RT_GenerateGeodatabaseParametersHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GenerateLayerOption">
            <summary>Options for a layer when generating a geodatabase using the sync task.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GeocodeResult">
            <summary>A result of geocode operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Geodatabase">
            <summary>A geodatabase.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GeodatabaseFeatureTable">
            <summary>A geodatabase feature table.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GeodatabaseSyncTask">
            <summary>An RT_GeodatabaseSyncTaskHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Geometry">
            <summary>A geometry value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Graphic">
            <summary>A graphic object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.GraphicsOverlay">
            <summary>A graphics overlay object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Guid">
            <summary>A GUID value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.IdentifyGraphicsOverlayResult">
            <summary>An object containing the results of an identify on a graphics overlay.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.IdentifyLayerResult">
            <summary>An object containing the results of an identify on a layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.IdentifyPopupResult">
            <summary>An object containing the popup results of an identify on a layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Image">
            <summary>An image object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ImageLayerGeoElement">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Int16">
            <summary>A 16-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Int32">
            <summary>A 32-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Int64">
            <summary>A 64-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Int8">
            <summary>A 8-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Job">
            <summary>An RT_JobHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.JobMessage">
            <summary>A job message.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.KMLFeature">
            <summary>A KML feature object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.KMLGeometry">
            <summary>A KML geometry object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LabelingInfo">
            <summary>A label class object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Layer">
            <summary>A layer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LegendInfo">
            <summary>A legend info object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LevelOfDetail">
            <summary>A tile info level of detail (LOD).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LoadableImage">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LocatorAttribute">
            <summary>An RT_LocatorAttributeHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.LocatorTask">
            <summary>An RT_LocatorTaskHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Map">
            <summary>An RT_MapHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.MapInfo">
            <summary>A map info object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.MobileBasemapLayer">
            <summary>An RT_MobileBasemapLayerHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.MobileMapPackage">
            <summary>An RT_MobileMapPackageHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.MobileMapPackageCompatibilityHelper">
            <summary>An RT_MapPackageCompatibilityHelperHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.ModelMarkerSymbol">
            <summary>An RT_ModelMarkerSymbolHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.OrderBy">
            <summary>An order by enum value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PictureMarkerSymbol">
            <summary>An RT_PictureMarkerSymbolHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PointBarrier">
            <summary>A network analyst point barrier.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PolygonBarrier">
            <summary>A network analyst polygon barrier.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PolylineBarrier">
            <summary>A network analyst polyline barrier.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Popup">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PopupField">
            <summary>A popup field representing how a geo-element's attribute (field) should be displayed in a pop-up.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PopupMedia">
            <summary>A popup media representing the media that is displayed in a pop-up for a geo-element</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Portal">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.PortalItem">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Raster">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.RequestAttachment">
            <summary>An attachment on a request object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.RestrictionAttribute">
            <summary>A network analyst restriction attribute.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Route">
            <summary>A network analyst route.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.RouteParameters">
            <summary>A network analyst route parameters.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.RouteResult">
            <summary>A network analyst route result.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.RouteTask">
            <summary>An RT_RouteTaskHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Scene">
            <summary>An RT_SceneHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Stop">
            <summary>A network analyst stop.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.String">
            <summary>A string value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.StyleSymbolSearchParameters">
            <summary>An RT_StyleSymbolSearchParametersHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.StyleSymbolSearchResult">
            <summary>An RT_StyleSymbolSearchResultHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.SuggestResult">
            <summary>A result of suggest operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Surface">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.SymbolDictionary">
            <summary>An RT_SymbolDictionaryHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.SyncGeodatabaseParameters">
            <summary>An RT_SyncGeodatabaseParametersHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.SyncLayerOption">
            <summary>An RT_SyncLayerOptionHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.SyncLayerResult">
            <summary>An RT_SyncLayerResultHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.TileCache">
            <summary>A RT_TileCacheHandle object.   An RT_TileCacheHandle object</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.TransportationNetworkDataset">
            <summary>An RT_TransportationNetworkDatasetHandle object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.TravelMode">
            <summary>A travel mode.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Uint16">
            <summary>An unsigned 16-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Uint32">
            <summary>An unsigned 32-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Uint64">
            <summary>An unsigned 64-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Uint8">
            <summary>An unsigned 8-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.UniqueValue">
            <summary>A unique value object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Variant">
            <summary>An variant type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.Vector">
            <summary>Element holds a vector.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.VectorTileSourceInfo">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElementType.None">
            <summary>The element is currently not holding any value.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource">
            <summary>An base class for all elevation sources.</summary>
            <remarks>
              You need to pass this handle to all elevation source functions. The Elevation Source is a base class of implementations
              of elevation sources. To use and elevation you create an instance of a derived class and set it in to a Surface
              RT_SurfaceHandle in the Scene RT_SceneHandle. The combination of Elevation sources with in the Surface generate a
              rendering surface on which data can be draped or offset from. The handle must be destroyed from
              RT_ElevationSource_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreElevationSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreElevationSource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.PrivateCreateFromHandleInternal_CoreElevationSource(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreElevationSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreElevationSource instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.InstanceId">
            <summary>*Internal Use* Get the instance id of the Elevation source referenced by the specified RT_ElevationSourceHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.IsEnabled">
            <summary>Get the "is enabled" state of the elevation source.</summary>
            <remarks>
              Get the is enabled state of the elevation source object which indicates if this elevation source participates in the
              generation of the surface RT_SurfaceHandle.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.LoadStatus">
            <summary>Returns the current load status of the elevation source.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.Name">
            <summary>Get the name of the elevation source.</summary>
            <remarks>
              Returns name of elevation source. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.ObjectType">
            <summary>Get the type of the elevation source.</summary>
            <remarks>
              Get the type of the elevation source object RT_ElevationSourceType
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the elevation source is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the elevation source's load status has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback to invoke when the elevation source needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the elevation source have changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.CancelLoad">
            <summary>Cancel loading the elevation source.</summary>
            <remarks>
              Cancels any outstanding requests that the elevation source has sent. If the elevation source is in the
              RT_LoadStatus_loading state then the RT_LoadStatus and RT_ErrorHandle will be set to RT_LoadStatus_failedToLoad and
              RT_ErrorType_commonUserCancelled and RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.Load">
            <summary>Start the process of getting all the required information.</summary>
            <remarks>
              Loads the elevation source information. Load will only try loading the object if the load status is
              RT_LoadStatus_notLoaded. If the object is not in the RT_LoadStatus_notLoaded state the object will do nothing and the
              RT_Loadable_doneLoading_fn function will be called. You must implement RT_Request_requestRequired_fn if the elevation
              source requires additional information.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreElevationSource.RetryLoad">
            <summary>Retry loading the elevation source.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the elevation source is in the failed to load state. Does nothing if
              the elevation source is in any other state.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreElevationSourceType">
            <summary>The list of elevation source types.</summary>
            <remarks>
              This is used to determine the elevation source type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElevationSourceType.Unknown">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreElevationSourceType.ArcGISImageService">
            <summary>An ArcGIS Image Service elevation source.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope">
            <summary>A envelope object which is derived from a geometry object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all envelope functions. The envelope class is derived from the geometry class. It must be destroyed by calling
              RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEnvelope class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEnvelope instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.PrivateCreateFromHandleInternal_CoreEnvelope(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEnvelope class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEnvelope instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates an envelope from any two points.</summary>
            <remarks>
              The spatial reference of the points must be the same. The spatial reference of the result envelope will come from the
              points. If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting
              envelope will always have min less than or equal to max. If an error occurs the error handler RT_ErrorHandler will be
              called and NULL will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="max">The maximum values for the envelope.</param>
            <param name="min">The minimal values for the envelope.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an envelope based on the x and y values with a NULL spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max. If an error occurs the error handler RT_ErrorHandler will be called and
              NULL will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates an envelope based on the x and y values with a spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max. If an error occurs the error handler RT_ErrorHandler will be called and
              NULL will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="spatialReference">The spatial reference for the envelope.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an envelope based on the x,y and z values with a NULL spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max. If an error occurs the error handler RT_ErrorHandler will be called and
              NULL will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
            <param name="zMax">The maximum z value.</param>
            <param name="zMin">The minimal z value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates an envelope based on x, y, and z values with the spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max. If an error occurs the error handler RT_ErrorHandler will be called and
              NULL will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="spatialReference">The spatial reference for the envelope.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
            <param name="zMax">The maximum z value.</param>
            <param name="zMin">The minimal z value.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.Center">
            <summary>Retrieve the center point for the envelope.</summary>
            <remarks>
              Retrieve the center point for the envelope. Creates a new Point that must be destroyed. Will return NULL if an error
              occurs.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.Height">
            <summary>Retrieve the height for the envelope.</summary>
            <remarks>
              Retrieve the height for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.MMax">
            <summary>Retrieve the m maximum value for the envelope.</summary>
            <remarks>
              Retrieve the m maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.MMin">
            <summary>Retrieve the m minimum value for the envelope.</summary>
            <remarks>
              Retrieve the m minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.Width">
            <summary>Retrieve the width for the envelope.</summary>
            <remarks>
              Retrieve the width for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.XMax">
            <summary>Retrieve the x maximum value for the envelope.</summary>
            <remarks>
              Retrieve the x maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.XMin">
            <summary>Retrieve the x minimum value for the envelope.</summary>
            <remarks>
              Retrieve the x minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.YMax">
            <summary>Retrieve the y maximum value for the envelope.</summary>
            <remarks>
              Retrieve the y maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.YMin">
            <summary>Retrieve the y minimum value for the envelope.</summary>
            <remarks>
              Retrieve the y minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.ZMax">
            <summary>Retrieve the z maximum value for the envelope.</summary>
            <remarks>
              Retrieve the z maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.ZMin">
            <summary>Retrieve the z minimum value for the envelope.</summary>
            <remarks>
              Retrieve the z minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.CreateWithM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an envelope based on the x, y and m values with a NULL spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max.
              Non-overloaded method: CreateWithM
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="mMax">The maximum m value.</param>
            <param name="mMin">The minimal m value.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.CreateWithM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates an envelope based on the x, y and m values with a spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max.
              Non-overloaded method: CreateWithMSpatialReference
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="mMax">The maximum m value.</param>
            <param name="mMin">The minimal m value.</param>
            <param name="spatialReference">The spatial reference for the envelope.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.CreateWithM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an envelope based on the x, y, z and m values with a NULL spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max.
              Non-overloaded method: CreateWithZM
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="mMax">The maximum m value.</param>
            <param name="mMin">The minimal m value.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
            <param name="zMax">The maximum z value.</param>
            <param name="zMin">The minimal z value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.CreateWithM(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates an envelope based on the x, y, z and m values with a spatial reference.</summary>
            <remarks>
              If the values for min parameters are bigger than max parameters then they will be re-ordered. The resulting envelope
              will always have min less than or equal to max.
              Non-overloaded method: CreateWithZMSpatialReference
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="mMax">The maximum m value.</param>
            <param name="mMin">The minimal m value.</param>
            <param name="spatialReference">The spatial reference for the envelope.</param>
            <param name="xMax">The maximum x value.</param>
            <param name="xMin">The minimal x value.</param>
            <param name="yMax">The maximum y value.</param>
            <param name="yMin">The minimal y value.</param>
            <param name="zMax">The maximum z value.</param>
            <param name="zMin">The minimal z value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelope.Values(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int64@,RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags@)">
            <summary>*Internal Use* Retrieves the values of the envelope.</summary>
            <remarks>
              Retrieves the values of the envelope.
            </remarks>
            <param name="outGeometryFlags">(out) The geometry flags.</param>
            <param name="outHash">(out) The hash value.</param>
            <param name="outMMax">(out) The M max value.</param>
            <param name="outMMin">(out) The M min value.</param>
            <param name="outXMax">(out) The X max value.</param>
            <param name="outXMin">(out) The X min value.</param>
            <param name="outYMax">(out) The Y max value.</param>
            <param name="outYMin">(out) The Y min value.</param>
            <param name="outZMax">(out) The Z max value.</param>
            <param name="outZMin">(out) The Z min value.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder">
            <summary>The envelope builder object is used to create an envelope.</summary>
            <remarks>
              The envelope builder object is used to create envelopes. It represents an instance of a envelope builder. You cannot
              directly access envelope builder properties. This is an opaque handle. It must be destroyed by calling
              RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEnvelopeBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEnvelopeBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.PrivateCreateFromHandleInternal_CoreEnvelopeBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEnvelopeBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEnvelopeBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a envelope builder.</summary>
            <remarks>
              Creates a envelope builder. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="spatialReference">The builder's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>Creates a envelope builder from a envelope.</summary>
            <remarks>
              Creates a envelope builder from a envelope. This object must be destroyed by calling function
              RT_GeometryBuilder_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="envelope">The envelope.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Center">
            <summary>Retrieve the center point for the envelope builder.</summary>
            <remarks>
              Retrieve the center point for the envelope builder. Creates a new Point that must be destroyed. Will return NULL if an
              error occurs.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Height">
            <summary>Retrieve the height for the envelope builder.</summary>
            <remarks>
              Retrieve the width for the envelope builder. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.MMax">
            <summary>Retrieve the m maximum value for the envelope.</summary>
            <remarks>
              Retrieve the m maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.MMin">
            <summary>Retrieve the m minimum value for the envelope.</summary>
            <remarks>
              Retrieve the m minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Width">
            <summary>Retrieve the width for the envelope builder.</summary>
            <remarks>
              Retrieve the width for the envelope builder. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.XMax">
            <summary>Retrieve the x maximum value for the envelope.</summary>
            <remarks>
              Retrieve the x maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.XMin">
            <summary>Retrieve the x minimum value for the envelope.</summary>
            <remarks>
              Retrieve the x minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.YMax">
            <summary>Retrieve the y maximum value for the envelope.</summary>
            <remarks>
              Retrieve the y maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.YMin">
            <summary>Retrieve the y minimum value for the envelope.</summary>
            <remarks>
              Retrieve the y minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.ZMax">
            <summary>Retrieve the z maximum value for the envelope.</summary>
            <remarks>
              Retrieve the z maximum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.ZMin">
            <summary>Retrieve the z minimum value for the envelope.</summary>
            <remarks>
              Retrieve the z minimum value for the envelope. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.AdjustForWrapAround">
            <summary>*Internal Use* Adjusts the envelope to be within the bounds of it's spatial reference's extent.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.CenterAt(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Centers the envelope over the given point.</summary>
            <param name="point">The point to center on.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.ChangeAspectRatio(System.Double,System.Double)">
            <summary>Adjust the envelope's aspect ratio to match the ratio of the given width and height</summary>
            <remarks>
              Adjust the envelope's aspect ratio to match the ratio of the given width and height. The operation preserves the center
              of the envelope and will only increase either height or width, not both. If the new width would be greater than the old,
              the width will be changed and the height will remain the same. If the new width would be less than or equal to the old,
              the height will be changed and the width will remain the same.
            </remarks>
            <param name="height">A height.</param>
            <param name="width">A width.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Expand(System.Double)">
            <summary>Expands the envelope by the given scale factor.</summary>
            <remarks>
              Non-overloaded method: Expand
            </remarks>
            <param name="factor">Values less than 1 zoom in and values greater than 1 zoom out.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Expand(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double)">
            <summary>Expands the envelope at the anchor point by the given factor</summary>
            <remarks>
              Non-overloaded method: ExpandAtAnchor
            </remarks>
            <param name="anchor">The point to anchor at.</param>
            <param name="factor">Values less than 1 zoom in and values greater than 1 zoom out.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Normalize">
            <summary>*Internal Use* Adjusts the envelope's x values to be within the bounds of the assigned spatial reference.</summary>
            <remarks>
              Non-overloaded method: Normalize
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.Normalize(RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>*Internal Use* Normalizes the envelope to the passed in envelope.</summary>
            <remarks>
              Non-overloaded method: NormalizeToEnvelope
            </remarks>
            <param name="envelope">The envelope to normalize against.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.OffsetBy(System.Double,System.Double)">
            <summary>Offsets the envelope by the given offsets for the x and y dimension.</summary>
            <param name="offsetX">The number of units to move the envelope on the x axis.</param>
            <param name="offsetY">The number of units to move the envelope on the y axis.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.SetM(System.Double,System.Double)">
            <summary>Set the m values for the envelope.</summary>
            <remarks>
              Set the m values for the envelope.
            </remarks>
            <param name="mMax">The m maximum value for the envelope.</param>
            <param name="mMin">The m minimum value for the envelope.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.SetXY(System.Double,System.Double,System.Double,System.Double)">
            <summary>Set the x and y values for the envelope.</summary>
            <remarks>
              Set the x and y values for the envelope.
            </remarks>
            <param name="xMax">The x maximum value for the envelope.</param>
            <param name="xMin">The x minimum value for the envelope.</param>
            <param name="yMax">The y maximum value for the envelope.</param>
            <param name="yMin">The y minimum value for the envelope.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.SetZ(System.Double,System.Double)">
            <summary>Set the z values for the envelope.</summary>
            <remarks>
              Set the z values for the envelope.
            </remarks>
            <param name="zMax">The z maximum value for the envelope.</param>
            <param name="zMin">The z minimum value for the envelope.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.ToEnvelopeFromValues(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>*Internal Use* Creates an envelope with values and spatial reference.</summary>
            <remarks>
              Creates an envelope with values and a spatial reference. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="hasM">The m value should be used.</param>
            <param name="hasZ">The z value should be used.</param>
            <param name="mMax">The m_max value.</param>
            <param name="mMin">The m_min value.</param>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="xMax">The x_max value.</param>
            <param name="xMin">The x_min value.</param>
            <param name="yMax">The y_max value.</param>
            <param name="yMin">The y_min value.</param>
            <param name="zMax">The z_max value.</param>
            <param name="zMin">The z_min value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.UnionOf(RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>Finds the union of this envelope and the given envelope and updates the envelope builder with the result.</summary>
            <remarks>
              Non-overloaded method: UnionWithEnvelope
            </remarks>
            <param name="envelope">Another envelope to union with.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEnvelopeBuilder.UnionOf(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Finds the union of this envelope and the given point and updates the envelope builder with the result.</summary>
            <remarks>
              Non-overloaded method: UnionWithPoint
            </remarks>
            <param name="point">A point to union with.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreError">
            <summary>The error handler information which is used when an error occurs.</summary>
            <remarks>
              You need to pass this function pointer to the global error handler function or to each function call.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreError.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreError.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreError.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreError.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreError class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreError instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.AdditionalInformation">
            <summary>Returns a dictionary of additional information that this error may be providing.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.AdditionalMessage">
            <summary>Returns a string with additional information about the error.</summary>
            <remarks>
              The additional message is also a part of the dictionary returned by RT_Error_getAdditionalInformation.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.Code">
            <summary>Returns the error's code.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.Domain">
            <summary>Returns the error's domain.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.Message">
            <summary>Returns the error's message.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreError.UserDefinedFailure">
            <summary>Returns the error's user defined failure.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreErrorDomainType">
            <summary>The domain of where the error occurred.</summary>
            <remarks>
              Each of the different types of domain the error can come from. Can get the type by calling RT_Error_getDomain.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorDomainType.Unknown">
            <summary>An unknow domain was encountered.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorDomainType.ArcgisRuntime">
            <summary>The error originated from within the runtime SDK.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorDomainType.ArcgisServer">
            <summary>The error originated from an ArcGIS server.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreErrorType">
            <summary>The list of possible generic errors.</summary>
            <remarks>
              This is used in the RT_Error_fn error handler function.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.Unknown">
            <summary>This is the catch all for unknown errors.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.Success">
            <summary>This is a success and not an error.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNullPtr">
            <summary>Null pointer exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNullValue">
            <summary>Null value exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonInvalidArgument">
            <summary>Invalid argument exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNotImplemented">
            <summary>Not implemented exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonOutOfRange">
            <summary>Out of range exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonInvalidAccess">
            <summary>Invalid access exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonIllegalState">
            <summary>Illegal state exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNotFound">
            <summary>Not found exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonExists">
            <summary>Exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonTimeout">
            <summary>Timeout exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonRegularExpression">
            <summary>Regular expression exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonPropertyNotSupported">
            <summary>Property not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNoPermission">
            <summary>No permission exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonFile">
            <summary>File exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonFileNotFound">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonInvalidCall">
            <summary>Invalid call exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonIO">
            <summary>IO exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonUserCancelled">
            <summary>User cancelled exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonInternalError">
            <summary>Internal error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonConversionFailed">
            <summary>Conversion failed exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonUnlicensedFeature">
            <summary>Unlicensed feature exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonLicenseLevelFixed">
            <summary>License level fixed.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonNoData">
            <summary>No data.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonInvalidJSON">
            <summary>Attempted to use invalid JSON.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.CommonUserDefinedFailure">
            <summary>User defined error</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteError">
            <summary>SQLite error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteInternal">
            <summary>SQLite Internal exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqlitePerm">
            <summary>SQLite Perm exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteAbort">
            <summary>SQLite Abort exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteBusy">
            <summary>SQLite Busy exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteLocked">
            <summary>SQLite Locked exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteNoMem">
            <summary>SQLite NoMem exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteReadonly">
            <summary>SQLite Read only exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteInterrupt">
            <summary>SQLite Interrupt exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteIOErr">
            <summary>SQLite IO Error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteCorrupt">
            <summary>SQLite Corrupt exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteNotFound">
            <summary>SQLite Not found exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteFull">
            <summary>SQLite Full exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteCantOpen">
            <summary>SQLite Can't open exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteProtocol">
            <summary>SQLite Protocol exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteEmpty">
            <summary>SQLite Empty exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteSchema">
            <summary>SQLite Schema exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteTooBig">
            <summary>SQLite Too big exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteConstraint">
            <summary>SQLite Constraint exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteMismatch">
            <summary>SQLite Mismatch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteMisuse">
            <summary>SQLite Misuse exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteNolfs">
            <summary>SQLite Nolfs exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteAuth">
            <summary>SQLite Auth exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteFormat">
            <summary>SQLite Format exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteRange">
            <summary>SQLite Range exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteNotadb">
            <summary>SQLite Notadb exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteNotice">
            <summary>SQLite Notice exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteWarning">
            <summary>SQLite Warning exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteRow">
            <summary>SQLite Row exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.SqliteDone">
            <summary>SQLite Done exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryCorruptedGeometry">
            <summary>Geometry Corrupted geometry exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryEmptyGeometry">
            <summary>Geometry Empty geometry exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryMathSingularity">
            <summary>Geometry Math singularity exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryBufferIsTooSmall">
            <summary>Geometry Buffer is too small exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryInvalidShapeType">
            <summary>Geometry Invalid shape type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryProjectionOutOfSupportedRange">
            <summary>Geometry Projection out of supported range exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryNonSimpleGeometry">
            <summary>Geometry Non simple geometry exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryCannotCalculateGeodesic">
            <summary>Geometry Cannot calculate geodesic exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeometryNotationConversion">
            <summary>Geometry Notation conversion exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbValueOutOfRange">
            <summary>Geodatabase Value out of range exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDataTypeMismatch">
            <summary>Geodatabase Data type mismatch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbBadXml">
            <summary>Geodatabase Bad xml exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDatabaseAlreadyExists">
            <summary>Geodatabase Database already exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDatabaseDoesNotExist">
            <summary>Geodatabase Database does not exist exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbNameLongerThan128Characters">
            <summary>Geodatabase Name longer than 128 characters exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInvalidShapeType">
            <summary>Geodatabase Invalid shape type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbRasterNotSupported">
            <summary>Geodatabase Raster not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbRelationshipClassOneToOne">
            <summary>Geodatabase Relationship class one to one exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbItemNotFound">
            <summary>Geodatabase Item not found exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDuplicateCode">
            <summary>Geodatabase Duplicate code exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbMissingCode">
            <summary>Geodatabase Missing code exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbWrongItemType">
            <summary>Geodatabase Wrong item type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbIdFieldNotNullable">
            <summary>Geodatabase Id field not nullable exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDefaultValueNotSupported">
            <summary>Geodatabase Default value not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTableNotEditable">
            <summary>Geodatabase Table not editable exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbFieldNotFound">
            <summary>Geodatabase Field not found exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbFieldExists">
            <summary>Geodatabase Field exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterFieldType">
            <summary>Geodatabase Cannot alter field type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterFieldWidth">
            <summary>Geodatabase Cannot alter field width exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterFieldToNullable">
            <summary>Geodatabase Cannot alter field to nullable exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterFieldToEditable">
            <summary>Geodatabase Cannot alter field to editable exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterFieldToDeletable">
            <summary>Geodatabase Cannot alter field to deletable exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotAlterGeometryProperties">
            <summary>Geodatabase Cannot alter geometry properties exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbUnnamedTable">
            <summary>Geodatabase Unnamed table exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInvalidTypeForDomain">
            <summary>Geodatabase Invalid type for domain exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbMinMaxReversed">
            <summary>Geodatabase Min max reversed exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbFieldNotSupportedOnRelationshipClass">
            <summary>Geodatabase Field not supported on relationship class exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbRelationshipClassKey">
            <summary>Geodatabase Relationship class key exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbValueIsNull">
            <summary>Geodatabase Value is null exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbMultipleSqlStatements">
            <summary>Geodatabase Multiple sql statements exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbNoSqlStatements">
            <summary>Geodatabase No sql statements exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbGeometryFieldMissing">
            <summary>Geodatabase Geometry field missing exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransactionStarted">
            <summary>Geodatabase Transaction started exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransactionNotStarted">
            <summary>Geodatabase Transaction not started exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbShapeRequiresZ">
            <summary>Geodatabase Shape requires z exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbShapeRequiresM">
            <summary>Geodatabase shape requires m exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbShapeNoZ">
            <summary>Geodatabase Shape no z exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbShapeNoM">
            <summary>Geodatabase Shape no m exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbShapeWrongType">
            <summary>Geodatabase Shape wrong type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotUpdateFieldType">
            <summary>Geodatabase Cannot update field type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbNoRowsAffected">
            <summary>Geodatabase No rows affected exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbSubtypeInvalid">
            <summary>Geodatabase Subtype invalid exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbSubtypeMustBeInteger">
            <summary>Geodatabase Subtype must be integer exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbSubtypesNotEnabled">
            <summary>Geodatabase Subtypes not enabled exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbSubtypeExists">
            <summary>Geodatabase Subtype exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDuplicateFieldNotAllowed">
            <summary>Geodatabase Duplicate field not allowed exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotDeleteField">
            <summary>Geodatabase Cannot delete field exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbIndexExists">
            <summary>Geodatabase Index exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbIndexNotFound">
            <summary>Geodatabase Index not found exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCursorNotOnRow">
            <summary>Geodatabase Cursor not on row exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInternalError">
            <summary>Geodatabase Internal error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotWriteGeodatabaseManagedFields">
            <summary>Geodatabase Cannot write geodatabase managed fields exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbItemAlreadyExists">
            <summary>Geodatabase Item already exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInvalidSpatialIndexName">
            <summary>Geodatabase Invalid spatial index name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbRequiresSpatialIndex">
            <summary>Geodatabase Requires spatial index exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbReservedName">
            <summary>Geodatabase Reserved name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotUpdateSchemaIfChangeTracking">
            <summary>Geodatabase Cannot update schema if change tracking exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInvalidDate">
            <summary>Geodatabase Invalid date exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbDatabaseDoesNotHaveChanges">
            <summary>Geodatabase Database does not have changes exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbReplicaDoesNotExist">
            <summary>Geodatabase Replica does not exists exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbStorageTypeNotSupported">
            <summary>Geodatabase Storage type not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbReplicaModelError">
            <summary>Geodatabase Replica model error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbReplicaClientGenError">
            <summary>Geodatabase Replica client gen error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbReplicaNoUploadToAcknowledge">
            <summary>Geodatabase Replica no upload to acknowledge exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbLastWriteTimeInTheFuture">
            <summary>Geodatabase Last write time in the future exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbInvalidArgument">
            <summary>Geodatabase Invalid argument exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransportationNetworkCorrupt">
            <summary>Geodatabase Transportation network corrupt exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransportationNetworkFileIO">
            <summary>Geodatabase Transportation network file io exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbFeatureHasPendingEdits">
            <summary>Geodatabase Feature has pending edits exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbChangeTrackingNotEnabled">
            <summary>Geodatabase Change tracking not enabled exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransportationNetworkFileOpen">
            <summary>Geodatabase Transportation network file open exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbTransportationNetworkUnsupported">
            <summary>Geodatabase Transportation network unsupported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbCannotSyncCopy">
            <summary>Geodatabase Cannot sync copy exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbAccessControlDenied">
            <summary>Geodatabase Access control denied exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbGeometryOutsideReplicaExtent">
            <summary>Geodatabase Geometry outside replica extent exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GdbUploadAlreadyInProgress">
            <summary>Geodatabase Upload already in progress exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeUnsupportedFileFormat">
            <summary>Geocode Unsupported file format exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeUnsupportedSpatialReference">
            <summary>Geocode Unsupported spatial reference exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeUnsupportedProjectionTransformation">
            <summary>Geocode Unsupported projection transformation exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeGeocoderCreation">
            <summary>Geocode Geocoder creation exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeIntersectionsNotSupported">
            <summary>Geocode Intersections not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeUninitializedGeocodeTask">
            <summary>Geocode Uninitialized geocode task exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeInvalidLocatorProperties">
            <summary>Geocode Invalid locator properties exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeRequiredFieldMissing">
            <summary>Geocode Required field missing exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeCannotReadAddress">
            <summary>Geocode Cannot read address exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.GeocodeReverseGeocodingNotSupported">
            <summary>Geocode Geocoding not supported exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidRouteSettings">
            <summary>Network Analyst Invalid route settings exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaNoSolution">
            <summary>Network Analyst No solution exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaTaskCancelled">
            <summary>Network Analyst Task cancelled exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidNetwork">
            <summary>Network Analyst Invalid network exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaDirectionsError">
            <summary>Network Analyst Directions error exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInsufficientNumberOfStops">
            <summary>Network Analyst Insufficient number of stops exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopUnlocated">
            <summary>Network Analyst Stop unlocated exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopLocatedOnNonTraversableElement">
            <summary>Network Analyst Stop located on non traversable element exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPointBarrierInvalidAddedCostAttributeName">
            <summary>Network Analyst Point barrier invalid added cost attribute name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaLineBarrierInvalidScaledCostAttributeName">
            <summary>Network Analyst Line barrier invalid scaled cost attribute name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPolygonBarrierInvalidScaledCostAttributeName">
            <summary>Network Analyst Polygon barrier invalid scaled cost attribute name</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPolygonBarrierInvalidScaledCostAttributeValue">
            <summary>Network Analyst Polygon barrier invalid scaled cost attribute value</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPolylineBarrierInvalidScaledCostAttributeValue">
            <summary>Network Analyst Polyline barrier invalid scaled cost attribute value</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidImpedanceAttribute">
            <summary>Network Analyst Invalid impedance attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidRestrictionAttribute">
            <summary>Network Analyst Invalid restriction attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidAccumulateAttribute">
            <summary>Network Analyst Invalid accumulate attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidDirectionsTimeAttribute">
            <summary>Network Analyst Invalid directions time attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidDirectionsDistanceAttribute">
            <summary>Network Analyst Invalid directions distance attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidAttributeParametersAttributeName">
            <summary>Network Analyst Invalid attribute parameters attribute name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidAttributeParametersParameterName">
            <summary>Network Analyst Invalid attributes parameters parameter name exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidAttributeParametersValueType">
            <summary>Network Analyst Invalid attributes parameters value type exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidAttributeParametersRestrictionUsageValue">
            <summary>Network Analyst Invalid attribute parameters restriction usage value exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaNetworkHasNoHierarchyAttribute">
            <summary>Network Analyst Network has no hierarchy attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaNoPathFoundBetweenStops">
            <summary>Network Analyst No path found between stops exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaUndefinedInputSpatialReference">
            <summary>Network Analyst Undefined input spatial reference exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaUndefinedOutputSpatialReference">
            <summary>Network Analyst Undefined output spatial reference exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidDirectionsStyle">
            <summary>Network Analyst Invalid directions style exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidDirectionsLanguage">
            <summary>Network Analyst Invalid directions language exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaDirectionsTimeAndImpedanceAttributeMismatch">
            <summary>Network Analyst Directions time and impedance attribute mismatch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaInvalidDirectionsRoadClassAttribute">
            <summary>Network Analyst Invalid directions road class attribute exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaRouteLocalStartTimeBeforeUnixEpoch">
            <summary>Network Analyst Route local start time before unix epoch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaRouteUTCStartTimeAtStopBeforeUnixEpoch">
            <summary>Network Analyst Route UTC start time at stop before unix epoch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopLocalTimeWindowStartsBeforeUnixEpoch">
            <summary>Network Analyst Stop local time window starts before unix epoch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopUTCTimeWindowStartsBeforeUnixEpoch">
            <summary>Network Analyst Stop UTC time window starts before unix epoch exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopTimeWindowIsInverted">
            <summary>Network Analyst Stop time window is inverted exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaWalkingModeRouteTooLarge">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaStopHasNullGeometry">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPointBarrierHasNullGeometry">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPolylineBarrierHasNullGeometry">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaPolygonBarrierHasNullGeometry">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.NaUnsupportedSearchWhereClause">
            <summary>Online route task does not support search_where_clause condition exception</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingMissingSpatialReference">
            <summary>The spatial reference is missing</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingMissingInitialViewpoint">
            <summary>The initial viewpoint is missing</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingInvalidResponse">
            <summary>Expected a different response to the request</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingMissingBingMapKey">
            <summary>The Bing map key is missing</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingUnsupportedLayerType">
            <summary>The layer type is not supported</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingSyncNotEnabled">
            <summary>Cannot sync because it is not enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingTileExportNotEnabled">
            <summary>Cannot export tiles because it is not enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.MappingMissingItemProperty">
            <summary>Required item property is missing.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdIosBaseFailure">
            <summary>std::ios_base::failure exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadArrayNewLength">
            <summary>std::bad_array_new_length exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdUnderflowError">
            <summary>std::underflow_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdSystemError">
            <summary>std::system_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdRangeError">
            <summary>std::range_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdOverflowError">
            <summary>std::overflow_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdOutOfRange">
            <summary>std::out_of_range exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdLengthError">
            <summary>std::length_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdInvalidArgument">
            <summary>std::invalid_argument exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdFutureError">
            <summary>std::future_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdDomainError">
            <summary>std::domain_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdRuntimeError">
            <summary>std::runtime_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdLogicError">
            <summary>std::logic_error exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadWeakPtr">
            <summary>std::bad_weak_ptr exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadTypeId">
            <summary>std::bad_typeid exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadFunctionCall">
            <summary>std::bad_function_call exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadException">
            <summary>std::bad_exception exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadCast">
            <summary>std::bad_cast exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdBadAlloc">
            <summary>std::bad_alloc exception.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreErrorType.StdException">
            <summary>std::exception exception.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreEstimateTileCacheSizeJob">
            <summary>A RT_JobHandle that estimates the size of a tile cache from a service.</summary>
            <remarks>
              The handle must be destroyed with RT_Job_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEstimateTileCacheSizeJob.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEstimateTileCacheSizeJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEstimateTileCacheSizeJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEstimateTileCacheSizeJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreEstimateTileCacheSizeJob.PrivateCreateFromHandleInternal_CoreEstimateTileCacheSizeJob(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreEstimateTileCacheSizeJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreEstimateTileCacheSizeJob instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreEstimateTileCacheSizeJob.Result">
            <summary>For a successfully completed job the result returns an estimate of the tile cache size. Otherwise NULL is returned.</summary>
            <remarks>
              If the job is in progress then a NULL result is returned until the job successfully completes.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheJob">
            <summary>A RT_JobHandle that exports a tile cache from a service.</summary>
            <remarks>
              The handle must be destroyed with RT_Job_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheJob.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreExportTileCacheJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreExportTileCacheJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheJob.PrivateCreateFromHandleInternal_CoreExportTileCacheJob(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreExportTileCacheJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreExportTileCacheJob instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheJob.Result">
            <summary>For a successfully completed job the result returns a tile cache. Otherwise NULL is returned.</summary>
            <remarks>
              If the job is in progress then a NULL result is returned until the job successfully completes. The returned tile cache
              is in an unloaded state, use RT_TileCache_load to load it.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters">
            <summary>a handle to an export tile cache parameters object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreExportTileCacheParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreExportTileCacheParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.#ctor">
            <summary>Creates a new export tile cache parameters instance.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.LevelIDs">
            <summary>Get level IDs.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.AreaOfInterest">
            <summary>Get area of interest geometry.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters.CompressionQuality">
            <summary>Get compression quality.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate">
            <summary>A handle to a tile cache size estimate object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreExportTileCacheSizeEstimate class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreExportTileCacheSizeEstimate instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.FileSize">
            <summary>Get the value of the fileSize property</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheSizeEstimate.TileCount">
            <summary>Get the value of the tileCount property</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask">
            <summary>
              a handle to an export tile cache task. Use this in conjunction with a map/image service to generate and download tile
              packages.
            </summary>
            <remarks>
              You need to pass this handle to all export tile cache task functions. Each handle must be destroyed by passing it to
              RT_GeodatabaseSyncTask_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreExportTileCacheTask class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreExportTileCacheTask instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreArcGISMapServiceInfo)">
            <summary>Create an export tile cache task from an RT_ArcGISMapServiceInfoHandle</summary>
            <remarks>
              The map service must support tile cache export.
            </remarks>
            <param name="mapServiceInfo">The RT_ArcGISMapServiceInfoHandle of an ArcGIS REST service that supports tile cache export.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.#ctor(System.String)">
            <summary>Create an export tile cache task from a URL</summary>
            <remarks>
              The map service must support tile cache export.
            </remarks>
            <param name="url">The URL of an ArcGIS REST service that supports tile cache export.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.URL">
            <summary>Get the task's service URL.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.MapServiceInfo">
            <summary>Get the task's RT_ArcGISMapServiceInfoHandle</summary>
            <remarks>
              If created with a URL, this property will be populated after the task has been loaded. Before then, NULL will be
              returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.CreateExportTileCacheParameters(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,System.Double)">
            <summary>Creates and returns new export tile cache parameters instance.</summary>
            <remarks>
              A value of 0 specified for either scale parameter will include all level IDs down to the min/max level ID scale. For
              example: a minScale of 10000 and a maxScale of 500 will select level IDs between 1:500 and 1:10,000 scale. a minScale of
              0 and a maxScale of 500 will select level IDs below 1:500 scale. a minScale of 10000 and a maxScale of 0 will select
              level IDs above 1:10,000 scale.
            </remarks>
            <param name="areaOfInterest">a RT_GeometryHandle specifying the area to be exported.</param>
            <param name="maxScale">the map scale '1:maxScale' below which level IDs should be exported</param>
            <param name="minScale">the map scale '1:minScale' above which level IDs should be exported</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.EstimateTileCacheSizeWithParametersAsync(RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters)">
            <summary>Return a new estimate tile cache size job.</summary>
            <param name="parameters">Export tile cache parameters to be used in estimating.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheTask.ExportTileCacheWithParametersAsync(RuntimeCoreNet.GeneratedWrappers.CoreExportTileCacheParameters,System.String)">
            <summary>Return a new export tile cache job.</summary>
            <param name="downloadFilePath">Downloaded tile cache file path.</param>
            <param name="parameters">Export tile cache parameters to be used in exporting.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode">
            <summary>The options for handling extrusion values.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode.None">
            <summary>Set there to be no extrusion.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode.Minimum">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode.Maximum">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode.AbsoluteHeight">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode.BaseHeight">
            <summary>TODO: add description of different ExtrusionMode values</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeature">
            <summary>A handle that represents a feature.</summary>
            <remarks>
              You need to pass this handle to all feature methods. You can get this handle from various functions and the handle must
              be destroyed from RT_Feature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeature.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeature.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeature.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeature.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeature instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeature.PrivateCreateFromHandleInternal_CoreFeature(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeature instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeature.Attributes">
            <summary>Gets all attributes of the feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeature.FeatureTable">
            <summary>Gets the feature table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeature.Geometry">
            <summary>Gets the geometry of a feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeature.InstanceId">
            <summary>*Internal Use* Get the instance id of the Feature referenced by the specified RT_FeatureHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeature.ObjectType">
            <summary>Returns the object type of this handle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult">
            <summary>A handle that represents the results of an attempt to push an feature update to a feature service.</summary>
            <remarks>
              You need to pass this handle to all feature edit result methods. You can get this handle from various functions and the
              handle must be destroyed from RT_EditResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureEditResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureEditResult instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult.PrivateCreateFromHandleInternal_CoreFeatureEditResult(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureEditResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureEditResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureEditResult.AttachmentResults">
            <summary>Returns a list of edit results for any attachment changes.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer">
            <summary>
              An instance of this class represents a layer that can visualize vector/feature data. It must be destroyed by calling
              RT_Layer_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.PrivateCreateFromHandleInternal_CoreFeatureLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.#ctor">
            <summary>Creates a new feature layer handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable)">
            <summary>Creates a new feature layer handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="featureTable">The feature table used as the source of the feature layer.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem,System.Int64)">
            <summary>Creates a new feature layer handle from a feature service portal item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Layer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="item">A feature service RT_PortalItemHandle.</param>
            <param name="layerId">The layer id we have to create the layer for.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.DefinitionExpression">
            <summary>Returns the expression used for filtering features displayed in this layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.FeatureTable">
            <summary>Returns the feature table associated with this layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.IsPopupEnabled">
            <summary>Gets a flag indicating whether the RT_PopupDefinitionHandle defined on the RT_FeatureLayerHandle is enable / disable.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.LabelsEnabled">
            <summary>Returns true if labels should be displayed</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.PopupDefinition">
            <summary>Gets the pop-up definition for the feature layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.Renderer">
            <summary>Returns the renderer used for rendering features on this layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SelectionColor">
            <summary>Returns the color that is applied to a selected feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SelectionWidth">
            <summary>Returns the width of the selection highlight.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.ClearSelection">
            <summary>Clears all selected features.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.GetSelectedFeatures">
            <summary>Returns a list of the currently selected features.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.ResetFeaturesVisible">
            <summary>Resets the layer's features visibility back to factory defaults.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.ResetRenderer">
            <summary>Resets the renderer to the factory default.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SelectFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Selects the given feature and adds it to the current list of selected features.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SelectFeatures(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Selects the features in the list and adds them to the current list of selected features.</summary>
            <remarks>
              Non-overloaded method: SelectFeatures
            </remarks>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SelectFeatures(RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters,RuntimeCoreNet.GeneratedWrappers.CoreSelectionMode)">
            <summary>
              Selects the features that match the criteria in the RT_QueryParametersHandle object and adds them to the current list of
              selected features.
            </summary>
            <remarks>
              Non-overloaded method: SelectFeaturesWithQuery
            </remarks>
            <param name="mode">Defines how the list of currently selected features will be updated with the features returned from the query.</param>
            <param name="parameters">The definition of the query to submit to the feature table.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SetFeatureVisible(RuntimeCoreNet.GeneratedWrappers.CoreFeature,System.Boolean)">
            <summary>Sets the visibility of the given feature.</summary>
            <param name="feature">The feature.</param>
            <param name="visible">true to show, false to hide.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.SetFeaturesVisible(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean)">
            <summary>Sets the visibility of the given features.</summary>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
            <param name="visible">true to show, false to hide.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.UnselectFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Unselects the given feature and removes it from the current list of selected features.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureLayer.UnselectFeatures(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Unselects the features in the given list and removes them from the current list of selected features.</summary>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureObjectType">
            <summary>The different types of available features.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureObjectType.Unknown">
            <summary>An unknown feature table type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureObjectType.ArcGISFeature">
            <summary>An ArcGIS Service feature.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult">
            <summary>A handle that represents the results of a feature query.</summary>
            <remarks>
              You need to pass this handle to all feature result query methods. You can get this handle from various functions and the
              handle must be destroyed from RT_FeatureQueryResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureQueryResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureQueryResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.ExceededTransferLimit">
            <summary>Returns true if the query resulted in a larger number of features than what the transfer limit supports.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureQueryResult.Iterator">
            <summary>Returns the next feature in the result set or NULL if no features are left.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode">
            <summary>The different types of available feature tables.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode.Unknown">
            <summary>An unknown request mode. Normally the result when an error occurs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode.Undefined">
            <summary>Indicates the feature table has not been loaded and the mode has yet to be set.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode.OnInteractionCache">
            <summary>
              The features are requested and populated into the table as and when they are needed based on the user or developer
              interacting with the layer (map pan, zoom) and the features will be cached.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode.OnInteractionNoCache">
            <summary>
              The features are explicitly requested for the layer work in this mode. It is suitable for always working against the
              latest data and will therefore have a high network bandwith. Queries always go to the server for all interactions (pans,
              zooms, selects or queries).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureRequestMode.ManualCache">
            <summary>
              Data is requested when the user explicity calls populateFromService. All queries performed on the table will be done
              locally.
            </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities">
            <summary>A handle that identifies the various capabilities of an ArcGIS Feature Service.</summary>
            <remarks>
              You need to pass this handle to all service capabilities functions. You will get this handle from various functions and
              the handle must be destroyed from RT_FeatureServiceCapabilities_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureServiceCapabilities class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureServiceCapabilities instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsCreate">
            <summary>Returns true if the service supports creation of features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsDelete">
            <summary>Returns true if the service supports deletion of features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsEditing">
            <summary>Returns true if the service accepts uploads.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsQuery">
            <summary>Returns true if the service supports querying of features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsSync">
            <summary>Returns true if the service supports synchronization.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureServiceCapabilities.SupportsUpdate">
            <summary>Returns true if the service supports updating features.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable">
            <summary>A handle that represents a feature table.</summary>
            <remarks>
              You need to pass this handle to all feature table functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureTable_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureTable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.PrivateCreateFromHandleInternal_CoreFeatureTable(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureTable instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.Extent">
            <summary>Returns the extent of the table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.FeatureLayer">
            <summary>Returns the feature layer that this table is attached to.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.Fields">
            <summary>Returns the fields of the feature table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.GeometryType">
            <summary>Returns the geometry type stored in this table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.HasGeometry">
            <summary>Returns true if this table has geometry data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.InstanceId">
            <summary>*Internal Use* Get the instance id of the FeatureTable referenced by the specified RT_FeatureTableHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.IsEditable">
            <summary>Returns true if this table is editable.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.NumberOfFeatures">
            <summary>Returns the number of features in this table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.ObjectType">
            <summary>Returns the object type of this handle.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.SpatialReference">
            <summary>Returns the spatial reference of the table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.TableName">
            <summary>Returns the table's name.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the table is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the table has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the table needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.AddFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Adds a new feature to the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.AddFeatures(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Adds a list of features to the table.</summary>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CanAdd(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Determines if a feature can be added to the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CanDelete(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Determines if a feature can be deleted from the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CanUpdate(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Determines if a feature can be updated in the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CreateFeature">
            <summary>Creates a new feature.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.CreateFeatureWithAttributes(RuntimeCoreNet.GeneratedWrappers.CoreDictionary,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Creates a new feature.</summary>
            <param name="attributes">The attributes.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.DeleteFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Deletes a feature from the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.DeleteFeatures(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Deletes a list of features from the table.</summary>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.GetField(System.String)">
            <summary>Retrieves the field with the given name.</summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.Load">
            <summary>Loads the feature table.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.QueryFeatures(RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters)">
            <summary>Submits a query against the table.</summary>
            <param name="parameters">Options for controlling the operation.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.RetryLoad">
            <summary>Retry loading the feature table.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.UpdateFeature(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Updates a feature in the table.</summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTable.UpdateFeatures(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Updates a list of features in the table.</summary>
            <param name="features">A RT_VectorHandle of RT_ElementType_feature. Contents of the vector are copied.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTableType">
            <summary>The different types of available feature tables.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTableType.Unknown">
            <summary>An unknown feature table type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTableType.FeatureTable">
            <summary>A Feature Table.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTableType.ServiceFeatureTable">
            <summary>An ArcGIS Service Feature Table.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTableType.GeodatabaseFeatureTable">
            <summary>An ArcGIS Geodatabase Feature Table.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate">
            <summary>A handle that provides a template for creating a new feature.</summary>
            <remarks>
              You need to pass this handle to all feature template functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureTemplate_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureTemplate class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureTemplate instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.Description">
            <summary>Gets the description of the feature template.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.DrawingTool">
            <summary>Gets the feature template's drawing tool type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.Name">
            <summary>Gets the name of the feature template.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureTemplate.PrototypeAttributes">
            <summary>Gets the prototype for creating a feature.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType">
            <summary>A handle that defines a feature type.</summary>
            <remarks>
              You need to pass this handle to all feature type functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureType_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFeatureType class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFeatureType instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.Domains">
            <summary>Gets the domains associated with this feature type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.Id">
            <summary>Gets the id of the feature type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.Name">
            <summary>Gets the name of the feature type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFeatureType.Templates">
            <summary>Gets the feature templates associated with this feature type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreField">
            <summary>A handle that defines a field.</summary>
            <remarks>
              You need to pass this handle to all feature type functions. You will get this handle from various functions and the
              handle must be destroyed from RT_Field_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreField class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreField instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Alias">
            <summary>Gets the field's alias.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Domain">
            <summary>Gets the field's domain.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Editable">
            <summary>Returns true if the field is editable.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.FieldType">
            <summary>Gets the field's data type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Length">
            <summary>Gets the length of the field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Name">
            <summary>Gets the field's name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreField.Nullable">
            <summary>Returns true if the field is nullable.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.FromJSON(System.String)">
            <summary>Populates the data members of this object from a JSON string.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreField.ToJSON">
            <summary>Serializes this object to a JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFieldType">
            <summary>The different types of a row value variant.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Unknown">
            <summary>An unknown type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Int16">
            <summary>A 16-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Int32">
            <summary>A 32-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Int64">
            <summary>A 64-bit integer value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.GUID">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Float32">
            <summary>A float value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Float64">
            <summary>A double value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Date">
            <summary>A date time value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Text">
            <summary>A string value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.OID">
            <summary>An object id value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.GlobalId">
            <summary>A global id value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Blob">
            <summary>A blob value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Geometry">
            <summary>A geometry value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Raster">
            <summary>A raster value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFieldType.Xml">
            <summary>An xml value.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest">
            <summary>Represents a request to download a file to disk.</summary>
            <remarks>
              RT_FileRequestHandle Adds a number of properties and methods to RT_RequestHandle to support performing a request where
              the response is saved to disk, potentially making use of a platform-specific "background download" service. It must be
              destroyed by calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFileRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFileRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.PrivateCreateFromHandleInternal_CoreFileRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFileRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFileRequest instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.FilePath">
            <summary>Get the file path of the request.</summary>
            <remarks>
              This path is the file path where the request response should be saved.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.Paused">
            <summary>Get whether the runtime has requested that the request should be paused.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.PersistentRequestId">
            <summary>Get the platform-defined ID of the long-running request.</summary>
            <remarks>
              When set, this id may be persisted by the C_API. Then, on subsequent runs of the application C_API may perform the
              request again, setting this id into the new request instance. Platform code can then use the ID to retrieve the existing
              background download request from a platform-specific OS service.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFileRequest.SetPauseRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_FileRequest_PauseRequest)">
            <summary>Sets the callback that will be invoked to request that the RT_FileRequestHandle be paused.</summary>
            <remarks>
              The callback will be invoked when the runtime wants the platform code to pause a request. If no callback is registered
              the RT_FileRequestHandle will be canceled.
            </remarks>
            <param name="pauseRequest">The function to be invoked. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol">
            <summary>A base class for fill symbols. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              Fill symbols are used with graphics which are based on a polygon geometry. Same as a RT_SymbolHandle. Changing type just
              to make it clear you get back a derived type. You need to pass this handle to all fill symbol functions. The fill symbol
              class is derived from the symbol class. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFillSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFillSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.PrivateCreateFromHandleInternal_CoreFillSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreFillSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreFillSymbol instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.Color">
            <summary>Get the color for the fill symbol.</summary>
            <remarks>
              Get the color for the fill symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.Outline">
            <summary>Get the outline of the fill symbol.</summary>
            <remarks>
              Get the outline of the fill symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreFillSymbol)">
            <summary>Check if 2 FillSymbols are equal.</summary>
            <remarks>
              Check FillSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="fillSymbol2">The 2nd FillSymbol object to check to see if equal to the 1st FillSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFontDecoration">
            <summary>The list of possible font decorations.</summary>
            <remarks>
              Enum to represent decoration of font supported by ArcGIS Server.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontDecoration.LineThrough">
            <summary>A line is drawn through the text.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontDecoration.None">
            <summary>No decoration is made to the text.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontDecoration.Underline">
            <summary>The text is underlined.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontDecoration.Unknown">
            <summary>Unknown font decoration.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFontStyle">
            <summary>The list of possible font styles.</summary>
            <remarks>
              Enum to represent style of font supported by ArcGIS Server.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontStyle.Italic">
            <summary>The text is italicized.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontStyle.Normal">
            <summary>No alteration is made to the text.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontStyle.Oblique">
            <summary>The text is obliqued.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontStyle.Unknown">
            <summary>Unknown font style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreFontWeight">
            <summary>The list of possible font weights.</summary>
            <remarks>
              Enum to represent weight of font supported by ArcGIS Server.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontWeight.Bold">
            <summary>The text is made bold.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontWeight.Normal">
            <summary>No alteration is made to the text.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreFontWeight.Unknown">
            <summary>Unknown font weight.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseJob">
            <summary>A RT_JobHandle that requests a feature service to generate a geodatabase file to be downloaded for off-line use.</summary>
            <remarks>
              The handle must be destroyed with RT_Job_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseJob.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGenerateGeodatabaseJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGenerateGeodatabaseJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseJob.PrivateCreateFromHandleInternal_CoreGenerateGeodatabaseJob(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGenerateGeodatabaseJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGenerateGeodatabaseJob instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseJob.Result">
            <summary>For a successfully completed job the result returns the local geodatabase. Otherwise NULL is returned.</summary>
            <remarks>
              If the job is in progress then a NULL result is returned until the job successfully completes. The returned geodatabase
              is in an unloaded state, use RT_Geodatabase_load to load it.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters">
            <summary>A handle that represents the parameters to a generate method on a geodatabase sync task.</summary>
            <remarks>
              You need to pass this handle to all generate geodatabase parameters functions. You will get this handle from various
              functions and the handle must be destroyed from RT_GenerateGeodatabaseParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGenerateGeodatabaseParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGenerateGeodatabaseParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.#ctor">
            <summary>Create a parameters object for use with the generate method on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_GenerateGeodatabaseParameters_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GenerateGeodatabaseParameters_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.AttachmentSyncDirection">
            <summary>Specifies the direction for attachments to be synchronized.</summary>
            <remarks>
              This parameter is available when the service resource sync capabilities includes supportsAttachmentsSyncDirection. This
              parameter defines how attachments will be synced and is only applicable if the feature service has attachments.
              RT_AttachmentSyncDirection_bidirectional - Attachment edits can be both uploaded from the client and downloaded from the
              service when syncing. RT_AttachmentSyncDirection_upload - Attachment edits can only be uploaded from the client when
              syncing. This is useful in cases where the data collector does not want to consume space with attachments from the
              service, but does need to collect new attachments. RT_AttachmentSyncDirection_none - Attachment edits are never synced
              from either the client or the server. When RT_GenerateGeodatabaseParameters_setReturnAttachments is set to true, you can
              set RT_GenerateGeodatabaseParameters_setAttachmentSyncDirection to either RT_AttachmentSyncDirection_bidirectional
              (default) or RT_AttachmentSyncDirection_upload. In this case, create replica includes attachments from the service. When
              RT_GenerateGeodatabaseParameters_setReturnAttachments is set to false, you can set
              RT_GenerateGeodatabaseParameters_setAttachmentSyncDirection to either RT_AttachmentSyncDirection_upload or
              RT_AttachmentSyncDirection_none (default). In this case, the geodatabase does not include attachments from the service.
              Attachment sync direction is set during the RT_GeodatabaseSyncTask_generateGeodatabase operation and cannot be
              overridden during RT_GeodatabaseSyncTask_syncGeodatabase .
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.Extent">
            <summary>The geometry that is used to intersect the features in the service to replicate into the geodatabase.</summary>
            <remarks>
              This is typically an envelope, but other geometry types can be used too. An intersects test will be used to determine
              which features are replicated.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.LayerOptions">
            <summary>The list of layers and tables to include in the geodatabase if the sync model is layer.</summary>
            <remarks>
              For a per layer sync model, this must be populated with minimum of one valid layer id. For valid layers and tables see
              RT_ArcGISFeatureServiceInfo_getFeatureLayerInfos and RT_ArcGISFeatureServiceInfo_getTableInfos.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.OutSpatialReference">
            <summary>The spatial reference that is used for the generated geodatabase.</summary>
            <remarks>
              If this is null, the Extent's spatial reference is used. If that is null the feature services spatial reference is then
              used.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.ReturnAttachments">
            <summary>Indicates if attachments are added to the geodatabase.</summary>
            <remarks>
              The default value is false. This parameter is only applicable if the feature service has attachments.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters.SyncModel">
            <summary>The synchronization model that will be used generate a geodatabase.</summary>
            <remarks>
              The default is sync model is Layer. Check the services supports the required sync model, see
              RT_ArcGISFeatureServiceInfo_getSyncCapabilities.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption">
            <summary>
              The can be used in conjunction with RT_GenerateGeodatabaseParametersHandle object to refine per layer what features are
              replicated.
            </summary>
            <remarks>
              This parameter allows you to set properties on a per-layer or per-table basis. Only the properties for the layers and
              tables that you want changed from the default are required. You need to pass this handle to all layer query methods. You
              can get this handle from various functions and the handle must be destroyed from RT_GenerateLayerOption_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGenerateLayerOption class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGenerateLayerOption instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.#ctor">
            <summary>Creates a new generate layer option instance for use for generate geodatabase on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GenerateLayerOption_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GenerateLayerOption_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.#ctor(System.Int64)">
            <summary>Creates a new generate layer option instance for use for generate geodatabase on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GenerateLayerOption_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GenerateLayerOption_destroy on the return value.
            </remarks>
            <param name="layerId">A layer id in the service</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.#ctor(System.Int64,System.Boolean)">
            <summary>Creates a new generate layer option instance for use with generate geodatabase on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GenerateLayerOption_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GenerateLayerOption_destroy on the return value.
            </remarks>
            <param name="includeRelated">Indicates if related rows should be included</param>
            <param name="layerId">A layer id in the service</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.#ctor(System.Int64,System.String)">
            <summary>Creates a new generate layer option instance for use with generate geodatabase on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GenerateLayerOption_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GenerateLayerOption_destroy on the return value.
            </remarks>
            <param name="layerId">A layer id in the service</param>
            <param name="whereClause">a where clause to apply to the layer</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.IncludeRelated">
            <summary>Indicates if only related rows are added to the specific RT_GenerateLayerOption_getLayerId in the generated geodatabase.</summary>
            <remarks>
              This property is only applicable if your data has relationship classes. Set this on a table that is related to by other
              layers or tables to restrict it to just the rows to just those used in relationships. If this is true then other
              properties are ignored RT_GenerateLayerOption_getWhereClause and RT_GenerateLayerOption_getUseGeometry. Returns false if
              there's an error.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.LayerId">
            <summary>The layer or table Id to further filter in the generated geodatabase.</summary>
            <remarks>
              The Ids used here must match Ids used in geodatabase sync task layer ids Only layers that need further refining need to
              be included. If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.UseGeometry">
            <summary>Indicates if RT_GenerateGeodatabaseParameters_getExtent is used to filter the features for downloading.</summary>
            <remarks>
              The default is true. Setting this to false, with no where clause, will retrieve all features. This is ignored if
              RT_GenerateLayerOption_getIncludeRelated is true Returns false if there's an error.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.WhereClause">
            <summary>Returns the where clause of the layer option.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGenerateLayerOption.Clone">
            <summary>Copies a generate layer option.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters">
            <summary>A structure that describes a geocode method parameters.</summary>
            <remarks>
              Structure holding the parameters to support the geocode operation for a geocoding service or local locator. You need to
              pass this handle to all geocode parameters functions. It represents an instance of a geocode parameters. This is an
              opaque handle. It must be destroyed by calling RT_GeocodeParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeocodeParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeocodeParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.#ctor">
            <summary>Creates a new geocode parameters handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GeocodeParameters_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.Categories">
            <summary>Gets categories.</summary>
            <remarks>
              Determines addresses from which the categories should be returned. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.CountryCode">
            <summary>Gets country code.</summary>
            <remarks>
              Determines addresses from which the country should be returned. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.ForStorage">
            <summary>Gets for storage property.</summary>
            <remarks>
              Specifies whether the results of the operation will be persisted. The default value is false, which indicates the
              results of the operation can't be stored. If you store the results, in a database for example, you need to set this
              parameter to true. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.MaxResults">
            <summary>Gets max results.</summary>
            <remarks>
              Determines the maximum count of candidates which should be returned. By default should be returned all found candidates.
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.MinScore">
            <summary>Gets min score.</summary>
            <remarks>
              Determines addresses the minimal score value (score threshold) [0..100]. By default used 0 and get real value from
              locator properties. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.OutputLanguageCode">
            <summary>Gets output language code.</summary>
            <remarks>
              Determines the language of candidate labels which should be returned. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.OutputSpatialReference">
            <summary>Gets output spatial reference.</summary>
            <remarks>
              The spatial reference for candidate geometries. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.PreferredSearchLocation">
            <summary>Gets preferred search location.</summary>
            <remarks>
              Distance specifying with location the preferred area where candidates will be searched. Supported value from interval
              [1000..50000], 50000 by default. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.ResultAttributeNames">
            <summary>Gets attribute names.</summary>
            <remarks>
              Array of candidate attribute names indicating which attributes should be returned for every candidate. For empty array
              return only default attributes, "*" means all attributes will be returned. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters.SearchArea">
            <summary>Gets search area.</summary>
            <remarks>
              Envelope specifying the area where candidates will be searched. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult">
            <summary>Provides information about geocode address candidate including address, location, score and attributes.</summary>
            <remarks>
              Class containing the details of a location candidate such as the formatted address, the score, the location and the
              attributes. You need to pass this handle to all geocode result functions. It represents an instance of a geocode result.
              This is an opaque handle. It must be destroyed by calling RT_GeocodeResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeocodeResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeocodeResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.Attributes">
            <summary>Gets attributes.</summary>
            <remarks>
              Returns the attributes of the candidate. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.DisplayLocation">
            <summary>Gets display location.</summary>
            <remarks>
              Returns display location of candidate. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.Extent">
            <summary>Gets the display zoom extent.</summary>
            <remarks>
              Returns the display zoom extent candidate. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.InputLocation">
            <summary>Gets input location.</summary>
            <remarks>
              Returns input location of candidate. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.Label">
            <summary>Gets label.</summary>
            <remarks>
              Returns a label that contains formatted address. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.RouteLocation">
            <summary>Gets route location.</summary>
            <remarks>
              Returns route location of candidate. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeocodeResult.Score">
            <summary>Gets score.</summary>
            <remarks>
              Returns match score in a range between 0 and 1. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase">
            <summary>A handle that represents a geodatabase.</summary>
            <remarks>
              You need to pass this handle to all geodatabase functions. You will get this handle from various functions and the
              handle must be destroyed from RT_Geodatabase_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodatabase class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodatabase instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.#ctor(System.String)">
            <summary>Create a geodatabase object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Geodatabase_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Geodatabase_destroy on the return value.
            </remarks>
            <param name="path">Path to geodatabase.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.GenerateGeodatabaseExtent">
            <summary>The extent used to generate the sync enabled geodatabase.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.GeodatabaseFeatureTables">
            <summary>Return the geodatabase feature tables from the geodatabase.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.IsSyncEnabled">
            <summary>Checks if sync is enabled for the geodatabase.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.Path">
            <summary>Returns the geodatabase path.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.ServiceURL">
            <summary>Returns the geodatabase service URL.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.SyncModel">
            <summary>Returns the geodatabase sync model.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the geodatabase is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the geodatabase has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the geodatabase needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.GeodatabaseFeatureTable(System.String)">
            <summary>Return the specified geodatabase feature table from the geodatabase.</summary>
            <remarks>
              Non-overloaded method: GetGeodatabaseFeatureTable
            </remarks>
            <param name="tableName">The name of the geodatabase feature table.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.GeodatabaseFeatureTable(System.Int64)">
            <summary>Return the specified geodatabase feature table from the geodatabase.</summary>
            <remarks>
              Non-overloaded method: GetGeodatabaseFeatureTableByServiceLayerId
            </remarks>
            <param name="serviceLayerId">Service layer Id.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.HasLocalEdits">
            <summary>Checks if the geodatabase has local edits.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.Load">
            <summary>Loads the geodatabase.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase.RetryLoad">
            <summary>Retry loading the geodatabase.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseDatasetType">
            <summary>The types of geodatabase datasets.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseDatasetType.Unknown">
            <summary>Unknown geodatabase dataset type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseDatasetType.TransportationNetworkDataset">
            <summary>A RT_TransportationNetworkDatasetHandle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable">
            <summary>A handle that represents an Geodatabase feature table.</summary>
            <remarks>
              You need to pass this handle to all feature table functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureTable_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodatabaseFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodatabaseFeatureTable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable.PrivateCreateFromHandleInternal_CoreGeodatabaseFeatureTable(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodatabaseFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodatabaseFeatureTable instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable.Geodatabase">
            <summary>Returns the geodatabase from the geodatabase feature table.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseFeatureTable.HasLocalEditsSince(RuntimeCoreNet.GeneratedWrappers.CoreDateTime)">
            <summary>Checks if the geodatabase feature table has local edits since a specific date.</summary>
            <param name="date">The date.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask">
            <summary>
              A handle that represents a geodatabase sync task. Use this in conjunction with a feature service to synchronize off-line
              data.
            </summary>
            <remarks>
              You need to pass this handle to all geodatabase sync task functions. You will get this handle from various functions and
              the handle must be destroyed from RT_GeodatabaseSyncTask_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodatabaseSyncTask class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodatabaseSyncTask instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureServiceInfo)">
            <summary>Create a geodatabase sync task object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GeodatabaseSyncTask_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GeodatabaseSyncTask_destroy on the return value.
            </remarks>
            <param name="featureServiceInfo">A feature service info with sync capabilities.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.#ctor(System.String)">
            <summary>Create a geodatabase sync task object using a URL to create a RT_ArcGISFeatureServiceInfoHandle</summary>
            <remarks>
              Use this method to create an object. To ensure the service info can be loaded, you must call
              RT_GeodatabaseSyncTask_getFeatureServiceInfo and set any callbacks. This object must be destroyed by calling function
              RT_GeodatabaseSyncTask_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GeodatabaseSyncTask_destroy on the return value.
            </remarks>
            <param name="url">A URL to a feature service with sync capabilities.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.URL">
            <summary>Returns the url of the feature service to synchronize with.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.FeatureServiceInfo">
            <summary>Returns the feature service info that represents the feature service to synchronize with.</summary>
            <remarks>
              If this sync task was created from a URL, then ensure the RT_ArcGISFeatureServiceInfoHandle instance has callbacks set
              for requests.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the geodatabase sync task set load request required.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.CreateDefaultGenerateGeodatabaseParametersAsync">
            <summary>Creates default parameters for a generate geodatabase.</summary>
            <remarks>
              This will populate the parameters with values matching what the service supports. For example if the service does not
              support RT_SyncModel_layer then RT_SyncModel_geodatabase will be used All layers from the service will be included. The
              extent will be the services full extent. Attachments are included by default.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.CreateDefaultSyncGeodatabaseParametersAsync(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Creates default parameters for a sync geodatabase.</summary>
            <remarks>
              This will populate the parameters with values matching what the sync task's feature service and the geodatabase
              supports. For a geodatabase with RT_SyncModel_layer then all geodatabase layers will be included. If the service is
              read-only then the sync direction will be RT_SyncDirection_download. Otherwise the sync direction will be
              RT_SyncDirection_bidirectional.
            </remarks>
            <param name="geodatabase">a geodatabase to sync.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.GenerateGeodatabase(RuntimeCoreNet.GeneratedWrappers.CoreGenerateGeodatabaseParameters,System.String)">
            <summary>Returns a job that when started will generate a geodatabase from a service.</summary>
            <param name="parameters">The parameters for generate geodatabase.</param>
            <param name="pathToGeodatabaseFile">a path including a new filename where the downloaded geodatabase is written to.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.RegisterSyncEnabledGeodatabaseAsync(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Registers a copy of a sync enabled geodatabase with a service so the copy can sync to the service.</summary>
            <remarks>
              The local geodatabase file is typically a copy of another original geodatabase file. The original geodatabase must
              already be known to the service and have a replica ID. A successful register will give the local geodatabase it's own
              replica ID and separate it from the original. It can then be synchronized with the service to receive updates. After
              taking copies of the original database, do not sync changes to the original until all copies have been registered. This
              operation is not related to RT_GeodatabaseSyncTask_unregisterGeodatabaseAsync which removes the geodatabase form the
              service.
            </remarks>
            <param name="geodatabase">a geodatabase to register.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.SyncGeodatabase(RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters,RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Returns a job to synchronize a geodatabase back to a service.</summary>
            <param name="geodatabase">The geodatabase to sync</param>
            <param name="parameters">Parameters to use to sync the geodatabase</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodatabaseSyncTask.UnregisterGeodatabaseAsync(RuntimeCoreNet.GeneratedWrappers.CoreGeodatabase)">
            <summary>Unregisters a geodatabase from a service removing the services replica id.</summary>
            <remarks>
              After unregistering a geodatabase it can no longer be synced back to the service. This operation is not related to
              RT_GeodatabaseSyncTask_registerSyncEnabledGeodatabaseAsync which is for registering copies of a geodatabase.
            </remarks>
            <param name="geodatabase">a geodatabase to unregister.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult">
            <summary>The returned results of calling RT_GeometryEngine_distanceGeodesic.</summary>
            <remarks>
              The results of calling GeometryEngine's geodesicDistance methods.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodesicDistanceResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodesicDistanceResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.Azimuth1">
            <summary>
              Output azimuth1 at point 1 towards point 2, in the angular unit that was used as a parameter when calling
              RT_GeometryEngine_distanceGeodesic. (clockwise angle between tangent vector at point1 in the direction of the curve
              towards point2 and meridian passing through the point1).
            </summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.Azimuth2">
            <summary>
              Output azimuth1 at point 2 towards point 1, in the angular unit that was used as a parameter when calling
              RT_GeometryEngine_distanceGeodesic. (clockwise angle between tangent vector at point2 in the direction of the curve
              towards point2 and meridian passing through the point2).
            </summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.AzimuthUnit">
            <summary>The unit of measure for azimuth1 and azimuth2.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.Distance">
            <summary>
              The geodesic distance from the two input points, in the linear unit used as a parameter when calling
              RT_GeometryEngine_distanceGeodesic.
            </summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicDistanceResult.DistanceUnit">
            <summary>The unit of measure for distance.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters">
            <summary>The required parameters for calling RT_GeometryEngine_ellipseGeodesic.</summary>
            <remarks>
              The parameters needed when calling GeometryEngine's geodesicEllipse method.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodesicEllipseParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodesicEllipseParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.#ctor">
            <summary>Creates a new and empty RT_GeodesicEllipseParametersHandle object.</summary>
            <remarks>
              Caller must free destroy return handle by calling RT_GeodesicEllipseParameters_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.#ctor(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.UInt32,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreGeometryType,System.Double,System.Double)">
            <summary>Creates a new RT_GeodesicEllipseParametersHandle object with the given values.</summary>
            <remarks>
              Caller must free destroy return handle by calling RT_GeodesicEllipseParameters_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="angularUnit">The angular unit of measure. If NULL, degrees will be assumed.</param>
            <param name="axisDirection">The direction of the major axis of the ellipse as an angle in units of angular_unit.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="geometryType">The type of output geometry.</param>
            <param name="linearUnit">The linear unit of measure. If NULL, meters will be assumed.</param>
            <param name="maxPointCount">The max number of vertices in the ellipse.</param>
            <param name="maxSegmentLength">The max segment length of the result approximation in units of linear_unit.</param>
            <param name="semiAxis1Length">The length of the semi-major or semi-minor axis of the ellipse in the units of linear_unit.</param>
            <param name="semiAxis2Length">The length of the semi-major or semi-minor axis of the ellipse in in the units of linear_unit.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.AngularUnit">
            <summary>The unit of measure for AxisDirection.</summary>
            <remarks>
              If NULL, degrees will be assumed.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.AxisDirection">
            <summary>The direction of the major axis of the ellipse as an angle in angular_unit.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.Center">
            <summary>The center of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.GeometryType">
            <summary>The type of the output geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.LinearUnit">
            <summary>The unit of measure for SemiAxis1Length, SemiAxis2Length and MaxSegmentLength.</summary>
            <remarks>
              If NULL, meters will be assumed.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.MaxPointCount">
            <summary>The max number of vertices in the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.MaxSegmentLength">
            <summary>The max segment length of the result.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.SemiAxis1Length">
            <summary>The length of the semi-major or semi-minor axis of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters.SemiAxis2Length">
            <summary>The length of the semi-major or semi-minor axis of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters">
            <summary>The required parameters for calling RT_GeometryEngine_sectorGeodesic.</summary>
            <remarks>
              The parameters needed when calling GeometryEngine's geodesicSector method.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeodesicSectorParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeodesicSectorParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.#ctor">
            <summary>Creates a new and empty RT_GeodesicSectorParametersHandle object.</summary>
            <remarks>
              Caller must free destroy return handle by calling RT_GeodesicSectorParameters_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.#ctor(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.UInt32,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreGeometryType,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a new RT_GeodesicSectorParametersHandle object with the given values.</summary>
            <remarks>
              Caller must free destroy return handle by calling RT_GeodesicSectorParameters_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="angularUnit">The angular unit of measure, if NULL degrees will be assumed.</param>
            <param name="axisDirection">The direction of the major axis of the ellipse as an angle in angular_unit.</param>
            <param name="center">The center of the ellipse.</param>
            <param name="geometryType">The type of output geometry.</param>
            <param name="linearUnit">The linear unit of measure, if NULL meters will be assumed.</param>
            <param name="maxPointCount">The max number of vertices in the ellipse.</param>
            <param name="maxSegmentLength">The max segment length of the result approximation in units of linear_unit.</param>
            <param name="sectorAngle">The sweep angle of the sector in angular_unit.</param>
            <param name="semiAxis1Length">The length of the semi-major or semi-minor axis of the ellipse in the units of linear_unit.</param>
            <param name="semiAxis2Length">The length of the semi-major or semi-minor axis of the ellipse in in the units of linear_unit.</param>
            <param name="startDirection">The direction of starting radius of the sector as an angle in angular_unit.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.AngularUnit">
            <summary>The unit of measure for AxisDirection, SectorAngle, StartDirection.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.AxisDirection">
            <summary>The direction of the major axis of the ellipse as an angle in angular_unit.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.Center">
            <summary>The center of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.GeometryType">
            <summary>The type of the output geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.LinearUnit">
            <summary>The unit of measure for SemiAxis1Length, SemiAxis2Length and MaxSegmentLength.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.MaxPointCount">
            <summary>The max number of vertices in the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.MaxSegmentLength">
            <summary>The max segment length of the result.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.SectorAngle">
            <summary>The sweep angle of the sector in angular_unit. The sweep angle goes clockwise from the starting radius.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.SemiAxis1Length">
            <summary>The length of the semi-major or semi-minor axis of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.SemiAxis2Length">
            <summary>The length of the semi-major or semi-minor axis of the ellipse.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters.StartDirection">
            <summary>The direction of starting radius of the sector as an angle in angular_unit.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType">
            <summary>The different types of geodetic curves.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.Geodesic">
            <summary>A geodesic line (shortest path along two points on the ellipsoid).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.Loxodrome">
            <summary>A rhumb line (loxodrome).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.GreatElliptic">
            <summary>A great elliptic.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.NormalSection">
            <summary>A normal section.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.ShapePreserving">
            <summary>The segment shape is preserved in the projection where it is defined.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType.Unknown">
            <summary>An unknown joint type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometry">
            <summary>A geometry object.</summary>
            <remarks>
              You need to pass this handle to all geometry functions. All geometries have a spatial reference. The spatial reference
              can be NULL. It represents an instance of a geometry. You cannot directly access geometry properties. This is an opaque
              handle. It must be destroyed by calling RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeometry class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeometry instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.PrivateCreateFromHandleInternal_CoreGeometry(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeometry class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeometry instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
              Warning: This function will return NULL. Geometry types do not support custom data.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.Dimension">
            <summary>Retrieve the number of dimensions for the geometry.</summary>
            <remarks>
              Retrieve the number of dimensions for the geometry. Will return RT_GeometryDimension_unknown if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.Extent">
            <summary>Retrieve the extent for the geometry.</summary>
            <remarks>
              Retrieve the extent for the geometry which is a envelope and contains the same spatial reference as the input geometry.
              This object must be destroyed by calling function RT_Geometry_destroy.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.HasM">
            <summary>Gets a value indicating if the geometry has M.</summary>
            <remarks>
              Gets a value indicating if the geometry has M. If an error occurs false will be returned. M is a vertex attributes that
              are stored with the geometry.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.HasZ">
            <summary>Gets a value indicating if the geometry has Z.</summary>
            <remarks>
              Gets a value indicating if the geometry has Z. If an error occurs false will be returned. Z typically represent
              elevations or heights.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.IsEmpty">
            <summary>Check if a geometry is empty or not.</summary>
            <remarks>
              Only check the geometry to see if it is empty. Does not check the spatial reference. Will return true if an error
              occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.ObjectType">
            <summary>Retrieve the type of geometry.</summary>
            <remarks>
              Retrieve the geometry type for a specific geometry. Will return RT_GeometryType_unknown if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.SpatialReference">
            <summary>Retrieve the spatial reference for the geometry.</summary>
            <remarks>
              Retrieve the spatial reference for the geometry. If the geometry does not have a spatial reference NULL is returned.
              This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.FromJSON(System.String)">
            <summary>Creates a geometry from an ArcGIS JSON geometry representation.</summary>
            <remarks>
              Creates a geometry from an ArcGIS JSON geometry representation. Will return NULL if an error occurs.
            </remarks>
            <param name="inputJSON">JSON representation of geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.FromJSONWithSpatialReference(System.String,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a geometry from an ArcGIS JSON geometry representation.</summary>
            <remarks>
              Creates a geometry from an ArcGIS JSON geometry representation. Will return NULL if an error occurs.
            </remarks>
            <param name="inputJSON">JSON representation of geometry.</param>
            <param name="spatialReference">The geometry's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.GetHash">
            <summary>Retrieve the hash for the geometry.</summary>
            <remarks>
              Retrieve the hash for the geometry. The hash is used to generate fixed-length output data that acts as a shortened
              reference to the original data. If an error occurs then 0 is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Check if 2 geometries and their spatial references are equal.</summary>
            <remarks>
              Check both the geometry and spatial reference to see if they are equal. Will return false if an error occurs.
            </remarks>
            <param name="geometryB">The 2nd geometry to check to see if equal to the 1st.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometry.ToJSON">
            <summary>Converts a geometry into an ArcGIS JSON geometry representation.</summary>
            <remarks>
              Converts a geometry into an ArcGIS JSON geometry representation. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder">
            <summary>A geometry builder object.</summary>
            <remarks>
              You need to pass this handle to all geometry builder functions. You cannot directly access geometry properties. This is
              an opaque handle. It must be destroyed by calling RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeometryBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeometryBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.PrivateCreateFromHandleInternal_CoreGeometryBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeometryBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeometryBuilder instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.Extent">
            <summary>Retrieve the extent for the geometry in the builder.</summary>
            <remarks>
              Retrieve the extent for the geometry in the builder which is a envelope and contains the same spatial reference as the
              input geometry. This object must be destroyed by calling function RT_Geometry_destroy.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.HasM">
            <summary>Gets a value indicating if the geometry builder has M.</summary>
            <remarks>
              Gets a value indicating if the geometry builder has M.If an error occurs false will be returned. M is a vertex
              attributes that are stored with the geometry builder.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.HasZ">
            <summary>Gets a value indicating if the geometry builder has Z.</summary>
            <remarks>
              Gets a value indicating if the geometry builder has Z. If an error occurs false will be returned. Z typically represent
              elevations or heights.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.IsEmpty">
            <summary>Check if a geometry builder is empty or not.</summary>
            <remarks>
              Only check the geometry builder to see if it is empty. Does not check the spatial reference. Will return true if an
              error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.ObjectType">
            <summary>Retrieve the type of geometry builder.</summary>
            <remarks>
              Retrieve the geometry builder type for a specific geometry builder. Will return RT_GeometryBuilderType_unknown if an
              error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.SpatialReference">
            <summary>Retrieve the spatial reference for the geometry.</summary>
            <remarks>
              Retrieve the spatial reference for the geometry. If the geometry does not have a spatial reference NULL is returned.
              This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.IsSketchValid">
            <summary>Check if a geometry meets minimum requirements for a sketch.</summary>
            <remarks>
              Check if the geometry object is not empty and for polygons contains a minimum of 2 points. Does not check the spatial
              reference. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.ReplaceGeometry(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Replace the geometry in the builder to the new geometry.</summary>
            <remarks>
              Replace the geometry in the builder to the geometry passed in. This does not update the spatial reference of the
              builder.
            </remarks>
            <param name="geometry">The geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilder.ToGeometry">
            <summary>Creates a geometry with the values in the geometry builder.</summary>
            <remarks>
              Creates a geometry with the values in the geometry builder. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType">
            <summary>The different types of geometry builders.</summary>
            <remarks>
              Each of the different supported geometry builder types. Can get the type by calling RT_GeometryBuilder_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.PointBuilder">
            <summary>Point builder to which produces point geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.EnvelopeBuilder">
            <summary>Envelope builder to which produces envelope geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.PolylineBuilder">
            <summary>Polyline builder to which produces polyline geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.PolygonBuilder">
            <summary>Polygon builder to which produces polygon geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.MultipointBuilder">
            <summary>Multipoint builder to which produces multipoint geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryBuilderType.Unknown">
            <summary>An unknown geometry builder.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension">
            <summary>The number of dimensions of the geometry.</summary>
            <remarks>
              How many dimensions the geometry contains.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension.Point">
            <summary>The geometry is a point or multipoint.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension.Curve">
            <summary>The geometry is a curve.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension.Area">
            <summary>The geometry has an area.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension.Volume">
            <summary>The geometry has a volume.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryDimension.Unknown">
            <summary>Unknown geometry dimensions.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine">
            <summary>Defines a geometry engine handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Area(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the area of the given geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.AreaGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Calculates the geodesic area of the given geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="curveType">The type of curve to calculate.</param>
            <param name="geometry">A geometry object.</param>
            <param name="unit">The unit of measure for the return value. If null, then meters squared will be used.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Boundary(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the boundary of the given geometry.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Buffer(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double)">
            <summary>Returns a geometry object that represents a buffer around the given geometry.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="distance">The buffer distance for the geometry in the same units as the geometry's spatial reference system.</param>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.BufferGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Calculates the geodesic buffer of a given geometry.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="curveType">The curve type to calculate.</param>
            <param name="distance">The distance to buffer.</param>
            <param name="geometry">A geometry object.</param>
            <param name="maxDeviation">The maximum deviation between points.</param>
            <param name="unit">The unit of measure for the distance.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Clip(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>Clips the given geometry with the envelope.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="envelope">The envelope representing the area to clip.</param>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Contains(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if geometry1 contains geometry2.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.ConvexHull(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Returns the minimum bounding geometry that completely encloses the given geometry.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Crosses(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if geometry1 crosses geometry2.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Densify(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double)">
            <summary>Densifies the given geometry by plotting points between existing vertices in that geometry.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="maxSegmentLength">The maximum distance between points after densification. This is in the same units as the geometry's spatial reference system.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.DensifyGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Densifies the given geometry using a geodesic curve.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="curveType">The type of curve to calculate.</param>
            <param name="geometry">A geometry object.</param>
            <param name="lengthUnit">The unit of measure for max_segment_length.</param>
            <param name="maxSegmentLength">The maximum distances between points in the densified geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Difference(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Constructs the set-theoretic difference between two geometries.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">The second geometry of dimension equal to or greater than the elements of the first geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Disjoint(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if the two geometries are disjoint.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Distance(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Measures the simple planar distance between two geometries.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.DistanceGeodesic(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Calculates the geodesic distance between the two points.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_GeodesicDistanceResult_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="azimuthUnit">The angular unit of measure for the returned results.</param>
            <param name="curveType">The type of curve to calculate.</param>
            <param name="distanceUnit">The linear unit of measure for the returned results.</param>
            <param name="point1">A point object.</param>
            <param name="point2">Another point object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.EllipseGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeodesicEllipseParameters)">
            <summary>Constructs a geodesic ellipse centered on a specific point.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="parameters">Various parameters needed to construct the ellipse.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Equals(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if two geometries are equal</summary>
            <remarks>
              The geometries are equal if they have the same spatial reference systems, geometry type and points.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Generalize(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,System.Boolean)">
            <summary>Generalizes the given geometry by removing vertices based on the Douglas-Poiker algorithm.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="maxDeviation">The maximum distance that the generalized geometry can deviate from the original, in the same units as the geometry's spatial reference system.</param>
            <param name="removeDegenerateParts">If true, degenerate parts of the resulting geometry that are undesired for drawing will be removed.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Intersection(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the intersection of two geometries.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Intersects(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if two geometries intersect.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.IsSimple(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>
              Gets a value indicating whether or not the geometry is simple.   For Polylines: the only condition is there can be no
              degenerate segments. When the polyline has no Z, the degenerate segments are those that have length in xy plane less or
              equal the tolerance. When the polyline has Z, the degenerate segments are those that are shorter than the tolerance in
              xy plane, and the change in Z value along the segment is less than or equal to the Z tolerance.   For Polygons: Exterior
              rings are clockwise, and holes are counterclockwise. Rings can touch other rings in finite number of points. Rings can
              be self tangent in finite number of points. Vertices are either exactly coincident, or further than the
              Spatial_reference tolerance from each other. If a vertex is not equal to any boundary point of a segment, it has to be
              further than tolerance from any segment. No segment length is zero or less than tolerance. Each path contains at least
              three non-equal vertices. No empty paths allowed. Order of rings does not matter.
            </summary>
            <remarks>
              Point geometry is always simple.  For Multi_point: there can be no point with exactly equal x and y - the tolerance is
              not taken into account.
            </remarks>
            <param name="geometry">The geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.LabelPoint(RuntimeCoreNet.GeneratedWrappers.CorePolygon)">
            <summary>Calculates an interior point for the given polygon. This point can be used by clients to place a label for the polygon.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="polygon">A polygon object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Length(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the length of the given geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.LengthGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Calculates the geodesic length of the geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="curveType">The type of curve to calculate.</param>
            <param name="geometry">A geometry object.</param>
            <param name="lengthUnit">The unit of measure for the returned value. If null, meters will be used.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.MoveGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreAngularUnit,RuntimeCoreNet.GeneratedWrappers.CoreGeodeticCurveType)">
            <summary>Moves each point in the point collection by a geodesic distance.</summary>
            <remarks>
              The input vector must be of type RT_ElementType_geometry containing only point geometries. There must be the same
              spatial reference on each point. The returned collection is in the same order as the input, but with new points at their
              destination locations.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="azimuth">The azimuth angle of the direction for the points.</param>
            <param name="azimuthUnit">The angular unit of measure for azimuth. If null, degrees will be used.</param>
            <param name="curveType">The type of curve to calculate.</param>
            <param name="distance">The distance to move the points.</param>
            <param name="distanceUnit">The unit of measure for distance. If null, meters will be used.</param>
            <param name="pointCollection">A RT_VectorHandle of RT_ElementType_geometry (points). Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.NearestCoordinate(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Finds the nearest coordinate in the given geometry to the given point.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_ProximityResult_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="point">The point of interest.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.NearestVertex(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Finds the nearest vertex in the given geometry to the given point.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_ProximityResult_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="point">The point of interest.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.NormalizeCentralMeridian(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Folds the geometry into a range of 360 degrees. This may be necessary when wrap around is enabled on the map.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Offset(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType,System.Double,System.Double)">
            <summary>Creates an offset version of the input geometry.</summary>
            <remarks>
              The offset operation creates a geometry that is a constant distance from the input geometry. If is similar to buffering,
              but produces a one sided result. If distance &gt; 0, then the offset geometry is constructed to the right of the input
              geometry, otherwise it is constructed to the left.  The caller owns the returned memory and can clean it up by calling
              RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="bevelRatio">The ratio used to produce a bevel join instead of a miter join (used only when the offset type is Miter).</param>
            <param name="distance">The offset distance for the new geometry.</param>
            <param name="flattenError">The maximum distance of the resulting segments compared to the true circular arc (used only when the offset type if round).</param>
            <param name="geometry">A geometry object.</param>
            <param name="offsetType">The offset type the resulting geometry.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Overlaps(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if two geometries overlap.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Project(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Projects the given geometry from it's current spatial reference system into the given spatial reference system.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
            <param name="spatialReference">The target spatial reference system.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Relate(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.String)">
            <summary>Test if the two geometries are related by the given relation.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
            <param name="relation">The DE-9IM string to be evaluated</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.SectorGeodesic(RuntimeCoreNet.GeneratedWrappers.CoreGeodesicSectorParameters)">
            <summary>Constructs a geodesic sector defined by a geodesic arc and 2 radii.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="parameters">Specifies the parameters for constructing the sector.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.ShapePreservingArea(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit)">
            <summary>Calculates the shape preserving area of the given geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="areaUnit">The return value's UOM.</param>
            <param name="geometry">The geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.ShapePreservingLength(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit)">
            <summary>Calculates the shape preserving length of the given geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">The geometry object.</param>
            <param name="linearUnit">The return value's UOM.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Simplify(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Simplifies the given geometry to make it topologically consistent according to it's geometry type.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry">A geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.SymmetricDifference(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the symmetric difference (exclusive or) of the two geometries.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Touches(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Test if the two geometries touch on their borders.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Union(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Calculates the union of the two geometries.</summary>
            <remarks>
              The caller owns the returned memory and can clean it up by calling RT_Geometry_destroy.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeometryEngine.Within(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Tests if geometry1 is within geometry2.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
            <param name="geometry1">A geometry object.</param>
            <param name="geometry2">Another geometry object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags">
            <summary>*Internal Use* Geometry properties in one value.</summary>
            <remarks>
              The different geometry properties in one value.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags.IsEmpty">
            <summary>The geometry is empty.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags.HasZ">
            <summary>The geometry has a Z value.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags.HasM">
            <summary>The geometry has a m value.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType">
            <summary>The different types of geometry offset joints.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType.Mitered">
            <summary>Refers to a mitered joint type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType.Bevelled">
            <summary>Refers to a bevelled joint type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType.Rounded">
            <summary>Refers to a rounded joint type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType.Squared">
            <summary>Refers to a sqaured joint type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryOffsetType.Unknown">
            <summary>An unknown joint type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType">
            <summary>The different types of geometries.</summary>
            <remarks>
              Each of the different supported geometry types. Can get the type by calling RT_Geometry_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Point">
            <summary>Point geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Envelope">
            <summary>Envelope geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Polyline">
            <summary>Polyline geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Polygon">
            <summary>Polygon geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Multipoint">
            <summary>Multipoint geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeometryType.Unknown">
            <summary>An unknown geometry type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeoView">
            <summary>A Geo view object.</summary>
            <remarks>
              You need to pass this handle to all Geo view functions. The Geo view is a base class to work with either a map view or a
              scene view. This is an opaque handle. It must be destroyed by calling RT_GeoView_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeoView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeoView instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.PrivateCreateFromHandleInternal_CoreGeoView(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGeoView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGeoView instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.DrawStatus">
            <summary>Returns the current draw status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.GraphicsOverlays">
            <summary>Returns a collection containing the graphics overlays.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Height">
            <summary>*Internal Use* Right geo view get height.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IsInteracting">
            <summary>*Internal Use* Returns true if the user is currently interacting with the geo view.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonIllegalState
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IsLogoVisible">
            <summary>Retrieve whether the Esri logo is visible.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IsNavigating">
            <summary>Is the Geo view currently navigating.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IsWrapAroundEnabled">
            <summary>Returns true if the Geo view currently has wraparound turned on, false otherwise.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonIllegalState
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.ObjectType">
            <summary>Returns the type of Geo view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SpatialReference">
            <summary>Returns the spatial reference for the Geo view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.TimeExtent">
            <summary>The current time extent of the map view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Width">
            <summary>*Internal Use* Returns the width of the geo view, in pixels.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetDrawRequestedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_DrawRequested)">
            <summary>*Internal Use* Called when the geo view requires a draw.</summary>
            <param name="drawRequested">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetDrawStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_DrawStatusChanged)">
            <summary>Sets a callback to be invoked when the draw status changes for the view.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="drawStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetLayerViewStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_LayerViewStateChanged)">
            <summary>Sets a callback to be invoked when the layer view state changes for the view.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="layerViewStateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetNavigationCompletedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_NavigationCompleted)">
            <summary>Sets a callback to be invoked when navigation has completed for the view.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="navigationCompleted">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetSpatialReferenceChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_SpatialReferenceChanged)">
            <summary>Sets a callback to be invoked when the spatial reference of the view has been changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="spatialReferenceChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Sets a callback to be invoked when a state of the view has been changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetViewpointChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_GeoView_ViewpointChanged)">
            <summary>Sets a callback to be invoked when the viewpoint of the view has changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected.
            </remarks>
            <param name="viewpointChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Draw(RuntimeCoreNet.GeneratedWrappers.CoreDevice)">
            <summary>*Internal Use* Call in response to a draw requested or to force a redraw of the geo view.</summary>
            <param name="device">A device object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.ExportImageAsync">
            <summary>Exports the current view to the provided buffer.</summary>
            <remarks>
              Non-overloaded method: ExportImageAsync
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.GetCurrentViewpoint(RuntimeCoreNet.GeneratedWrappers.CoreViewpointType)">
            <summary>Retrieve a viewpoint for the view.</summary>
            <param name="viewpointType">Type of the viewpoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.GetLayerViewState(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>Retrieve the layer's view state.</summary>
            <param name="layer">A layer object to get the view state for.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyGraphicsOverlay(RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double)">
            <summary>Initiate an Identify operation on the specified graphics overlay. This overload will return the visible topmost graphic.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyGraphicsOverlay
            </remarks>
            <param name="graphicsOverlay">The overlay on which to run the identify.</param>
            <param name="screenPoint">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyGraphicsOverlay(RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double,System.Int64)">
            <summary>Initiate an Identify operation on the specified graphics overlay.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyGraphicsOverlayWithMaxResults
            </remarks>
            <param name="graphicsOverlay">The overlay on which to run the identify.</param>
            <param name="maximumResults">The maximum size of the result set of RT_GraphicHandle to return.</param>
            <param name="screenPoint">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyGraphicsOverlays(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double)">
            <summary>
              Initiate an Identify operation on all graphics overlays. This overload will return the single visible topmost graphic
              per overlay only.
            </summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyGraphicsOverlays
            </remarks>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyGraphicsOverlays(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double,System.Int64)">
            <summary>Initiate an Identify operation on all graphics overlays.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyGraphicsOverlaysWithMaxResults
            </remarks>
            <param name="maximumResultsPerOverlay">The maximum number of graphics to return per overlay.</param>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyLayer(RuntimeCoreNet.GeneratedWrappers.CoreLayer,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double)">
            <summary>
              Initiate an Identify operation on the specified layer. This overload will return the single visible topmost geolement
              only.
            </summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyLayer
            </remarks>
            <param name="layer">The layer on which to run the identify.</param>
            <param name="screenPoint">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyLayer(RuntimeCoreNet.GeneratedWrappers.CoreLayer,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double,System.Int64)">
            <summary>Initiate an Identify operation on the specified layer.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyLayerWithMaxResults
            </remarks>
            <param name="layer">The layer on which to run the identify.</param>
            <param name="maximumResults">The maximum size of the result set of geoelements (element type dependent on target layer) to return.</param>
            <param name="screenPoint">The location at which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyLayers(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double)">
            <summary>
              Initiate an Identify operation on all layers in the view. This overload will return the single visible topmost
              geoelement per layer only. NB: Layers are searched from top to bottom.
            </summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyLayers
            </remarks>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyLayers(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double,System.Int64)">
            <summary>Initiate an Identify operation on all layers in the view.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyLayersWithMaxResults
            </remarks>
            <param name="maximumResultsPerLayer">The maximum number of geoelements to return per layer or sublayer.</param>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyPopups(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double)">
            <summary>
              Initiate an Identify popups operation on all layers in the view supporting popups. This overload will return the single
              visible topmost geoelement per layer only. NB: Layers are searched from top to bottom.
            </summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyPopups
            </remarks>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IdentifyPopups(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D,System.Double,System.Int64)">
            <summary>Initiate an Identify popups operation on all layers in the view that support popups.</summary>
            <remarks>
              The 'tolerance' parameter determines the extent of the region used during the identify operation. Any Geo-elements that
              intersect this test region when rendered are returned, up to the maximum_results limit. A tolerance of 0 tests just the
              physical pixel at screen_point. Tolerance values above 0 are in DIPs and specify a circular region centered on
              screen_point, with radius equal to tolerance. The maximum allowed tolerance value is 0.5 inches, resulting in an
              identify circle of diameter 1 inch/25.4mm. To convert from DIPs to inches, use the following formula (note that 72
              points equals 1 inch): (DIPs / RT_Environment_getPointsToDIPsFactor) / 72.0
              Non-overloaded method: IdentifyPopupsWithMaxResults
            </remarks>
            <param name="maximumResultsPerLayer">The maximum number of RT_PopupHandle to return per layer or sublayer.</param>
            <param name="screenPoint">The location on which to run identify in screen coordinates.</param>
            <param name="tolerance">Determines the extent of the region used during the identify operation. See remarks for further detail.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.InteractionZoomInAnimated(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* When user double taps on geo view (and also triple taps, quadruple taps, etc).</summary>
            <param name="screenPoint">The screen point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.InteractionZoomOutAnimated(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* When user two finger taps on devices to zoom out, or control+clicks on desktops to zoom out</summary>
            <param name="screenPoint">The screen point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.IsPaused">
            <summary>*Internal Use* Queries if the rendering thread of the geo view has been paused.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Pause(RuntimeCoreNet.GeneratedWrappers.CoreDevice,RuntimeCoreNet.GeneratedWrappers.CoreGraphicsHardwareResources)">
            <summary>*Internal Use* Pauses the rendering thread of the geo view.</summary>
            <param name="device">A device object.</param>
            <param name="resources">A value indicating if resources should be retained or released.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Pulse">
            <summary>*Internal Use* Sends a pulse to the geo view's rendering thread.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Resize(System.Int32,System.Int32)">
            <summary>*Internal Use* Changes the screen dimensions of the geo view maintaining the current anchor point.</summary>
            <param name="height">The new height, in pixels.</param>
            <param name="width">The new width, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.Resume(RuntimeCoreNet.GeneratedWrappers.CoreDevice)">
            <summary>*Internal Use* Resumes the rendering thread of the geo view.</summary>
            <param name="device">A device object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetLogoImage(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>*Internal Use* Set the image to use for the Esri logo.</summary>
            <param name="logo">The image to use for the Esri logo.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetPixelPerInch(System.Single,System.Single)">
            <summary>
              *Internal Use* Set PPI of the Geo view. This can be used to react to changes in PPI of the display the Geo view is
              rendering on, like when dragging an app from one display to another on a multi monitor system.
            </summary>
            <param name="dipsToPixelsFactor">The factor for converting dips to pixels.</param>
            <param name="ppi">The new ppi.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetViewpoint(RuntimeCoreNet.GeneratedWrappers.CoreViewpoint)">
            <summary>Change the Geo view to the new viewpoint.</summary>
            <remarks>
              Non-overloaded method: SetViewpoint
            </remarks>
            <param name="viewpoint">The viewpoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetViewpointAsync(RuntimeCoreNet.GeneratedWrappers.CoreViewpoint)">
            <summary>Change the Geo view to the new viewpoint asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointAsync
            </remarks>
            <param name="viewpoint">The viewpoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGeoView.SetViewpointAsync(RuntimeCoreNet.GeneratedWrappers.CoreViewpoint,System.Single)">
            <summary>Change the Geo view to the new viewpoint asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointWithDurationAsync
            </remarks>
            <param name="durationSeconds">The amount of time in seconds to move to the new viewpoint.</param>
            <param name="viewpoint">The viewpoint.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGeoViewType">
            <summary>The type of GeoView.</summary>
            <remarks>
              Tells you what GeoView you are working with.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeoViewType.MapView">
            <summary>The GeoView is a map view.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeoViewType.SceneView">
            <summary>The GeoView is a scene view.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGeoViewType.Unknown">
            <summary>The GeoView is unknown. This is for error conditions.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGraphic">
            <summary>A graphic.</summary>
            <remarks>
              It must be destroyed by calling RT_Graphic_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGraphic class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGraphic instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor">
            <summary>Create a Graphic object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Create a Graphic object.</summary>
            <param name="attributes">attributes</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Create a Graphic object.</summary>
            <param name="geometry">geometry</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Create a Graphic object.</summary>
            <param name="attributes">attributes</param>
            <param name="geometry">geometry</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Create a Graphic object.</summary>
            <param name="geometry">geometry</param>
            <param name="symbol">symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreDictionary,RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Create a Graphic object.</summary>
            <param name="attributes">attributes</param>
            <param name="geometry">geometry</param>
            <param name="symbol">symbol</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.Attributes">
            <summary>Gets all attributes of the graphic.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.Geometry">
            <summary>Get graphic geometry</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.GraphicsOverlay">
            <summary>
              Gets the graphics overlay the graphic is contained in. If the graphic is not contained in an overlay then NULL is
              returned.
            </summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.IsSelected">
            <summary>Get graphic selected</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.IsVisible">
            <summary>Get graphic visibility</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.Symbol">
            <summary>Get the Graphic's symbol</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.ZIndex">
            <summary>Get graphic Z-index</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphic.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreGraphic)">
            <summary>Check if 2 graphics are equal. The comparison is by reference.</summary>
            <remarks>
              Check graphics are equal. Will return false if an error occurs.
            </remarks>
            <param name="graphic2">The 2nd graphic object to check to see if equal to the 1st graphic object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGraphicAPIType">
            <summary>*Internal Use* The different types of graphics API that can be used.</summary>
            <remarks>
              Each of different supported graphics APIs. DirextX 9 and DirectX 11 are only supported on Windows.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicAPIType.OGL">
            <summary>Use OpenGL minimum version ?.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicAPIType.DX11">
            <summary>Use DirectX 11.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicAPIType.Unknown">
            <summary>Unknown graphics API.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsHardwareResources">
            <summary>*Internal Use* What should be done with graphic resources when the map view is in a paused state.</summary>
            <remarks>
              Should graphic resources be recycled or not while the map view is in a paused state. Recycling will decrease memory
              usage on the device.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsHardwareResources.Recycle">
            <summary>
              Give the graphics resources back to the device. This will decrease the amount of memory used. It will take time to
              resume and recreate the graphics resources. This is useful when the application is in the background.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsHardwareResources.Save">
            <summary>
              Continue to keep the graphic resources. This will keep memory at the current level. Resume will be faster because the
              graphic resources will not have to be recreated. This is useful when the application is pausing the map view and will
              return to it quickly.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsHardwareResources.Unknown">
            <summary>An unknown status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay">
            <summary>Graphics overlay.</summary>
            <remarks>
              You need to pass this handle to all graphics overlay layer functions. It must be destroyed by calling
              RT_GraphicsOverlay_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGraphicsOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGraphicsOverlay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.#ctor">
            <summary>Creates a graphics overlay object.</summary>
            <remarks>
              Use this method to create a graphics overlay object. This object must be destroyed by calling function RT_Layer_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GraphicsOverlay_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.Extent">
            <summary>Calculate and return the extent of the graphics contained in the overlay's graphics collection.</summary>
            <remarks>
              The extent's spatial reference is that of the RT_GeoViewHandle that contains the overlay. If the overlay is not in a
              view, an RT_ErrorType_commonInvalidCall error is returned. If the overlay is in a view but that view does not yet have a
              spatial reference, this method will return an RT_ErrorType_commonInvalidCall error. If the overlay is in a view with a
              spatial reference, but has no graphics, then an empty envelope will be returned.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.Graphics">
            <summary>Get the graphics collection. An observable vector of RT_ElementType_graphic.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.IsPopupEnabled">
            <summary>Gets a flag indicating whether the RT_PopupDefinitionHandle defined on the RT_RasterLayerHandle is enable / disable.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.IsVisible">
            <summary>Get the visibility for the graphics overlay.</summary>
            <remarks>
              Get the visibility for the graphics overlay.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.MaxScale">
            <summary>Get the maximum scale for the graphics overlay.</summary>
            <remarks>
              Get the maximum scale for the graphics overlay. This controls the maximum scale level the graphics overlay can zoom too.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.MinScale">
            <summary>Get the minimum scale for the graphics overlay.</summary>
            <remarks>
              Get the minimum scale for the graphics overlay. This controls the minimum scale level the graphics overlay can zoom too.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.Opacity">
            <summary>Get the opacity for the graphics overlay.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.PopupDefinition">
            <summary>Gets the pop-up definition for the graphics overlay.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.Renderer">
            <summary>Get a copy of the graphics overlay's renderer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.RenderingMode">
            <summary>Get the graphic overlay's rendering mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.SceneProperties">
            <summary>Gets the scene properties for the graphics overlay.</summary>
            <remarks>
              You must call RT_LayerSceneProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.SelectionColor">
            <summary>Get selection color.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the graphics overlay has changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.ClearSelection">
            <summary>Deselect all graphics in the graphics overlay.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.GetSelectedGraphics">
            <summary>Returns an array containing all selected graphics in the graphics overlay.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.GraphicQueryResult(System.String)">
            <summary>Deserializes the graphics from a JSON string containing the result of a query.</summary>
            <param name="json">The JSON string with the result of a query.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreGraphicsOverlay)">
            <summary>Compares two graphics overlay objects and returns true if they are equal. Comparison is by reference.</summary>
            <param name="overlay2">A graphics overlay.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsRenderingMode">
            <summary>The different rendering modes for RT_GraphicsOverlayHandle.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsRenderingMode.Dynamic">
            <summary>Dynamic rendering mode - the default. Update graphics as the map zooms and pans in an immediate mode.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGraphicsRenderingMode.Static">
            <summary>
              Static rendering mode. Only update graphics between zoom and pan operations in a retained mode. Use this mode to handle
              large amount of graphics.
            </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGridType">
            <summary>The list of grid types.</summary>
            <remarks>
              This is used to determine which grid is used.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGridType.None">
            <summary>Do not use a grid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGridType.MGRS">
            <summary>A MGRS grid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGridType.Unknown">
            <summary>Unknown grid type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGUID">
            <summary>Defines a guid type.</summary>
            <remarks>
              You need to pass this handle to all guid functions. You will get this handle from various functions and the handle must
              be destroyed from RT_GUID_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreGUID class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreGUID instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.#ctor">
            <summary>Creates a new GUID object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GUID_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GUID_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.#ctor(System.String)">
            <summary>Creates a guid from a string value.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_GUID_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_GUID_destroy on the return value.
            </remarks>
            <param name="guidString">Unique identifier string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.Hash">
            <summary>Calculates the hash value of the given guid.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreGUID)">
            <summary>Returns true if the two guids are equal.</summary>
            <param name="guid2">The second unique identifier.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreGUID.ToCoreString">
            <summary>Returns the guid value as a string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType">
            <summary>*Internal Use* The list of text guidance notification types.</summary>
            <remarks>
              This is used to determine type of text guidance notification.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType.ApproachingManeuverLong">
            <summary>Approaching maneuver long guidance notification type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType.ApproachingManeuverMiddle">
            <summary>Approaching maneuver middle guidance notification type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType.ApproachingManeuverShort">
            <summary>Approaching maneuver short guidance notification type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType.AtManeuver">
            <summary>At maneuver guidance notification type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreGuidanceNotificationType.ApproachingDestination">
            <summary>Approaching destination guidance notification type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer">
            <summary>A hillshade renderer object which is derived from a raster renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all hillshade renderer functions. The handle must be destroyed by calling RT_RasterRenderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreHillshadeRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreHillshadeRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.PrivateCreateFromHandleInternal_CoreHillshadeRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreHillshadeRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreHillshadeRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.#ctor">
            <summary>Creates a hillshade renderer handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.#ctor(System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSlopeType,System.Double,System.Double,System.Int32)">
            <summary>Creates a hillshade renderer handle.</summary>
            <param name="altitude">Altitude angle of the light source.</param>
            <param name="azimuth">Azimuth angle of the light source, measured clockwise from north.</param>
            <param name="nbits">Output bit depth, default is 8-bit.</param>
            <param name="pixelSizeFactor">Pixel size factor, default is 1.</param>
            <param name="pixelSizePower">Pixel size power value, default is 1.</param>
            <param name="slopeType">RT_SlopeType</param>
            <param name="zfactor">Factor to convert z unit to x,y units, default is 1.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.Altitude">
            <summary>Returns the altitude angle in degree.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.Azimuth">
            <summary>Returns the azimuth angle in degree.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.OutputBitDepth">
            <summary>Returns the output bit depth.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.PixelSizeFactor">
            <summary>Returns the pixel size factor.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.PixelSizePower">
            <summary>Returns the pixel size power.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.SlopeType">
            <summary>Returns the slope type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreHillshadeRenderer.Zfactor">
            <summary>Returns the Z factor.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment">
            <summary>The list of possible horizontal alignments.</summary>
            <remarks>
              Specifies how a text symbol should be horizontally aligned.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment.Center">
            <summary>The text is center aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment.Justify">
            <summary>The text is justified.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment.Left">
            <summary>The text is left aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment.Right">
            <summary>The text is right aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment.Unknown">
            <summary>Unknown horizontal alignment.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreHTTPOperation">
            <summary>The list of available HTTP operations.</summary>
            <remarks>
              This is used to determine a request's http operation..
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHTTPOperation.Get">
            <summary>An HTTP GET operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHTTPOperation.Post">
            <summary>An HTTP POST operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHTTPOperation.MultipartPost">
            <summary>An HTTP Multipart POST operation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreHTTPOperation.Unknown">
            <summary>Unknown HTTP operation type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult">
            <summary>Identify result containing an overlay and the identified graphics of that overlay.</summary>
            <remarks>
              You need to pass this handle to identify result functions. It must be destroyed by calling
              RT_IdentifyGraphicsOverlayResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreIdentifyGraphicsOverlayResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreIdentifyGraphicsOverlayResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.Graphics">
            <summary>Get the identify result's list of identified graphics.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyGraphicsOverlayResult.GraphicsOverlay">
            <summary>Get the overlay identify result's overlay</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult">
            <summary>Identify result containing a layer and the identified elements of that layer.</summary>
            <remarks>
              You need to pass this handle to identify result functions. It must be destroyed by calling
              RT_IdentifyLayerResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreIdentifyLayerResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreIdentifyLayerResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.GeoElements">
            <summary>Get the identify result's list of identified graphics.</summary>
            <remarks>
              If there are no geo element results at the layer level (for layers where geo element results are exposed in sublayer
              results), an empty array is returned. The array type depends on the type of objects contained in the layer. The function
              will always return an array containing objects that implement RT_GeoElementInterface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.LayerContent">
            <summary>Get the layer identify result's layer content (a RT_LayerContentInterface)</summary>
            <remarks>
              The element will contain an object that implements RT_LayerContentInterface. This may be either a
              RT_ArcGISSublayerHandle or a RT_LayerHandle.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyLayerResult.SublayerResults">
            <summary>Get the identify layer result's list of sub results.</summary>
            <remarks>
              For layers that do not contain sublayers, this array will be empty.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult">
            <summary>Identify result containing a layer content and the identified popups of that layer content.</summary>
            <remarks>
              You need to pass this handle to identify result functions. It must be destroyed by calling
              RT_IdentifyPopupResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreIdentifyPopupResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreIdentifyPopupResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.LayerContent">
            <summary>Get the identify result's layer content (a RT_LayerContentInterface)</summary>
            <remarks>
              The element will contain an object that implements RT_LayerContentInterface. This may be either a
              RT_ArcGISSublayerHandle or a RT_LayerHandle.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.Popups">
            <summary>Get the identify result's list of identified popups.</summary>
            <remarks>
              If there are no popup results at the layer level (for layers where popup results are exposed in sublayer results), an
              empty array is returned.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreIdentifyPopupResult.SublayerResults">
            <summary>Get the identify popup result's list of sub results.</summary>
            <remarks>
              For layers that do not contain sublayers, this array will be empty.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImage">
            <summary>The Image object.</summary>
            <remarks>
              You need to pass this handle to all Image functions. You will get this handle from various functions and the handle must
              be destroyed from RT_Image_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImage class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImage instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>*Internal Use* Creates a new image object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Image_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Image_destroy on the return value.
            </remarks>
            <param name="data">The byte array containing the data for the image.</param>
            <param name="height">The height of the image.</param>
            <param name="width">The width of the image.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.#ctor(System.String)">
            <summary>*Internal Use* Creates a new image object from a file.</summary>
            <remarks>
              Will open PNG and JPEG images. Use this method to create an object. This object must be destroyed by calling function
              RT_Image_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Image_destroy on the return value.
            </remarks>
            <param name="filePath">The location of the image.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.#ctor(System.Byte[])">
            <summary>*Internal Use* Creates a new image object from a buffer.</summary>
            <remarks>
              Will open PNG and JPEG images. Use this method to create an object. This object must be destroyed by calling function
              RT_Image_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Image_destroy on the return value.
            </remarks>
            <param name="data">The bytes to the image.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImage.Height">
            <summary>*Internal Use* Returns height of image.</summary>
            <remarks>
              Returns the height of the image, or 0 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImage.Width">
            <summary>*Internal Use* Returns width of image.</summary>
            <remarks>
              Returns the width of the image, or 0 if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.GetBuffer">
            <summary>*Internal Use* Returns image data in RGBA.</summary>
            <remarks>
              The byte array that is returned cannot be used after the RT_ImageHandle has been destroyed. The memory is deleted.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.GetEncodedBuffer">
            <summary>*Internal Use* Returns image data in the same format that it was created.</summary>
            <remarks>
              The byte array that is returned cannot be used after the RT_ImageHandle has been destroyed. The memory is deleted.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImage.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>*Internal Use* Check if the images are equal.</summary>
            <remarks>
              Check if the images are equal.
            </remarks>
            <param name="otherImage">The other image.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer">
            <summary>Allows for changes to an image.</summary>
            <remarks>
              You need to pass this handle to all image adjustment layer functions. It represents an instance of the adjustment layer.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageAdjustmentLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageAdjustmentLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.PrivateCreateFromHandleInternal_CoreImageAdjustmentLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageAdjustmentLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageAdjustmentLayer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.Brightness">
            <summary>Returns the brightness of the layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.Contrast">
            <summary>Returns the contrast of the layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageAdjustmentLayer.Gamma">
            <summary>Returns the gamma of the layer.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat">
            <summary>The image formats supported by ArcGIS map services or ArcGIS image services.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.Default">
            <summary>To use service-defined default image format.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.PNG">
            <summary>PNG. Supported in Map Service only.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.PNG8">
            <summary>8-bit PNG. Supported in both Image Service and Map Service.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.PNG24">
            <summary>24bit PNG. Supported in both Image Service and Map Service.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.PNG32">
            <summary>PNG32. Supported in Image Service and Map Service.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.JPG">
            <summary>JPEG. Supported in both Image Service and Map Service.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.JPGPNG">
            <summary>JPG | PNG. Supported in Image Service only.</summary>
            <remarks>
              Note that support for the jpgpng format was added at 10.0. This format returns a JPG if there are no transparent pixels
              in the requested extent, otherwise it returns a PNG.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.BMP">
            <summary>BMP.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.GIF">
            <summary>GIF.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.TIFF">
            <summary>TIFF.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreImageFormat.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement">
            <summary>
              Result object from an identify operation on an image layer It must be destroyed by calling
              RT_ImageLayerGeoElement_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageLayerGeoElement class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageLayerGeoElement instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.Attributes">
            <summary>Gets all attributes of the geo element.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageLayerGeoElement.Geometry">
            <summary>Get geo element geometry</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImageRequest">
            <summary>Represents a request for a dynamic image.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageRequest.PrivateCreateFromHandleInternal_CoreImageRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageRequest instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer">
            <summary>A base class for layers which displays cached maps. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              Same as a RT_LayerHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all image tiled layer functions. The image tiled layer class is derived from the layer class. It must be destroyed by
              calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.PrivateCreateFromHandleInternal_CoreImageTiledLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImageTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImageTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTileInfo)">
            <summary>Creates an image tiled layer object.</summary>
            <remarks>
              Use this method to create an image tiled layer object. This object must be destroyed by calling function
              RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="tileInfo">A tile info object.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.RenderMode">
            <summary>Get the render mode for the image tiled layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.Resampling">
            <summary>
              Get the resampling flag for the image tiled layer. This flag controls if a tile returning 'NoData' can be resampled from
              a coarser tile.
            </summary>
            <remarks>
              The default resampling value for an image tiled layer is true.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.TileInfo">
            <summary>Returns the tile information.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.SetCancelTileRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Layer_Tile)">
            <summary>*Internal Use* Sets the callback to invoke when the layer cancels a tile request.</summary>
            <remarks>
              Only use this callback for user defined layers. This callback will be ignored if the tiled layer is actually a
              RT_ArcGISTiledLayerHandle or a RT_ServiceImageTiledLayerHandle.
            </remarks>
            <param name="cancelTileRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.SetTileRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Layer_Tile)">
            <summary>*Internal Use* Sets the callback to invoke when the layer needs to request a tile.</summary>
            <remarks>
              Only use this callback for user defined layers. This callback will be ignored if the tiled layer is actually a
              RT_ArcGISTiledLayerHandle or a RT_ServiceImageTiledLayerHandle.
            </remarks>
            <param name="tileRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.SetNoDataTile(RuntimeCoreNet.GeneratedWrappers.CoreTileKey)">
            <summary>*Internal Use* Set the tile image which was requested as being a no data tile.</summary>
            <remarks>
              Only use this callback for no data tile. When receiving this response, ArcGIS Runtime won't request the finest tiles.
            </remarks>
            <param name="tileKey">The tile key (level, column, row).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.SetTile(RuntimeCoreNet.GeneratedWrappers.CoreTileKey,System.Byte[])">
            <summary>*Internal Use* Set the tile image which was requested.</summary>
            <remarks>
              This allows you to pass the image data to the layer.
            </remarks>
            <param name="data">The image data for this tile that you are setting.</param>
            <param name="tileKey">The tile key for this tile that you are setting.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImageTiledLayer.SetTileWithResponse(RuntimeCoreNet.GeneratedWrappers.CoreTileKey,RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>*Internal Use* Set the tile image which was requested as being in error.</summary>
            <remarks>
              Only use this callback for user defined layers.
            </remarks>
            <param name="tileKey">The tile key (level, column, row).</param>
            <param name="userDefinedError">The error.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart">
            <summary>Represents an single part of an multipart geometry (polygon or polyline).</summary>
            <remarks>
              This collection is used to represent a part in a RT_MultipartHandle geometry. This is a collection of segments. The
              points that are the vertices's of the segments are also accessible. This is an opaque handle. It must be destroyed by
              calling RT_ImmutablePart_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImmutablePart class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImmutablePart instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.EndPoint">
            <summary>Returns the end point of the last segment in the part. Returns NULL if the collection is empty.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.IsEmpty">
            <summary>Indicates if the part contains no segments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.PointCount">
            <summary>Returns the count of points in the part.</summary>
            <remarks>
              The points in the part are the start and end points of segments. Segments can share a point if the end point of one
              segment matches the start point of the next.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.SegmentCount">
            <summary>Returns the count of segments in the part.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.SpatialReference">
            <summary>Retrieve the spatial reference for the immutable part.</summary>
            <remarks>
              Retrieve the spatial reference for the immutable part. If the collection does not have a spatial reference NULL is
              returned. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error
              handler RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.StartPoint">
            <summary>Returns the start point of the first segment in the part. Returns NULL if the collection is empty.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetEndPointIndexFromSegmentIndex(System.Int64)">
            <summary>For a segment at a specified segment_index the method returns the point index of the segment's end point.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetPoint(System.Int64)">
            <summary>Returns a point at a specified point index.</summary>
            <remarks>
              The points in the part are the start and end points of segments. Segments can share a point if the end point of one
              segment matches the start point of the next.
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetPoints">
            <summary>Returns all the points that are the vertexes of the part.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetSegment(System.Int64)">
            <summary>Gets a segment at a specified segment index.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetSegmentIndexFromEndPointIndex(System.Int64)">
            <summary>
              Converts from a point index to a segment index that uses the given point as an end point. If the point is not an end
              point then a value equivalent to -1 value is returned.
            </summary>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetSegmentIndexFromPointIndex(System.Int64,System.Int64@,System.Int64@)">
            <summary>
              Converts from a point index to a segment index of the start point and another segment index containing the end point. If
              the point is not a start or end point a value equivalent to -1 is set.
            </summary>
            <param name="outEndPointSegmentIndex">(out) This is set to the segment index using the point as an end point. Can be NULL.</param>
            <param name="outStartPointSegmentIndex">(out) This is set to the segment index using the point as a start point. Can be NULL.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetSegmentIndexFromStartPointIndex(System.Int64)">
            <summary>
              Converts from a point index to a segment index that uses the given point as a start point. If the point is not a start
              point then a value equivalent to -1 value is returned.
            </summary>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart.GetStartPointIndexFromSegmentIndex(System.Int64)">
            <summary>For a segment at a specified segment_index the method returns the point index of the segment's start point.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection">
            <summary>Represents immutable collection of parts for a polygon or polyline geometry. Each part is a collection of segments.</summary>
            <remarks>
              Polygons and polyline can have multiple disjoint parts. Each part is represented by a RT_ImmutablePartHandle. A part is
              composed of segments representing the edge of the polygon or polyline. This is an opaque handle. It must be destroyed by
              calling RT_ImmutablePartCollection_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImmutablePartCollection class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImmutablePartCollection instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.IsEmpty">
            <summary>Indicates if the immutable part collection contains no parts.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.Size">
            <summary>Returns the number of parts in the immutable part collection.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.SpatialReference">
            <summary>Retrieve the spatial reference for the immutable part collection.</summary>
            <remarks>
              Retrieve the spatial reference for the immutable part collection. If the collection does not have a spatial reference
              NULL is returned. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the
              error handler RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.GetPart(System.Int64)">
            <summary>
              Returns a part at the specified index in the immutable part collection. A part is represented by a immutable collection
              of segments.
            </summary>
            <param name="index">position to retrieve the part</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePartCollection.IndexOf(RuntimeCoreNet.GeneratedWrappers.CoreImmutablePart)">
            <summary>Retrieves the position of the given part in the immutable part collection</summary>
            <param name="immutablePart">The part you want to find.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection">
            <summary>Represents immutable collection of points.</summary>
            <remarks>
              This collection is used to represent the content of a RT_MultipointHandle geometry. This is an opaque handle. It must be
              destroyed by calling RT_ImmutablePointCollection_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreImmutablePointCollection class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreImmutablePointCollection instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.IsEmpty">
            <summary>Indicates if the immutable point collection contains no points.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.Size">
            <summary>Returns the number of points in the collection.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.SpatialReference">
            <summary>Retrieve the spatial reference for the immutable point collection.</summary>
            <remarks>
              Retrieve the spatial reference for the immutable point collection. If the collection does not have a spatial reference
              NULL is returned. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the
              error handler RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.GetPoint(System.Int64)">
            <summary>Returns a point at the specified index in the collection.</summary>
            <param name="index">The position in the collection.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection.IndexOf(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>
              Retrieves the position of the point in the immutable point collection. The first point that is equal to the supplied
              point is returned.
            </summary>
            <param name="point">The point to find</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreInheritedDomain">
            <summary>A handle that specifies an inherited domain that specifies the valid values for an RT_FieldHandle.</summary>
            <remarks>
              You need to pass this handle to all domain functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Domain_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreInheritedDomain.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreInheritedDomain.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreInheritedDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreInheritedDomain instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreInheritedDomain.PrivateCreateFromHandleInternal_CoreInheritedDomain(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreInheritedDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreInheritedDomain instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreItem">
            <summary>A handle that represents an item.</summary>
            <remarks>
              You need to pass this handle to all items functions. You will get this handle from various functions and the handle must
              be destroyed from RT_Item_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreItem instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.PrivateCreateFromHandleInternal_CoreItem(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreItem instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.AccessInformation">
            <summary>Returns the information on the source of the item and its copyright status.</summary>
            <remarks>
              Returns the information on the source of the item and its copyright status. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Created">
            <summary>Returns the date the item was created.</summary>
            <remarks>
              Returns the date the item was created. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.CustomData">
            <summary>*Internal Use* Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Description">
            <summary>Returns the description of the specified item.</summary>
            <remarks>
              Returns the description of the specified item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Extent">
            <summary>The extent of the item (in WGS84 coordinates).</summary>
            <remarks>
              Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.ItemID">
            <summary>Returns the item ID of the specified item.</summary>
            <remarks>
              Returns the item ID of the specified item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Modified">
            <summary>Returns the date the item was last modified.</summary>
            <remarks>
              Returns the date the item was last modified. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.ObjectType">
            <summary>*Internal Use* Returns the instantiated item type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Snippet">
            <summary>Returns the snippet of the specified item.</summary>
            <remarks>
              Returns a short summary decription of the item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.SpatialReferenceName">
            <summary>Returns the spatial reference name of the specified item.</summary>
            <remarks>
              Returns the coordinate system of the specified item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Tags">
            <summary>Returns the user defined tags that describe the specified item.</summary>
            <remarks>
              Returns the user defined tags that describe the specified item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Thumbnail">
            <summary>Gets the thumbnail of the item.</summary>
            <remarks>
              Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreItem.Title">
            <summary>Returns the title of the specified item.</summary>
            <remarks>
              Returns the title of the specified item. This is the name that's displayed to users and by which they refer to the item.
              Every item must have a title. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.FetchData">
            <summary>Fetches the item's data.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.SetThumbnailWithImage(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>Sets the thumbnail of the item with the specified image.</summary>
            <remarks>
              Will return NULL if an error occurs.
            </remarks>
            <param name="image">The image (can be NULL).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreItem.ToJSON">
            <summary>*Internal Use* Serializes an item to a JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreItemType">
            <summary>The different types of items.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreItemType.Unknown">
            <summary>An unknown item type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreItemType.PortalItem">
            <summary>A portal item object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreItemType.LocalItem">
            <summary>A local item object.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreIterator">
            <summary>Defines an iteratable type.</summary>
            <remarks>
              You need to pass this handle to all iterator functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Iterator_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreIterator class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreIterator instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.HasNext">
            <summary>Tests if the iterator has an element to move on to.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.Next">
            <summary>Returns the next element in the iterator.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreIterator.Reset">
            <summary>Resets the iterator back to it's initial state.</summary>
            <remarks>
              Not all iterators can be reset. If it can't then an exception should be thrown.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreJob">
            <summary>A job represents a long running asynchronous action.</summary>
            <remarks>
              A job can be paused and re-started. A job can involve multiple network requests. You need to pass this handle to all job
              functions. You will get this handle from various functions and the handle must be destroyed from RT_Job_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.PrivateCreateFromHandleInternal_CoreJob(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreJob instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.Error">
            <summary>Returns the an error if one occurred on the job. If no error has occurred then null is returned.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.JobId">
            <summary>Returns the Id of the job.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.JobType">
            <summary>Returns the type of a job.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.Messages">
            <summary>Returns the job's messages.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.ObjectType">
            <summary>*Internal Use* Returns the type of a job.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.ServerJobId">
            <summary>Returns the server job Id of the job.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJob.Status">
            <summary>Returns the status of the job.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.SetJobChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Job_JobChanged)">
            <summary>Sets the function that will be called when the running job changes status or messages.</summary>
            <remarks>
              Sets the function that will be called when the job changes. This is sent as the status or messages change as the job
              progresses.
            </remarks>
            <param name="jobChanged">The function to invoke. pass NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.SetJobDoneCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Job_JobDone)">
            <summary>Sets the function that will be called when the job is done.</summary>
            <remarks>
              A job is done when it has finished with a result, or failed with an error. Canceling a job will also set an error.
              Setting the function to NULL after it has already been set will stop the function from being called.
            </remarks>
            <param name="jobDone">The function to invoke when the job is done. Pass NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the job request is required.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.Cancel">
            <summary>Cancel the job.</summary>
            <remarks>
              The job is canceled and goes into a failure status RT_JobStatus_failed. Jobs on the server cannot be canceled and are
              abandoned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.Pause">
            <summary>Pauses the job</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJob.Start">
            <summary>Resumes the job.</summary>
            <remarks>
              In the C-API when a job is create it needs a call to set RT_Job_setRequestRequiredCallback to be able to send requests.
              Next call to RT_Job_start to start the job executing.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage">
            <summary>A message from a job.</summary>
            <remarks>
              You need to pass this handle to all job message functions. You will get this handle from various functions and the
              handle must be destroyed from RT_JobMessage_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreJobMessage class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreJobMessage instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.Message">
            <summary>Returns the job message's message string.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreJobMessage.Type">
            <summary>Returns the job message's type string.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreJobRequest">
            <summary>Represents a request for a Job.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreJobRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreJobRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreJobRequest.PrivateCreateFromHandleInternal_CoreJobRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreJobRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreJobRequest instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus">
            <summary>Indicates the current status of a job.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus.NotStarted">
            <summary>A job that has not started.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus.Started">
            <summary>A job that has started and is executing.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus.Paused">
            <summary>A job that is paused. Use RT_Job_start to re-start the job.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus.Succeeded">
            <summary>A job that has completed successfully.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobStatus.Failed">
            <summary>A job that has completed and has failed.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreJobType">
            <summary>The different types of job.</summary>
            <remarks>
              Each of the values represents a different type of job.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobType.GenerateGeodatabaseJob">
            <summary>A generate geodatabase job.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobType.SyncGeodatabaseJob">
            <summary>A synchronize geodatabase job.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobType.ExportTileCacheJob">
            <summary>An export tile cache job.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreJobType.EstimateTileCacheSizeJob">
            <summary>An estimate tile cache size job.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLAltitudeMode">
            <summary>The list of grid types.</summary>
            <remarks>
              This is used to determine the KML altitude mode.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLAltitudeMode.ClampToGround">
            <summary>The &lt;altitude&gt; specification is ignored, and the object will be draped over the ground.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLAltitudeMode.RelativeToGround">
            <summary>
              (default) Interprets the &lt;altitude&gt; as a value in meters above the ground. If the point is over water, the
              &lt;altitude&gt; will be interpreted as a value in meters above sea level.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLAltitudeMode.Absolute">
            <summary>Interprets the &lt;altitude&gt; as a value in meters above sea level.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLAltitudeMode.Unknown">
            <summary>Unknown altitude mode.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle">
            <summary>A KML balloon style object.</summary>
            <remarks>
              You can get this handle from RT_KMLFeature_getBalloonStyle once the KML layer is loaded The handle must be destroyed
              from RT_KMLBalloonStyle_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLBalloonStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLBalloonStyle instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.BackgroundColor">
            <summary>Return the KML balloon style's background color.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLBalloonStyle.FormattedText">
            <summary>Returns a formatted textual representation of KML balloon style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorMode">
            <summary>The list of KML color modes.</summary>
            <remarks>
              This is used to determine the KML color mode.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorMode.Normal">
            <summary>No effect on color specified in color style.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorMode.Random">
            <summary>
              Randomize R, G &amp; B of the base color specified in color style with a random linear scale ranging from 00 to FF.
              Alpha is never randomized.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorMode.Unknown">
            <summary>Unknown color mode.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle">
            <summary>A KML color style object.</summary>
            <remarks>
              Specifies a KML feature's color style in terms of color, color_mode. The handle must be destroyed from
              RT_KMLColorStyle_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLColorStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLColorStyle instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.PrivateCreateFromHandleInternal_CoreKMLColorStyle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLColorStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLColorStyle instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.Color">
            <summary>Return the KML color style's color.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.ColorMode">
            <summary>Returns the KML color mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyle.ObjectType">
            <summary>Returns the object type of this handle.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyleType">
            <summary>The list of KML color style types.</summary>
            <remarks>
              This is used to determine KML color style type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyleType.KMLColorStyle">
            <summary>A KML color style.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyleType.KMLLabelStyle">
            <summary>A KML label style.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLColorStyleType.Unknown">
            <summary>Unknown KML color style type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer">
            <summary>A KML Container object.</summary>
            <remarks>
              A KML container element holds one or more KML features and allows the creation of nested hierarchies. The handle must be
              destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLContainer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLContainer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.PrivateCreateFromHandleInternal_CoreKMLContainer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLContainer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLContainer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.KMLListItemType">
            <summary>Returns the conatiner's list item type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.IsOpen">
            <summary>Returns true if the KML container is open, false otherwise.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLContainer.IsPartiallyVisible">
            <summary>Returns true if the KML container is partially visible, false otherwise.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLDocument">
            <summary>A KML Document object.</summary>
            <remarks>
              A KML document is a container for features and styles. The handle must be destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLDocument.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLDocument.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLDocument class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLDocument instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLDocument.PrivateCreateFromHandleInternal_CoreKMLDocument(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLDocument class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLDocument instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature">
            <summary>A KML Feature object.</summary>
            <remarks>
              KML is a file format used to display geographic data (geometric shapes, symbology and attributes). KML uses a tag-based
              structure with nested elements and attributes and is based on the XML standard. The KML files are often distributed in
              KMZ files, which are zipped KML files with a .kmz extension. The handle must be destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLFeature instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.PrivateCreateFromHandleInternal_CoreKMLFeature(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLFeature class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLFeature instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.KMLLabelStyle">
            <summary>Returns the label style of the KML feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.BalloonStyle">
            <summary>Returns the balloon style of the KML feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.CanChangeVisibility">
            <summary>Returns a flag indicating whether the KML feature visibility can be changed.</summary>
            <remarks>
              Returns a flag indicating whether the KML feature visibility can be changed. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.ChildFeatures">
            <summary>Return the KML features's child features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.Highlighted">
            <summary>Checks whether the KML feature is highlighted.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.InstanceId">
            <summary>*Internal Use* Get the instance id of the KMLFeature referenced by the specified RT_KMLFeatureHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.IsVisible">
            <summary>Get the visibility for the KML feature.</summary>
            <remarks>
              Get the visibility for the KML feature.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.Name">
            <summary>Returns the name of the KML feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.ObjectType">
            <summary>Returns the object type of this handle.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.ShowInLegend">
            <summary>Get whether the KML feature participates in the legend.</summary>
            <remarks>
              Get whether the KML feature is shown in the legend.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.SubLayerContents">
            <summary>Get the sub layer contents for the KML feature.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.Symbol">
            <summary>Returns the KML feature's icon symbol.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.Viewpoint">
            <summary>Retrieve the KML feature's viewpoint.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the KML feature have changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.FetchLegendInfos">
            <summary>Fetches the list of legend info for the KML feature.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeature.IsVisibleAtScale(System.Double)">
            <summary>Returns the KML feature's visibility at the specified scale.</summary>
            <remarks>
              Returns the KML feature visibility. Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType">
            <summary>The list of KML feature types.</summary>
            <remarks>
              This is used to determine KML feature type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLDocument">
            <summary>A document KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLFolder">
            <summary>A folder KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLNetworkLink">
            <summary>A network link KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLPlacemark">
            <summary>A placemark KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLPhotoOverlay">
            <summary>A photo overlay KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLGroundOverlay">
            <summary>A ground overlay KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLScreenOverlay">
            <summary>A screen overlay KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.KMLTour">
            <summary>A tour KML feature.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLFeatureType.Unknown">
            <summary>Unknown KML feature type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLFolder">
            <summary>A KML Folder object.</summary>
            <remarks>
              A KML folder is used to arrange other Features hierarchically (Folders, Placemarks, NetworkLinks, or Overlays). A KML
              Feature is visible only if it and all its ancestors are visible. The handle must be destroyed from
              RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFolder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFolder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLFolder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLFolder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLFolder.PrivateCreateFromHandleInternal_CoreKMLFolder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLFolder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLFolder instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry">
            <summary>A KML geometry object.</summary>
            <remarks>
              A KML geometry contains all the KML specific information associated with a Geometry. The handle must be destroyed from
              RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLGeometry class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLGeometry instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.KMLAltitudeMode">
            <summary>Returns the KML altitude mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.IsExtruded">
            <summary>If the KML geometry is extruded.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.Symbol">
            <summary>Returns the KML geometry's symbol.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometry.GetGeometry">
            <summary>Retrieve the geometry for the KML geometry.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonIllegalState - KMLGeometry should have a geometry.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType">
            <summary>The list of KML geometry types.</summary>
            <remarks>
              This is used to determine KML feature type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.None">
            <summary>There is no geometry present.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.Point">
            <summary>A point.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.Polyline">
            <summary>A polyline.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.Polygon">
            <summary>A polygon.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.Model">
            <summary>A model.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.MultiGeometry">
            <summary>A multi-geometry. This is a container for geometries.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLGeometryType.Unknown">
            <summary>Unknown KML geometry type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay">
            <summary>A KML GroundOverlay object.</summary>
            <remarks>
              KML GroundOverlay is an image overlay drapped on to the terrain. The handle must be destroyed from
              RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLGroundOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLGroundOverlay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.PrivateCreateFromHandleInternal_CoreKMLGroundOverlay(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLGroundOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLGroundOverlay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.GetGeometry">
            <summary>Retrieves the geometry for the KML GroundOverlay.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.GetKMLAltitudeMode">
            <summary>Retrieves the altitude mode of the KML GroundOverlay.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLGroundOverlay.GetKMLOverlayExtent">
            <summary>Retrieves the extent of the geometry for KML GroundOverlay.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLLabelStyle">
            <summary>A KML label style object.</summary>
            <remarks>
              Specifies a KML feature's label style in terms of color, color_mode and scale. You can get this handle from
              RT_KMLFeature_getKMLLabelStyle The handle must be destroyed from RT_KMLColorStyle_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLabelStyle.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLabelStyle.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLLabelStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLLabelStyle instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLabelStyle.PrivateCreateFromHandleInternal_CoreKMLLabelStyle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLLabelStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLLabelStyle instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLLabelStyle.Scale">
            <summary>Return the KML label's scale.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer">
            <summary>
              An instance of this class represents a layer that can visualize KML data. It must be destroyed by calling
              RT_Layer_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.PrivateCreateFromHandleInternal_CoreKMLLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.#ctor(System.String)">
            <summary>Creates a KML layer object.</summary>
            <remarks>
              Creates a KML layer. This object must be destroyed by calling function RT_Layer_destroy. If an error occurs the error
              handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="uRI">The location of the KML.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.URI">
            <summary>Get the location of the KML.</summary>
            <remarks>
              Retrieves the URI of the KML.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLLayer.RootFeature">
            <summary>Return the KML layer's root features.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType">
            <summary>The list of KML list item types.</summary>
            <remarks>
              This is used to determine how a KML feature is displayed in a list view.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType.Check">
            <summary>(default) - The KML feature's visibility is tied to its item's checkbox.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType.RadioFolder">
            <summary>When specified for a Container, only one of the Container's items is visible at a time.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType.CheckOffOnly">
            <summary>
              When specified for a Container or Network Link, prevents all items from being made visible at once. The user can turn
              everything in the Container or Network Link off but cannot turn everything on at the same time. This setting is useful
              for Containers or Network Links containing large amounts of data.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType.CheckHideChildren">
            <summary>
              Use a normal checkbox for visibility but do not display the Container or Network Link's children in the list view. A
              checkbox allows the user to toggle visibility of the child objects in the viewer.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLListItemType.Unknown">
            <summary>Unknown KML list item type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink">
            <summary>A KML NetworkLink object.</summary>
            <remarks>
              A KML NetworkLink is a reference to a KML file or KMZ archive on a local or remote network. The handle must be destroyed
              from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLNetworkLink class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLNetworkLink instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.PrivateCreateFromHandleInternal_CoreKMLNetworkLink(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLNetworkLink class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLNetworkLink instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.KMLListItemType">
            <summary>Returns the network link's list item type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.IsOpen">
            <summary>Returns true if the network link is open, false otherwise.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.IsPartiallyVisible">
            <summary>Returns true if the network link is partially visible, false otherwise.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.RefreshStatus">
            <summary>Returns the network link's refresh status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLink.SetKMLNetworkLinkEventCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_KMLNetworkLinkEventListener_OnRefreshStatusChanged)">
            <summary>Sets the callback that gets invoked when the network link's refresh staus changes.</summary>
            <param name="statusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLinkRefreshStatus">
            <summary>Specifies the condition a network link is in while refreshing.</summary>
            <remarks>
              This is used to determine when to fetch and update KML features.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLinkRefreshStatus.Error">
            <summary>This status is returned when the network link could not be reached</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLinkRefreshStatus.Done">
            <summary>This status is returned when the network link is done refreshing successfully.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLinkRefreshStatus.Fetching">
            <summary>This status is returned when the refreshing is in process</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreKMLNetworkLinkRefreshStatus.Unknown">
            <summary>The refresh status is unknown.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLOverlay">
            <summary>A KML Overlay object.</summary>
            <remarks>
              KML Overlay is the base type for image overlays drawn on the planet surface or on the screen. The handle must be
              destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLOverlay.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLOverlay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLOverlay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLOverlay.PrivateCreateFromHandleInternal_CoreKMLOverlay(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLOverlay instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark">
            <summary>A KML Placemark object.</summary>
            <remarks>
              A KML Placemark is a KML Feature with associated Geometry. The handle must be destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLPlacemark class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLPlacemark instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.PrivateCreateFromHandleInternal_CoreKMLPlacemark(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLPlacemark class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLPlacemark instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.KMLGeometryType">
            <summary>The type of the geometry in the KML placemark.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.GetGeometry">
            <summary>Retrieve the geometry for the KML placemark.</summary>
            <remarks>
              For non multi-geometry this will return a point, polyline or polygon geometry. For a multi-geometry not having a
              specified point, it will return the center of the geometry extent. For a multi-geometry with a point geometries, it will
              return first point in the collection.
              Error Types: RT_ErrorType_commonIllegalState - KMLPlacemark should have a geometry.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.GetKMLGeometries">
            <summary>Retrieves the KML geometries for the KML placemark.</summary>
            <remarks>
              Returns a collection of RT_KMLGeometryHandle. The collection will contain one RT_KMLGeometryHandle for non multi-
              geometry.
              Error Types: RT_ErrorType_commonIllegalState - KMLPlacemark should have a geometry.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLPlacemark.GetKMLGeometryExtent">
            <summary>Retrieves the extent of the geometry for KML placemark.</summary>
            <remarks>
              Creates the extent of the geometry associated with the KML placemark. For multi-geometry it will create union of of all
              geometries in the multi-geometry.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreKMLScreenOverlay">
            <summary>A KML ScreenOverlay object.</summary>
            <remarks>
              KML ScreenOverlay is an image overlay fixed to the screen. ScreenOverlays may be used for compasses, logos and heads-up
              displays. The handle must be destroyed from RT_KMLFeature_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLScreenOverlay.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLScreenOverlay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLScreenOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLScreenOverlay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreKMLScreenOverlay.PrivateCreateFromHandleInternal_CoreKMLScreenOverlay(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreKMLScreenOverlay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreKMLScreenOverlay instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo">
            <summary>A handle that defines a label definition for a given scale range.</summary>
            <remarks>
              You need to pass this handle to all label class functions. You will get this handle from various functions and the
              handle must be destroyed from RT_LabelingInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLabelingInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLabelingInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.LabelExpression">
            <summary>Gets the label expression.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.LabelPlacement">
            <summary>Gets the label placement.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.MaxScale">
            <summary>Sets the maximum scale of this label class.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.MinScale">
            <summary>Gets the minimum scale of this label class.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.Symbol">
            <summary>Gets the symbol of the label class.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.UseCodedValues">
            <summary>Gets if the label class should use coded values.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLabelingInfo.Where">
            <summary>Gets the label class's where clause.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement">
            <summary>An enumeration of labeling placement options.</summary>
            <remarks>
              This is used to determine where the label for a feature should be positioned.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.Unknown">
            <summary>Unknown unit of time.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineAboveAfter">
            <summary>Line above after</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineAboveAlong">
            <summary>Line above along</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineAboveBefore">
            <summary>Line above before</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineAboveEnd">
            <summary>Line above end</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineAboveStart">
            <summary>Line above start</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineBelowAfter">
            <summary>Line below after</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineBelowAlong">
            <summary>Line below along</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineBelowBefore">
            <summary>Line below before</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineBelowEnd">
            <summary>Line below end</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineBelowStart">
            <summary>Line below start</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineCenterAfter">
            <summary>Line center after</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineCenterAlong">
            <summary>Line center along</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineCenterBefore">
            <summary>Line center before</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineCenterEnd">
            <summary>Line center end</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.LineCenterStart">
            <summary>Line center start</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointAboveCenter">
            <summary>Point above center</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointAboveLeft">
            <summary>Point above left</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointAboveRight">
            <summary>Point above right</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointBelowCenter">
            <summary>Point below center</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointBelowLeft">
            <summary>Point below left</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointBelowRight">
            <summary>Point below right</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointCenterCenter">
            <summary>Point center center</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointCenterLeft">
            <summary>Point center left</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PointCenterRight">
            <summary>Point center right</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLabelingPlacement.PolygonAlwaysHorizontal">
            <summary>Polygon always horizontal</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayer">
            <summary>A base class for all layers.</summary>
            <remarks>
              You need to pass this handle to all layer functions. It represents an instance of the layer. The handle must be
              destroyed from RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.PrivateCreateFromHandleInternal_CoreLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLayer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.AttributionText">
            <summary>Get the attribution text for the layer.</summary>
            <remarks>
              Get the attribution text for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.CanChangeVisibility">
            <summary>Returns a flag indicating whether the layer visibility can be changed.</summary>
            <remarks>
              Returns a flag indicating whether the layer visibility can be changed. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Description">
            <summary>Get the description for the layer.</summary>
            <remarks>
              Get the description for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.FullExtent">
            <summary>Returns the full extent of the layer within it's spatial reference.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Id">
            <summary>Returns an id uniquely identifying the layer instance.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.IsVisible">
            <summary>Get the visibility for the layer.</summary>
            <remarks>
              Get the visibility for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Item">
            <summary>Get the item the layer has been created from.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.LoadStatus">
            <summary>Returns the current load status of the layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.MaxScale">
            <summary>Get the maximum scale for the layer.</summary>
            <remarks>
              Get the maximum scale for the layer. This controls the maximum scale level the layer can zoom too.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.MinScale">
            <summary>Get the minimum scale for the layer.</summary>
            <remarks>
              Get the minimum scale for the layer. This controls the minimum scale level the layer can zoom too.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Name">
            <summary>Get the name for the layer.</summary>
            <remarks>
              Get the name for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.ObjectType">
            <summary>Get the type of the layer.</summary>
            <remarks>
              Get the type of the layer object.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Opacity">
            <summary>Get the opacity for the layer.</summary>
            <remarks>
              Get the opacity for the layer.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.ShowInLegend">
            <summary>Get whether the layer participates in the legend.</summary>
            <remarks>
              Get whether the layer is shown in the legend.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SpatialReference">
            <summary>Returns the spatial reference of the layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SubLayerContents">
            <summary>Get the sub layer contents for the layer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the layer is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the layer's load status has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback to invoke when the layer needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the layer have changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.CancelLoad">
            <summary>Cancel loading the layer.</summary>
            <remarks>
              Cancels any outstanding requests that the layer has sent. If the layer is in the RT_LoadStatus_loading state then the
              RT_LoadStatus and RT_ErrorHandle will be set to RT_LoadStatus_failedToLoad and RT_ErrorType_commonUserCancelled and
              RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Clone">
            <summary>Copies a layer.</summary>
            <remarks>
              Clones a layer. RT_Layer_setRequestRequiredCallback will not be set.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.FetchLegendInfos">
            <summary>Fetches the list of legend info for the layer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.GetHash">
            <summary>Gets the hash value of the layer.</summary>
            <remarks>
              Get the hash value of the layer.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.InvalidId">
            <summary>Returns the value that indicates a bad id value.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreLayer)">
            <summary>Check if the layers are equal.</summary>
            <remarks>
              Check if the layers are equals.
            </remarks>
            <param name="otherLayer">The other layer.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.IsVisibleAtScale(System.Double)">
            <summary>Returns the layer's visibility at the specified scale.</summary>
            <remarks>
              Returns the layer visibility. Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.Load">
            <summary>Start the process of getting all the required information.</summary>
            <remarks>
              Loads the layer information. Load will only try loading the object if the load status is RT_LoadStatus_notLoaded. If the
              object is not in the RT_LoadStatus_notLoaded state the object will do nothing and the RT_Loadable_doneLoading_fn
              function will be called. You must implement RT_Request_requestRequired_fn if the layer requires additional information.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayer.RetryLoad">
            <summary>Retry loading the layer.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the layer is in the failed to load state. Does nothing if the layer
              is in any other state.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties">
            <summary>provides access to scene specific properties.</summary>
            <remarks>
              Scene properties can be retrieved from the RT_GraphicsOverlayHandle and used to set scene specific properties defining
              the behavior in 3D It must be destroyed by calling RT_LayerSceneProperties_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLayerSceneProperties class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLayerSceneProperties instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.#ctor">
            <summary>Creates a new scene view properties object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_LayerSceneProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSurfacePlacement)">
            <summary>Creates a new scene view properties object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_LayerSceneProperties_destroy on the return value.
            </remarks>
            <param name="surfacePlacement">to apply to the scene view properties RT_SurfacePlacement</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerSceneProperties.SurfacePlacement">
            <summary>Gets the Suface placement form the Scene Properties.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo">
            <summary>Metadata about a Layer or Sublayers support for time.</summary>
            <remarks>
              It contains various information needed to be able to perform time based queries such as the time fields, the native time
              reference and the time extent.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLayerTimeInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLayerTimeInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.EndTimeField">
            <summary>Gets the name of the field that contains end time for each feature in the layer.</summary>
            <remarks>
              This is available for feature data that has a start and end time stored in two separate fields, where a feature's time
              is valid for a duration between the start time and the end time.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.HasLiveData">
            <summary>Indicates whether the service has live data or not.</summary>
            <remarks>
              If true, export and identify operations will default the time extent to start time = (current server time - time
              interval), end time = current server time.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.StartTimeField">
            <summary>Gets the name of the field that contains the start time for each feature in the layer.</summary>
            <remarks>
              This is available for feature data that has time stored in either a single field where a feature's time is valid for an
              instant in time, or in two fields where a feature's time is valid for a duration between the start time and the end
              time.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.TimeExtent">
            <summary>Gets the time extent for all the data in the layer.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.TimeInterval">
            <summary>Gets the time interval of the data in the layer in the defined time units.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.TimeReference">
            <summary>Gets information about the time reference used for time values in the layer.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.TimeUnit">
            <summary>Gets the unit in which the time interval is measured.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerTimeInfo.TrackIdField">
            <summary>Gets the field name that defines the track ID.</summary>
            <remarks>
              Values in the track ID field uniquely identify individual objects to allow observations of the same object at different
              times to be represented by different features in the layer.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayerType">
            <summary>The list of layer types.</summary>
            <remarks>
              This is used to determine the layer type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.LocalTiledLayer">
            <summary>A local tiled layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ImageTiledLayer">
            <summary>An image tiled layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ServiceImageTiledLayer">
            <summary>
              
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ArcGISMapImageLayer">
            <summary>An ArcGIS Map Image layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ArcGISTiledLayer">
            <summary>An ArcGIS Tiled layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.FeatureLayer">
            <summary>A feature layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.KMLLayer">
            <summary>A KML layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.BingMapLayer">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.RasterLayer">
            <summary>A raster layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.UnsupportedLayer">
            <summary>An unsupported layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.MobileBasemapLayer">
            <summary>A Mobile Basemap Layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ArcGISVectorTiledLayer">
            <summary>A vector tiled layer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.ArcGISSceneLayer">
            <summary>An ArcGIS Scene layer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerType.UnknownLayer">
            <summary>Unknown layer type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState">
            <summary>A layer view state object.</summary>
            <remarks>
              This object allows you to know the current state of a layer in a view. This is an opaque handle. It must be destroyed by
              calling RT_LayerViewState_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLayerViewState class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLayerViewState instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.Error">
            <summary>Retrieve the layer view error from the layer view state.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewState.Status">
            <summary>Retrieve the layer view status from the layer view state.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus">
            <summary>The different layer status in the Geo view.</summary>
            <remarks>
              This status is used typically for determining if a layer is displaying or not, with more details why, in a view. The
              layer view status is a flags enumeration, meaning a layer can have multiple states. It could for instance be both
              RT_LayerViewStatus_notVisible and RT_LayerViewStatus_outOfScale, or RT_LayerViewStatus_notVisible and
              RT_LayerViewStatus_loading. This means your layer list in a table of contents (TOCs) could use the status to both
              determine whether to gray out the layer, and also show a spinning loading icon. However a layer status of
              RT_LayerViewStatus_active is exclusive and will never be reported together with other statuses. For instance it can't
              both be RT_LayerViewStatus_active and RT_LayerViewStatus_notVisible. It's important to note that the benefit here over
              just checking layer visibility and scale ranges, is that also parent layers are taken into account - i.e. if the group
              layer is out of scale range or off. This greatly simplifies the code needed for building table TOCs that update with the
              map view.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.Active">
            <summary>= 1, The layer in the view is active. Is exclusive and will never be reported together with other statuses.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.NotVisible">
            <summary>= 2, The layer in the view is not visible.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.OutOfScale">
            <summary>= 4, The layer in the view is out of scale.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.Loading">
            <summary>= 8, The layer in the view is loading.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.Error">
            <summary>= 16, The layer in the view has an error.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLayerViewStatus.Unknown">
            <summary>= -1, An unknown status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo">
            <summary>This object represents a legend item.</summary>
            <remarks>
              You need to pass this handle to all legend info functions. You can get this handle from the FetchLegendInfos method of
              objects that implements the LayerContent interface (e.g. RT_ArcGISSublayer_fetchLegendInfos). The handle must be
              destroyed from RT_LegendInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLegendInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLegendInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.Name">
            <summary>Returns the name of the legend item.</summary>
            <remarks>
              Returns the name of the legend item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.Symbol">
            <summary>Returns the symbol of a legend item.</summary>
            <remarks>
              Returns the symbol of the legend item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.GetHash">
            <summary>Gets the hash value of the legend item.</summary>
            <remarks>
              Get the hash value of the legend item. Will return 0 if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreLegendInfo)">
            <summary>Check if 2 legend items are equal.</summary>
            <remarks>
              Check legend items are equal. Will return false if an error occurs.
            </remarks>
            <param name="info2">The 2nd legend item to check to see if equal to the 1st legend item.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail">
            <summary>This object represents a level of detail (LOD) in a tile scheme.</summary>
            <remarks>
              You need to pass this handle to all LOD functions. You can get this handle from RT_TileInfo_getLevelsOfDetail. The
              handle must be destroyed from RT_LevelOfDetail_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLevelOfDetail class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLevelOfDetail instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a new level of detail (LOD) handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_LevelOfDetail_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_LevelOfDetail_destroy on the return value.
            </remarks>
            <param name="level">The level of the LOD.</param>
            <param name="resolution">The resolution of the LOD.</param>
            <param name="scale">The scale of the LOD.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.Level">
            <summary>Returns the level of the level of detail.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.Resolution">
            <summary>Returns the resolution of the level of detail.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLevelOfDetail.Scale">
            <summary>Returns the scale of the level of detail.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLicense">
            <summary>Documentation not found</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLicense.Expiry">
            <summary>Will return the expiry date of a license set with RT_License_setLicense.</summary>
            <remarks>
              Will return the expiry date of a license set with RT_License_setLicense.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLicense.LicenseLevel">
            <summary>Get the current license level set in the application.</summary>
            <remarks>
              Get the current license level set in the application.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLicense.LocalServerToken">
            <summary>*Internal Use* Use this to get a license string to use with local server.</summary>
            <remarks>
              Use this to get a license string to use with local server. This should not be exposed to the public.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLicense.GetLicenseInfo(RuntimeCoreNet.GeneratedWrappers.CoreLicenseOnPremise,System.Int64)">
            <summary>Retrieve license info.</summary>
            <remarks>
              Get or generate a license info string.
            </remarks>
            <param name="expiry">When the license expires.</param>
            <param name="isOnPremise">Is the license info on premise or not.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLicense.ResetToBasic">
            <summary>Use this to set the license level back to Basic.</summary>
            <remarks>
              Use this to set the license level back to Basic.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLicense.SetBetaWatermark(System.Boolean)">
            <summary>*Internal Use* This will override the license watermark text with the beta text info.</summary>
            <remarks>
              This will override the license watermark text with the beta text info.  true the water mark will always appear even if
              you set a license   false (default) the water mark will not appear. The developer license will appear if a license is
              not set.
            </remarks>
            <param name="set">Set to true if you wish the beta watermark to appear, false if you wish the license level text to appear.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLicense.SetLicense(System.String)">
            <summary>License an application for standard functionality using a standard ESRI license string.</summary>
            <remarks>
              License an application for standard functionality using a standard ESRI license string.
              Non-overloaded method: SetLicense
            </remarks>
            <param name="licenseString">The standard ESRI license string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLicense.SetLicenseInfo(System.String)">
            <summary>License an application for standard functionality using a license info string.</summary>
            <remarks>
              License an application for standard functionality using a license info string. A license info string can be obtained
              from a portal for the current logged in user by calling RT_License_getLicenseInfo. The license info instance string is
              only valid for 30 days so the user will be required to log into the portal again when this expires. This method will
              return either Valid, Invalid, Expired (if the user's subscription on the portal has expired).
            </remarks>
            <param name="licenseInfoString">The standard ESRI license info string.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLicenseLevel">
            <summary>The different license levels.</summary>
            <remarks>
              Each of different license levels.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseLevel.Developer">
            <summary>Developer mode: full functionality but with a water marked map.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseLevel.Basic">
            <summary>Basic mode: no water mark and reduced functionality.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseLevel.Standard">
            <summary>Standard mode: full functionality.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLicenseOnPremise">
            <summary>The different license levels.</summary>
            <remarks>
              Each of the possible on premise options.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseOnPremise.No">
            <summary>The license info is not on premise.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseOnPremise.Yes">
            <summary>The license info is on premise.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLicenseResult">
            <summary>The different license results.</summary>
            <remarks>
              Each of different license results.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseResult.Invalid">
            <summary>License is invalid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseResult.Expired">
            <summary>License has expired.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseResult.LoginRequired">
            <summary>
              A license generated from LicenseInfo has expired, the user will need to log in to the portal again and acquire a new
              LicenseInfo instance.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLicenseResult.Valid">
            <summary>License is valid.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLightingMode">
            <summary>Various modes of lighting that can be applied to a scene view.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLightingMode.NoLight">
            <summary>No lighting.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLightingMode.Light">
            <summary>Applies lighting with no shadows cast from terrain and 3D models.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLightingMode.LightAndShadows">
            <summary>Applies lighting with shadows cast from terrain and 3D models.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit">
            <summary>Defines a linear unit of measurement.</summary>
            <remarks>
              Same as a RT_UnitHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all linear unit functions. The linear unit class is derived from the unit class. It must be destroyed by calling
              RT_Unit_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLinearUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLinearUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.PrivateCreateFromHandleInternal_CoreLinearUnit(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLinearUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLinearUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId)">
            <summary>Creates a unit given it's known id.</summary>
            <remarks>
              Creates a unit given it's known id. This object must be destroyed by calling function RT_Unit_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Unit_destroy on the return value.
            </remarks>
            <param name="unitId">The known id of the unit.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreAreaUnit)">
            <summary>Creates an linear unit given an area unit.</summary>
            <remarks>
              Creates a unit given an area unit. This object must be destroyed by calling function RT_Unit_destroy. If an error occurs
              the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Unit_destroy on the return value.
            </remarks>
            <param name="areaUnit">The area unit.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.LinearUnitId">
            <summary>Gets the RT_LinearUnitId of the given Linear unit.</summary>
            <remarks>
              If an error occurs then RT_LinearUnitId_unknown is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.ConvertFrom(RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.Double)">
            <summary>Converts a value in another UOM into this UOM.</summary>
            <param name="fromUnit">The UOM to convert from.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.ConvertTo(RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit,System.Double)">
            <summary>Converts a value in this UOM into another UOM.</summary>
            <param name="toUnit">The UOM to convert to.</param>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.FromMeters(System.Double)">
            <summary>Converts a meter value to this UOM.</summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnit.ToMeters(System.Double)">
            <summary>Converts a value in this UOM to meters.</summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId">
            <summary>Defines a list of the most commonly-used units of linear measurement.</summary>
            <remarks>
              These values can be used to create instances RT_UnitHandle, as an alternative to using well-known IDs (WKIDs). In
              addition to the units in this enumeration, you can also use less commonly-used units, by passing a WKID of a linear unit
              to the inherited RT_Unit_fromUnitId factory method. The function RT_Unit_getUnitId returns the WKID of the unit.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Unknown">
            <summary>
              Indicates that the unit of linear measurement is unknown. This value may be returned from an LinearUnit created from a
              WKID of a less commonly used unit of measurement that does not have an equivalent value in this enumeration.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Centimeters">
            <summary>Indicates a linear measurement in centimeters. This unit has a WKID of 1033.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Feet">
            <summary>Indicates a linear measurement in feet. This unit has a WKID of 9002.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Inches">
            <summary>Indicates a linear measurement in inches. This unit has a WKID of 109008.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Kilometers">
            <summary>Indicates a linear measurement in kilometers. This unit has a WKID of 9036.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Meters">
            <summary>Indicates a linear measurement in meters. This unit has a WKID of 9001.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Miles">
            <summary>Indicates a linear measurement in statute miles. This unit has a WKID of 9093.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Millimeters">
            <summary>Indicates a linear measurement in millimeters. This unit has a WKID of 1025.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.NauticalMiles">
            <summary>Indicates a linear measurement in nautical miles. This unit has a WKID of 9030.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLinearUnitId.Yards">
            <summary>Indicates a linear measurement in yards. This unit has a WKID of 9096.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment">
            <summary>A line segment represents a straight line from its start to end point. It is derived from a segment object.</summary>
            <remarks>
              Same as a RT_SegmentHandle. Changing type just to make it clear you get back a derived type. It must be destroyed by
              calling RT_Segment_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLineSegment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLineSegment instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.PrivateCreateFromHandleInternal_CoreLineSegment(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLineSegment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLineSegment instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates a line segment based on two points.</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. This object must be
              destroyed by calling function RT_Segment_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="endPoint">The end point.</param>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a line segment based on two points and a spatial reference.</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. The spatial reference
              parameter is used if the points have a NULL spatial reference. If more than one spatial reference is supplied they must
              all be equal. This object must be destroyed by calling function RT_Segment_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="endPoint">The end point.</param>
            <param name="spatialReference">A spatial reference</param>
            <param name="startPoint">The start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a line segment based on coordinates</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. This object must be
              destroyed by calling function RT_Segment_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="xEnd">The X coordinate of end point.</param>
            <param name="xStart">The X coordinate of start point.</param>
            <param name="yEnd">The Y coordinate of end point.</param>
            <param name="yStart">The Y coordinate of start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a line segment based on coordinates</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. This object must be
              destroyed by calling function The spatial reference parameter is used if the point's have a NULL spatial reference. If
              more than one spatial reference is supplied they must all be equal. RT_Segment_destroy. If an error occurs the error
              handler RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference</param>
            <param name="xEnd">The X coordinate of end point.</param>
            <param name="xStart">The X coordinate of start point.</param>
            <param name="yEnd">The Y coordinate of end point.</param>
            <param name="yStart">The Y coordinate of start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a line segment based on 3D coordinates</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. This object must be
              destroyed by calling function RT_Segment_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="xEnd">The X coordinate of end point.</param>
            <param name="xStart">The X coordinate of start point.</param>
            <param name="yEnd">The Y coordinate of end point.</param>
            <param name="yStart">The Y coordinate of start point.</param>
            <param name="zEnd">The Z coordinate of end point.</param>
            <param name="zStart">The Z coordinate of start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a line segment based on 3D coordinates and a spatial reference</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. The spatial reference
              parameter is used if the point's have a NULL spatial reference. If more than one spatial reference is supplied they must
              all be equal. This object must be destroyed by calling function RT_Segment_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference</param>
            <param name="xEnd">The X coordinate of end point.</param>
            <param name="xStart">The X coordinate of start point.</param>
            <param name="yEnd">The Y coordinate of end point.</param>
            <param name="yStart">The Y coordinate of start point.</param>
            <param name="zEnd">The Z coordinate of end point.</param>
            <param name="zStart">The Z coordinate of start point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSegment.CreateLineAtAngleFromStartPoint(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double)">
            <summary>Creates a line segment of the specified length and angle from a given start point.</summary>
            <remarks>
              Use this method to create a line segment. The represents a straight line between two points. the spatial reference of
              the point is used to determine the segment's spatial reference. The angle is specified in radians relative to the X axis
              The length is in the units of the spatial reference. This object must be destroyed by calling function
              RT_Segment_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Segment_destroy on the return value.
            </remarks>
            <param name="angleRadians">The angle of the line realtive to the X axis. Units are radians.</param>
            <param name="length">The length of the line</param>
            <param name="startPoint">The start point of the line segment</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol">
            <summary>A base class for line symbols. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              Line symbols are used to display those graphics which are based on a polyline geometry. Same as a RT_SymbolHandle.
              Changing type just to make it clear you get back a derived type. You need to pass this handle to all line symbol
              functions. The line symbol class is derived from the symbol class. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLineSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.PrivateCreateFromHandleInternal_CoreLineSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLineSymbol instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.AntiAlias">
            <summary>Get the anti-alias setting of the line symbol.</summary>
            <remarks>
              Get the anti-alias setting of the line symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.Color">
            <summary>Get the color for the line symbol.</summary>
            <remarks>
              Get the color for the line symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.Width">
            <summary>Get the width of the line symbol.</summary>
            <remarks>
              Get the width of the line symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol)">
            <summary>Check if 2 LineSymbols are equal.</summary>
            <remarks>
              Check LineSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="lineSymbol2">The 2nd LineSymbol object to check to see if equal to the 1st LineSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage">
            <summary>A handle that represents a loadable image.</summary>
            <remarks>
              You need to pass this handle to all loadable images functions. You will get this handle from various functions and the
              handle must be destroyed from RT_LoadableImage_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLoadableImage class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLoadableImage instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>*Internal Use* Creates a loadable image from an image.</summary>
            <remarks>
              This object must be destroyed by calling function RT_LoadableImage_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_LoadableImage_destroy on the return value.
            </remarks>
            <param name="image">The image.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.#ctor(System.String)">
            <summary>*Internal Use* Creates a loadable image from an URI.</summary>
            <remarks>
              This object must be destroyed by calling function RT_LoadableImage_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_LoadableImage_destroy on the return value.
            </remarks>
            <param name="uri">The URI to the loadable image.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.URI">
            <summary>Gets the URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.Image">
            <summary>Gets the image.</summary>
            <remarks>
              Image is NULL while the loadable image is not loaded.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.Load">
            <summary>Loads the specified loadable image.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadableImage.RetryLoad">
            <summary>Retry loading the loadable image.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLoadRequest">
            <summary>Represents a request for JSON data.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLoadRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLoadRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLoadRequest.PrivateCreateFromHandleInternal_CoreLoadRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLoadRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLoadRequest instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus">
            <summary>The load status for the object.</summary>
            <remarks>
              This is used to determine the status of an object that is loadable.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus.Loaded">
            <summary>The object is fully loaded and ready to use.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus.Loading">
            <summary>The object is currently being loaded and some functionality may not work.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus.FailedToLoad">
            <summary>The object failed to load and some functionality may not work.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus.NotLoaded">
            <summary>The object is not loaded and some functionality may not work.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLoadStatus.Unknown">
            <summary>Unknown load state. Only used if an error occurs and we have to return a value. Should not expose it.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem">
            <summary>A handle that represents a local item.</summary>
            <remarks>
              You need to pass this handle to all local items functions. You will get this handle from various functions and the
              handle must be destroyed from RT_Item_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalItem instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.PrivateCreateFromHandleInternal_CoreLocalItem(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalItem instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.OriginalPortalItemID">
            <summary>Returns the original portal item ID.</summary>
            <remarks>
              Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.Path">
            <summary>Returns the local item path.</summary>
            <remarks>
              Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocalItem.Type">
            <summary>Returns the local item type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocalItemType">
            <summary>An enumeration of various types of local items.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocalItemType.Unknown">
            <summary>An unknown local item type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocalItemType.MobileMap">
            <summary>A mobile map</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocalItemType.MobileScene">
            <summary>A mobile scene</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocalItemType.MobileMapPackage">
            <summary>A mobile map package</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource">
            <summary>A class defines generic container for localized resources such as localized strings for particular language.</summary>
            <remarks>
              Allows to get value of any localized resource via callbacks. Should be passed as [in,out] parameter to resources
              callbacks. You need to pass this handle to all loadable resource functions. It represents an instance of a localized
              resource. This is an opaque handle. It must be destroyed by calling RT_LocalizedResource_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalizedResource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalizedResource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.GetValue">
            <summary>Gets value of the localized resource.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResource.SetValue(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Sets value of the localized resource.</summary>
            <param name="value">The localized resource value.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources">
            <summary>A class defines generic interface to load localized resources such as localized strings for particular language.</summary>
            <remarks>
              This interface should be implemented and cosumed by SDK which manages all resources in a most efficient way. The runtime
              core components should use this interface to load localized resources to pass them back to SDK side. You need to pass
              this handle to all localized resources functions. It represents an instance of a localized resources. This is an opaque
              handle. It must be destroyed by calling RT_LocalizedResources_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalizedResources class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalizedResources instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.#ctor">
            <summary>Creates a localized resources object.</summary>
            <remarks>
              Create a localized resources object. This object must be destroyed by calling function RT_LocalizedResources_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.SetGetCurrentDecimalSeparatorCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocalizedResources_GetCurrentDecimalSeparator)">
            <summary>Sets get current decimal separator callback.</summary>
            <remarks>
              The callback should return a decimal separator string according to current locale settings. This is used by driving
              directions engine and navigation component to format distance strings.
            </remarks>
            <param name="getCurrentDecimalSeparator">The callback function for retrieving current decimal separator.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.SetGetCurrentLanguageCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocalizedResources_GetCurrentLanguage)">
            <summary>Sets get current language callback.</summary>
            <remarks>
              The callback should return a string using language identifier retrieved from corresponding list of supported language
              identifiers.
            </remarks>
            <param name="getCurrentLanguage">The callback function for retrieving current language.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources.SetGetSupportedLanguagesCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocalizedResources_GetSupportedLanguages)">
            <summary>Sets get supported languages callback.</summary>
            <remarks>
              The callback should return at least one language id in form "ll-CC" where "ll" is a language identifier and "CC" is a
              country identifier.
            </remarks>
            <param name="getSupportedLanguages">The callback function for retrieving supported languages.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer">
            <summary>A super class for all local tiled layers that fetch map tiles from a local source.</summary>
            <remarks>
              Same as a RT_LayerHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all local tiled layer functions. The local tiled layer class is derived from the tiled layer class. It must be
              destroyed by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.PrivateCreateFromHandleInternal_CoreLocalTiledLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocalTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocalTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTileInfo)">
            <summary>Creates a local tile layer object.</summary>
            <remarks>
              Use this method to create a local tile layer object. This object must be destroyed by calling function RT_Layer_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="tileInfo">A tile info object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.SetCancelTileRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Layer_Tile)">
            <summary>Sets the callback to invoke when the layer cancels a tile request.</summary>
            <param name="cancelTileRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.SetTileRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Layer_Tile)">
            <summary>Sets the callback to invoke when the layer needs to request a tile.</summary>
            <param name="tileRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.SetTile(RuntimeCoreNet.GeneratedWrappers.CoreTileKey,System.Byte[])">
            <summary>Set the tile image which was requested.</summary>
            <remarks>
              This allows you to pass the image data to the layer.
            </remarks>
            <param name="data">The image data for this tile that you are setting.</param>
            <param name="tileKey">The tile key for this tile that you are setting.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocalTiledLayer.SetTileWithResponse(RuntimeCoreNet.GeneratedWrappers.CoreTileKey,RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>Set the tile image which was requested as being in error.</summary>
            <param name="tileKey">The tile key (level, column, row).</param>
            <param name="userDefinedError">The error.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocation">
            <summary>A location data object.</summary>
            <remarks>
              This object contains a location data, including its position point, velocity, accuracy, course etc. This is an opaque
              handle. It must be destroyed by calling RT_Location_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocation.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocation.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocation.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocation.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocation class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocation instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocation.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Create a location object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Location_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Location_destroy on the return value.
            </remarks>
            <param name="course">A float64 number</param>
            <param name="horizontalAccuracy">A float64 number</param>
            <param name="lastKnown">A boolean</param>
            <param name="pointHandle">A point geometry object.</param>
            <param name="velocity">A float64 number</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocation.Course">
            <summary>Returns the course of the location.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocation.HorizontalAccuracy">
            <summary>Return the horizontal accuracy of the location.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocation.LastKnown">
            <summary>Return the last known of the location.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocation.Position">
            <summary>Return the position of the location.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocation.Velocity">
            <summary>Return the velocity of the location.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource">
            <summary>A location data source object.</summary>
            <remarks>
              This object is to provide the location data to the location display. This is an opaque handle. It must be destroyed by
              calling RT_LocationDataSource_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocationDataSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocationDataSource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.#ctor">
            <summary>Create a location data source object.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.InstanceId">
            <summary>*Internal Use* Get the instance id of the LocationDataSource referenced by the specified RT_LocationDataSourceHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.Started">
            <summary>Return true if the data source has been started, false otherwise.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.UserDefinedFailure">
            <summary>*Internal Use* Retrieve the user defined error from the location data source.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.SetLocationDataSourceStartCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDataSource_StartCallback)">
            <summary>*Internal Use* Set the start callback function for the location data source.</summary>
            <param name="locationDataSourceStartFn">The data source start callback function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.SetLocationDataSourceStopCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDataSource_StopCallback)">
            <summary>*Internal Use* Set the stop callback function for the location data source.</summary>
            <param name="locationDataSourceStopFn">The data source stop callback function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.HandleStart(RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>*Internal Use* Handles the call to start.</summary>
            <remarks>
              When you start a location data source, call it along with this function if something wrong.
            </remarks>
            <param name="userDefinedError">The error associated with the start. Set to NULL if starting sucessfully.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.HandleStop">
            <summary>*Internal Use* Handles the call to stop.</summary>
            <remarks>
              When you stop a location data source, call it along with this function.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.Start">
            <summary>Start the location data source.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.Stop">
            <summary>Stop the location data source.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.UpdateHeading(System.Double)">
            <summary>Update the heading.</summary>
            <param name="heading">a float64 number.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDataSource.UpdateLocation(RuntimeCoreNet.GeneratedWrappers.CoreLocation)">
            <summary>Update the location position.</summary>
            <param name="locationHandle">The RT_LocationHandle, a location object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay">
            <summary>A location display object.</summary>
            <remarks>
              This object controls how the map view displays location information. The object cannot be created by itself, it could be
              obtained by map view.RT_MapView_getLocationDisplay. The location display object relies on its location data source which
              provides location updating on a frequent basis. You need to pass this handle to all location display functions. This is
              an opaque handle. It must be destroyed by calling RT_LocationDisplay_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocationDisplay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocationDisplay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.#ctor">
            <summary>*Internal Use* Create a location display.</summary>
            <remarks>
              Creates location display that can be assigned to an RT_MapViewHandle.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.AccuracySymbol">
            <summary>Return the accuracy symbol of the location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.AcquiringSymbol">
            <summary>Return the acquiring symbol of the location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.AutoPanMode">
            <summary>Return the current enum value of auto pan mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.CourseSymbol">
            <summary>Return the course symbol of the location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.DataSource">
            <summary>Return the location data source.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.DefaultSymbol">
            <summary>Return the symbol of the default location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Heading">
            <summary>Return the current heading value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.HeadingSymbol">
            <summary>Return the heading symbol of the location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.InitialZoomScale">
            <summary>Return the initial zoom scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.InstanceId">
            <summary>*Internal Use* Get the instance id of the LocationDisplay referenced by the specified RT_LocationDisplayHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Location">
            <summary>Return the last location object.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.MapLocation">
            <summary>Return the current location point in the map projection.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.NavigationPointHeightFactor">
            <summary>Return the current navigation point height factor.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Opacity">
            <summary>Return the opacity value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.PingAnimationSymbol">
            <summary>Return the ping symbol of the location display.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.ShowAccuracy">
            <summary>Return boolean to indicate if the accuracy symbol is shown.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.ShowLocation">
            <summary>Return the visibility of the location symbols.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.ShowPingAnimationSymbol">
            <summary>Return true if the ping animation symbol is shown, otherwise false.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Started">
            <summary>Return the boolean to indicate if the location data updating is started or not.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.UseCourseSymbolOnMovement">
            <summary>Return true if the course symbol on movement is used.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.WanderExtentFactor">
            <summary>Return the wander extent factor.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.SetAutoPanModeChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDisplay_AutoPanModeChanged)">
            <summary>Sets a callback to be invoked when the auto pan mode property of the location has been changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected, the callback will be triggerred when the
              auto pan mode property are changed.
            </remarks>
            <param name="autoPanModeChangedFn">The RT_LocationDisplay_autoPanModeChanged_fn. The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.SetLocationChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDisplay_LocationChanged)">
            <summary>Sets a callback to be invoked when the location property of the location display has been changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected, the callback will be triggered when the
              location property are changed.
            </remarks>
            <param name="locationChangedFn">The RT_LocationDisplay_locationChanged_fn The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.SetStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDisplay_StatusChanged)">
            <summary>Sets a callback to be invoked when the started property of the location display has been changed.</summary>
            <remarks>
              To disconnect, the user data should be the same value as when you connected, the callback will be triggered when the
              start/stop are changed.
            </remarks>
            <param name="statusChangedFn">The RT_LocationDisplay_statusChanged_fn. The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Start">
            <summary>The method is to call the start callback function of the location data source.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplay.Stop">
            <summary>The method is to call the stop callback function of the location data source.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode">
            <summary>How the map view extent is changed due to the current location change.</summary>
            <remarks>
              How the map view extent is changed due to the current location change.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode.Off">
            <summary>The location symbol is shown at the current location but the map view extent is unaffected, no auto-panning is performed</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode.Recenter">
            <summary>
              Centers the map view at the current location, and shows the location symbol. When the current location changes, the map
              view is automatically panned to re-center at the new location. Behaviour is affected by the wander extent factor.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode.Navigation">
            <summary>
              Pans the map view so that the current location symbol is shown near the bottom of the map view, and rotates the map view
              to align it with the direction of travel. When the current location or direction of travel changes the map view is
              automatically panned and rotated to maintain this position. To use this mode effectively, the device location must be
              moving at a speed greater than 0 meters per second. Behaviour is affected by the navigation point height factor.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode.CompassNavigation">
            <summary>
              Centers the map view at the current location, rotates the map view to align with the direction in which the device is
              currently, and shows the location symbol. When the current location or position of the device changes, the map view is
              automatically panned and rotated to maintain this position, thus if the device is spun in a circle, the map view stays
              aligned with the real world.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationDisplayAutoPanMode.Unknown">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocationStatus">
            <summary>Status regarding the network location associated with a stop.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationStatus.NotLocated">
            <summary>A not located status.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationStatus.OnClosest">
            <summary>Located on closest network element.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationStatus.OnClosestNotRestricted">
            <summary>Located on closest network element which is not restricted.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreLocationStatus.NotReached">
            <summary>The network location can't be arrived at by the solver.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult">
            <summary>A location to screen result object.</summary>
            <remarks>
              You need to pass this handle to all location to screen result functions. The location to screen result contains a point
              and visibility. This is an opaque handle. It must be destroyed by calling RT_LocationToScreenResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocationToScreenResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocationToScreenResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.ScreenPoint">
            <summary>Retrieve the screen coordinates from the location to screen result.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocationToScreenResult.Visibility">
            <summary>Retrieve the visibility from the location to screen result.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute">
            <summary>A class that declares description of attributes.</summary>
            <remarks>
              You need to pass this handle to all locator attribure functions. It represents an instance of a locator attribute. This
              is an opaque handle. It must be destroyed by calling RT_LocatorAttribute_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocatorAttribute class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocatorAttribute instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.DisplayName">
            <summary>Gets display name.</summary>
            <remarks>
              Returns display name (aliase) of attribute. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.Name">
            <summary>Gets name.</summary>
            <remarks>
              Returns name of attribute. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.Required">
            <summary>Gets required status of locator attribute.</summary>
            <remarks>
              Determines attribute is mandatory. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorAttribute.Type">
            <summary>Gets type of locator attribute.</summary>
            <remarks>
              Returns an enumeration that represents sematic type of attribute. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo">
            <summary>A class that contains information about supports the ability and return attributes.</summary>
            <remarks>
              Class containing the information for a RT_LocatorTaskHandle, either an online locator created from an ArcGIS geocode
              service, or a local locator created from local data. You need to pass this handle to all geocode task info functions. It
              represents an instance of a geocode task info. This is an opaque handle. It must be destroyed by calling
              RT_LocatorInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocatorInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocatorInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.Description">
            <summary>Gets description of locator.</summary>
            <remarks>
              Returns description of locator. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.IntersectionResultAttributes">
            <summary>Gets intersection result attributes.</summary>
            <remarks>
              Returns array of output fields for intersections geocoding. Empty if intersections geocoding is not supported. If an
              error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.Name">
            <summary>Gets name of locator.</summary>
            <remarks>
              Returns name of locator. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.Properties">
            <summary>Gets properties of locator.</summary>
            <remarks>
              Returns properties of locator task. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.ResultAttributes">
            <summary>Gets result attributes.</summary>
            <remarks>
              Returns array of output fields for addresses geocoding. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SearchAttributes">
            <summary>Gets search attributes.</summary>
            <remarks>
              Returns array of input fields for multiline addresses geocoding. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SpatialReference">
            <summary>Gets spatial reference.</summary>
            <remarks>
              Returns locator task internal spatial reference. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SupportsIntersections">
            <summary>Gets supports of intersections.</summary>
            <remarks>
              Returns true if intersections a supported by locator task. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SupportsPOI">
            <summary>Gets supports of POI.</summary>
            <remarks>
              Returns true if POI is supported by locator task. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SupportsPointAddress">
            <summary>Gets supports of point address.</summary>
            <remarks>
              Returns true if point address is supported by locator task. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.SupportsSuggestions">
            <summary>Gets supports of suggestions.</summary>
            <remarks>
              Returns true if suggest is supported by locator task. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorInfo.Version">
            <summary>Gets version of locator task.</summary>
            <remarks>
              Returns version of locator task. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask">
            <summary>A class can be used to convert an address to a point (geocode) or vice-versa (reverse geocode).</summary>
            <remarks>
              RT_LocatorTaskHandle involves finding matching locations for a given address. Reverse-geocoding is the opposite and
              involves finding corresponding addresses for a given location. You need to pass this handle to all geocode task
              functions. It represents an instance of a locator task. This is an opaque handle. It must be destroyed by calling
              RT_LocatorTask_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreLocatorTask class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreLocatorTask instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.#ctor(System.String)">
            <summary>Creates a new locator task handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_LocatorTask_destroy. If an
              error occurs the error handler RT_LocatorTaskHandle will be called.
            </remarks>
            <param name="uri">The URI of online service or local locator.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.URI">
            <summary>Gets locator's URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.LoadError">
            <summary>Retrieves the load error.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.LoadStatus">
            <summary>Retrieves the load status.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.LocatorInfo">
            <summary>Gets locator info.</summary>
            <remarks>
              Returns information about locator. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Callback, called when the object is done loading.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Callback, called when the loadable load status changed.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the request-able objects set request required.</summary>
            <remarks>
              The function pointer is called when data is required. Retrieving the data should happen on a different thread. Once the
              data is retrieved RT_Request_handleResponse should be called. If an error occurs while retrieving the data you still
              need to call RT_Request_handleResponse. This must be called before loading or connecting to a locator task.
            </remarks>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.CancelLoad">
            <summary>Cancels loading meta-data for the object.</summary>
            <remarks>
              Will cancel loading the meta-data if the object is loading. Will always call the done loading if this is called. If an
              error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.Geocode(System.String)">
            <summary>Geocodes address and returns candidates.</summary>
            <remarks>
              Executes a geocoding operation to find location candidates for a given address. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
            <param name="searchText">Address inputs.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.GeocodeWithParameters(System.String,RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters)">
            <summary>Geocodes address with parameters and returns candidates.</summary>
            <remarks>
              Executes a geocoding operation to find location candidates for a given address. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
            <param name="parameters">Geocode method parameters.</param>
            <param name="searchText">Address inputs.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.GeocodeWithSearchValues(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>Geocodes multiline address and returns candidates.</summary>
            <remarks>
              Executes a geocoding operation to find location candidates for a given multiline address. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
            <param name="searchValues">Multiline address inputs.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.GeocodeWithSearchValuesAndParameters(RuntimeCoreNet.GeneratedWrappers.CoreDictionary,RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters)">
            <summary>Geocodes multiline address with parameters and returns candidates.</summary>
            <remarks>
              Executes a geocoding operation to find location candidates for a given multiline address. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
            <param name="parameters">Geocode method parameters.</param>
            <param name="searchValues">Multiline address inputs.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.GeocodeWithSuggestResult(RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult)">
            <summary>Geocodes suggest and returns candidates.</summary>
            <remarks>
              Executes geocoding based on result of suggestion. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="suggestResult">Suggest method result.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.GeocodeWithSuggestResultAndParameters(RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult,RuntimeCoreNet.GeneratedWrappers.CoreGeocodeParameters)">
            <summary>Geocodes suggest with parameters and returns candidates.</summary>
            <remarks>
              Executes geocoding based on result of suggestion. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="parameters">Geocode parameters.</param>
            <param name="suggestResult">Suggest method result.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.Load">
            <summary>Loads the meta-data for the object asynchronously.</summary>
            <remarks>
              Will load the meta-data if the object is not loaded. Will always call the done loading if this is called. If an error
              occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.RetryLoad">
            <summary>Loads or retry loading meta-data for the object asynchronously.</summary>
            <remarks>
              Will retry loading the meta-data if the object is failed to load. Will load the object if the object is not loaded. Will
              not retry to load the object if the object is loaded. Will always call the done loading if this is called. If an error
              occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.ReverseGeocode(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Finds address by location point.</summary>
            <remarks>
              Executes a reverse-geocoding operation to find address candidates for a given location. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
            <param name="location">The location point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.ReverseGeocodeWithParameters(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters)">
            <summary>Finds address with parameters by location point.</summary>
            <remarks>
              Executes a reverse-geocoding operation to find address candidates for a given location. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
            <param name="location">The location point.</param>
            <param name="parameters">The reverse geocode parameters.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.Suggest(System.String)">
            <summary>Suggest address and returns possible variants.</summary>
            <remarks>
              Geocoding suggestions provide a mechanism for allowing character-by-character auto-complete. By passing in text entry
              and an optional location, results can be quickly found for client display purposes. Suggestions are not limited to
              addresses, they can also be used for POIs (Points of Interest). If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
            <param name="searchText">Part of address text.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreLocatorTask.SuggestWithParameters(System.String,RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters)">
            <summary>Suggest address with parameters and returns possible variants.</summary>
            <remarks>
              Geocoding suggestions provide a mechanism for allowing character-by-character auto-complete. By passing in text entry
              and an optional location, results can be quickly found for client display purposes. Suggestions are not limited to
              addresses, they can also be used for POIs (Points of Interest). If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
            <param name="parameters">Suggest method parameters.</param>
            <param name="searchText">Part of address text.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMap">
            <summary>The map contains layers and additional properties and can be displayed in a MapView.</summary>
            <remarks>
              You need to pass this handle to all map functions. It represents an instance of a map. You cannot directly access map
              properties. You can get this handle from RT_MapHandle and the handle must be destroyed from RT_Map_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMap class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMap instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor">
            <summary>Creates a map.</summary>
            <remarks>
              Creates a map.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a spatial reference to create the map.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreBasemap)">
            <summary>Create a map with basemap.</summary>
            <remarks>
              Use this method to create an Map object. This object must be destroyed by calling function RT_Map_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Map_destroy on the return value.
            </remarks>
            <param name="basemap">A basemap object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreBasemapType,System.Double,System.Double,System.Int32)">
            <summary>Creates a map with a basemap and an initial viewpoint.</summary>
            <remarks>
              The map will be created with a basemap set, a spatial reference in WGS84 and the initial viewpoint set. This object must
              be destroyed by calling function RT_Map_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Map_destroy on the return value.
            </remarks>
            <param name="basemapType">The basemap.</param>
            <param name="latitude">The latitude for the initial viewpoint.</param>
            <param name="levelOfDetail">The level of detail (converted to scale) for the initial viewpoint. 0 is the most zoomed out.</param>
            <param name="longitude">The longitude for the initial viewpoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreItem)">
            <summary>Creates a map with an item.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Map_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Map_destroy on the return value.
            </remarks>
            <param name="item">The webmap item (only RT_PortalItemHandle are supported).</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a map with spatial reference.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Map_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Map_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.#ctor(System.String)">
            <summary>Creates a map with a URI.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Map_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Map_destroy on the return value.
            </remarks>
            <param name="uRI">URI of the webmap. This will be most generally a portal item URL.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.URI">
            <summary>Retrieves the URI for the map.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.Basemap">
            <summary>Retrieves the basemap for the map.</summary>
            <remarks>
              Retrieves the basemap for the map
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.Bookmarks">
            <summary>Retrieve the bookmarks for the map.</summary>
            <remarks>
              Retrieve the bookmarks for the map. The collection is specific to this map.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.InitialViewpoint">
            <summary>Retrieve the initial viewpoint.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.Item">
            <summary>Retrieves the item for the map.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.LoadError">
            <summary>Retrieve the load error for the map.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.LoadStatus">
            <summary>Retrieve the load status for the map.</summary>
            <remarks>
              Retrieve the load status for the map.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.MaxScale">
            <summary>Retrieve the maximum scale for the map.</summary>
            <remarks>
              Retrieve the maximum scale for the map. Will be zero if the map is not loaded.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.MinScale">
            <summary>Retrieve the minimum scale for the map.</summary>
            <remarks>
              Retrieve the minimum scale for the map. Will be zero if the map is not loaded.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.OperationalLayers">
            <summary>Retrieve the operational layers for the map.</summary>
            <remarks>
              Retrieve the operational layers for the map. The collection is specific to this map.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.SpatialReference">
            <summary>Retrieve the spatial reference for the map.</summary>
            <remarks>
              Retrieve the spatial reference for the map.
              Error Types: RT_ErrorType_commonIllegalState The map needs to be loaded before making this call.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.TransportationNetworks">
            <summary>Retrieves transportation networks.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMap.Version">
            <summary>Retrieve the version for the map.</summary>
            <remarks>
              The version of the map.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.SetBasemapChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Map_BasemapChanged)">
            <summary>Callback invoked when the basemap has been changed.</summary>
            <param name="basemapChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>*Internal Use* Sets the function that will be called when the map is done loading.</summary>
            <remarks>
              Sets the function that will be called when the map is done loading. Setting the function to NULL after it has already
              been set will stop the function from being called. By default the callback will not occur.
            </remarks>
            <param name="doneLoading">The done loading function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Set the function that will be called when the load status changes.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>*Internal Use* Sets the function that will be called if additional data is required.</summary>
            <remarks>
              Set the function that will be called if additional loading is required. Setting the function to NULL after it has
              already been set will stop the function from being called. By default the callback will not occur.
            </remarks>
            <param name="requestRequired">The load required function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.CancelLoad">
            <summary>Cancel loading the map.</summary>
            <remarks>
              Cancels any outstanding requests that the map has sent. If the map is in the RT_LoadStatus_loading state then the
              RT_LoadStatus and RT_ErrorHandle will be set to RT_LoadStatus_failedToLoad and RT_ErrorType_commonUserCancelled and
              RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.Clone">
            <summary>Copies a map.</summary>
            <remarks>
              Clones a map. RT_Map_setRequestRequiredCallback will not be set.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.FromJSON(System.String)">
            <summary>Creates a map from JSON.</summary>
            <remarks>
              Creates a map from JSON. RT_Map_setRequestRequiredCallback could be called as soon as it is set.
              Error Types: RT_ErrorType_commonInvalidArgument The input JSON is empty.
            </remarks>
            <param name="json">The JSON string for the map.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreMap)">
            <summary>Check if the maps are equals.</summary>
            <remarks>
              Check if the maps are equals.
            </remarks>
            <param name="otherMap">The other map.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.Load">
            <summary>Load the map.</summary>
            <remarks>
              Load the map. A map is loaded if it has a spatial reference, an initial viewpoint and all the layer types are know. The
              layer will be loaded to get the min scale and max scale if they are not already provided. Load will only try loading the
              object if the load status is RT_LoadStatus_notLoaded. If the object is not in the RT_LoadStatus_notLoaded state the
              object will do nothing and the RT_Loadable_doneLoading_fn function will be called. This may call the load requested
              callback and the done loading.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.RetryLoad">
            <summary>Retry loading the map.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the basemap is in the failed to load state. Does nothing if the
              basemap is in any other state.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMap.ToJSON">
            <summary>Converts a map into an ArcGIS JSON representation.</summary>
            <remarks>
              Converts a map into an ArcGIS JSON representation. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities">
            <summary>
              Indicates the capabilities of an ArcGIS map service, including whether it supports exporting map images, data and query
              operations.
            </summary>
            <remarks>
              You need to pass this handle to all map service capabilities functions. You can get this handle from
              RT_ArcGISMapServiceInfo_getCapabilities and the handle must be destroyed from RT_MapServiceCapabilities_destroy.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMapServiceCapabilities class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMapServiceCapabilities instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.SupportsData">
            <summary>Indicates if map service supports various data operations.</summary>
            <remarks>
              These include operations like find, query, and related records. All ArcGIS REST API operations define their required
              capability in the REST API help documentation.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.SupportsMap">
            <summary>Indicates if the map service supports the map capability.</summary>
            <remarks>
              This includes operations like exporting map images and listing all layers and tables. All ArcGIS REST API operations
              define their required capability in the REST API help documentation.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapServiceCapabilities.SupportsQuery">
            <summary>Indicates if the map service supports query operations.</summary>
            <remarks>
              This includes operations like identify and accessing attachment data. All ArcGIS REST API operations define their
              required capability in the REST API help documentation.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMapView">
            <summary>A map view object.</summary>
            <remarks>
              You need to pass this handle to all map view functions. The map view is how a map is displayed on a screen. The map view
              will be updated when the map changes. This is an opaque handle. It must be destroyed by calling RT_GeoView_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMapView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMapView instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.PrivateCreateFromHandleInternal_CoreMapView(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMapView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMapView instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.#ctor(System.Int32,System.Int32,System.Single,System.Single,RuntimeCoreNet.GeneratedWrappers.CorePulseThread)">
            <summary>Create a map view for displaying a map.</summary>
            <remarks>
              Creates map view for displaying a map. You need to connect a map to the map view before anything is draw. If using
              RT_PulseThread_useGeoView you must call RT_GeoView_resume to start the pulse thread which starts the drawing and
              RT_GeoView_pause to stop the pulse thread. There can only be 1 set of function callbacks for each map view.
              initialization_completed - Called when map view is ready for you to start interacting with it.   draw_requested - Called
              when map view requires a RT_GeoView_draw to be called.   start_drawing - Called when map view starts a new draw phase.
              Multiple draws can occur after this call but this will not be called again until completed_draw is called.
              completed_draw - Called when map view is finished drawing in a draw phase. Multiple draws can occur before this call.
              This object must be destroyed by calling function RT_GeoView_destroy.
              Warning: With RT_PulseThread_useGeoView you must call RT_GeoView_resume and RT_GeoView_pause to control the pulse thread.
            </remarks>
            <param name="dipsToPixelsFactor">The factor for converting dips to pixels.</param>
            <param name="height">The height of the viewport.</param>
            <param name="pixelsPerInch">This is used to determine the resolution of the screen.</param>
            <param name="pulse">Determines if the map view owns the pulse or not.</param>
            <param name="width">The width of the viewport.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.AllowMagnifierToPanMap">
            <summary>Whether the magnifier pans the map view when the magnifier touches the boundary of the map view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.BackgroundGrid">
            <summary>Various settings applied to the map view's background.</summary>
            <remarks>
              The RT_BackgroundGridHandle is a snapshot object. You need to set it after making changes to the object.
              Error Types: RT_ErrorType_commonIllegalState - Map view is not created correctly. RT_ErrorType_commonInvalidArgument - The color type
              is the wrong type.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.Labeling">
            <summary>Retrieve the view label properties.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.LocationDisplay">
            <summary>*Internal Use* The location display of the map view.</summary>
            <remarks>
              This method can't be called until a map has been set to the map view by calling RT_MapView_setMap. If called before the
              map view is ready, RT_ErrorType_commonIllegalState exception will occur.
              Error Types: RT_ErrorType_commonIllegalState
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.MagnifierEnabled">
            <summary>Returns boolean indicating whether the magnifier is enabled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.Map">
            <summary>Returns the map that is currently set to the map view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.Rotation">
            <summary>Returns the map view's current rotation.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.Scale">
            <summary>Returns the map view's current scale.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.UnitsPerDIP">
            <summary>Returns the map view's current units per DIP.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.VisibleArea">
            <summary>Returns the map view's visible area.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMapView.WrapAroundMode">
            <summary>Retrieve the wrap around mode.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.HideMagnifier">
            <summary>*Internal Use* Sets the map view magnifier invisible.</summary>
            <remarks>
              This method can't be called until a map has been set to the map view by calling RT_MapView_setMap. If called before the
              map view is ready, nothing will occur.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.InteractionDrag(System.Double,System.Double)">
            <summary>*Internal Use* For pan dragging around the map, non animated, relative in screen coordinates.</summary>
            <param name="deltaX">The delta x coordinate.</param>
            <param name="deltaY">The delta y coordinate.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.InteractionFlingAnimated(System.Double,System.Double)">
            <summary>*Internal Use* For pan fling gesture.</summary>
            <remarks>
              For pan fling gesture. Animated, relative pan animation.
            </remarks>
            <param name="deltaX">The delta x coordinate.</param>
            <param name="deltaY">The delta y coordinate.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.InteractionRotate(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* For touch rotating.</summary>
            <param name="angleDegrees">an angular value, in degrees.</param>
            <param name="screenPoint">The screen point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.InteractionUseLocationDisplayAnchor">
            <summary>*Internal Use* Use location display anchor.</summary>
            <remarks>
              Used to determine if animation should be stopped when using touch events.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.InteractionZoomToScale(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* For pinch zooming.</summary>
            <remarks>
              For pinch zooming, this is a relative operation, zoom the map view by a relative factor, not absolute. Non-animated
            </remarks>
            <param name="scale">A scale to zoom too.</param>
            <param name="screenPoint">The screen point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.LocationToScreen(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Converts a coordinate within the map view's spatial reference to a screen coordinate (in pixels).</summary>
            <remarks>
              Non-overloaded method: LocationToScreen
            </remarks>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.LocationtoScreen(RuntimeCoreNet.GeneratedWrappers.CorePoint,RuntimeCoreNet.GeneratedWrappers.CoreAdjustForWrapAround)">
            <summary>Converts a coordinate within the map view's spatial reference to a screen coordinate (in pixels).</summary>
            <remarks>
              This method can't be called until a map has been set to the map view by calling RT_MapView_setMap. If called before the
              map view is ready, RT_ErrorType_commonIllegalState exception will occur.
              Error Types: RT_ErrorType_commonIllegalState
              Non-overloaded method: LocationToScreenWithAdjustForWrapAround
            </remarks>
            <param name="adjustForWrapAround">Use the wrap around in the calculation.</param>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.ScreenToLocation(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>Converts a screen coordinate (in pixels) to a coordinate within the map view's spatial reference.</summary>
            <param name="screen">The screen point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetMagnifierImages(RuntimeCoreNet.GeneratedWrappers.CoreImage,RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>*Internal Use* Sets the mask and overlay images for the magnifier.</summary>
            <param name="mask">Image to be used for the mask.</param>
            <param name="overlay">Image to be used for the overlay.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointCenterAsync(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Change the map view to the center point asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointCenterAsync
            </remarks>
            <param name="center">The point to move the center of the map too.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointCenterAsync(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double)">
            <summary>Change the map view to the center point and scale asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointCenterWithScaleAsync
            </remarks>
            <param name="center">The point to move the center of the map too.</param>
            <param name="scale">The scale to change too.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointGeometryAsync(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Change the map view to the bounding geometry asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointGeometryAsync
            </remarks>
            <param name="boundingGeometry">The bounding geometry to change too.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointGeometryAsync(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double)">
            <summary>Change the map view to the bounding geometry with padding asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointGeometryWithPaddingAsync
            </remarks>
            <param name="boundingGeometry">The bounding geometry to change too.</param>
            <param name="paddingInDIPs">The space in DIPs to expand the viewport by.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointRotationAsync(System.Double)">
            <summary>Rotates the map view to the provided angle asynchronously.</summary>
            <param name="angleDegrees">An angular value, in degrees.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointScaleAsync(System.Double)">
            <summary>Change the map view to zoom to a scale asynchronously.</summary>
            <param name="scale">The scale to zoom too.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.SetViewpointAsync(RuntimeCoreNet.GeneratedWrappers.CoreViewpoint,System.Single,RuntimeCoreNet.GeneratedWrappers.CoreAnimationCurve)">
            <summary>Change the map view to the viewpoint with duration and animation curve asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointWithDurationAndCurveAsync
            </remarks>
            <param name="curve">The animation curve.</param>
            <param name="durationSeconds">The duration in seconds.</param>
            <param name="viewpoint">The viewpoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.ShowMagnifierAt(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* Displays the map view's magnifier at the given location.</summary>
            <remarks>
              This method can't be called until a map has been set to the map view by calling RT_MapView_setMap. If called before the
              map view is ready, nothing will occur.
            </remarks>
            <param name="coordinate">screen coordinate</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.ShowMagnifierWithOffsetAt(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>*Internal Use* Displays the map view's magnifier at the given location with the offset.</summary>
            <remarks>
              This method can't be called until a map has been set to the map view by calling RT_MapView_setMap. If called before the
              map view is ready, nothing will occur.
            </remarks>
            <param name="coordinate">screen coordinate</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.StopAnimations">
            <summary>*Internal Use* Stops all animations that are currently active.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonIllegalState
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMapView.StopPanAnimations">
            <summary>*Internal Use* Stops pan animations that are currently active.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonIllegalState
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol">
            <summary>A base class for scene marker symbols. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              Scene marker symbols are used to display those graphics which are based on point or multipoint geometry. Same as a
              RT_SymbolHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle to all
              scene marker symbol functions. The scene marker symbol class is derived from the symbol class. It must be destroyed by
              calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMarkerSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMarkerSceneSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.PrivateCreateFromHandleInternal_CoreMarkerSceneSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMarkerSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMarkerSceneSymbol instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.AnchorPosition">
            <summary>Get the anchor position of the simple marker scene symbol.</summary>
            <remarks>
              Get the anchor position of the simple marker scene symbol RT_SceneSymbolAnchorPosition.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Color">
            <summary>Gets the currently set symbol color.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Depth">
            <summary>Get the depth (in meters) of the simple marker scene symbol.</summary>
            <remarks>
              Get the depth (in meters) of the simple marker scene symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Heading">
            <summary>Get the heading (in degrees) of the scene marker symbol.</summary>
            <remarks>
              Get the heading (in degrees) of the scene marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Height">
            <summary>Get the height (in meters) of the simple marker scene symbol.</summary>
            <remarks>
              Get the height (in meters) of the simple marker scene symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Pitch">
            <summary>Get the pitch (in degrees) of the scene marker symbol.</summary>
            <remarks>
              Get the pitch (in degrees) of the scene marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Roll">
            <summary>Get the roll (in degrees) of the scene marker symbol.</summary>
            <remarks>
              Get the roll (in degrees) of the scene marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSceneSymbol.Width">
            <summary>Get the width (in meters) of the simple marker scene symbol.</summary>
            <remarks>
              Get the width (in meters) of the simple marker scene symbol.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol">
            <summary>A base class for marker symbols. You would typically work with one or more sub-classes of this class.</summary>
            <remarks>
              Marker symbols are used to display those graphics which are based on point or multipoint geometry. Same as a
              RT_SymbolHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle to all
              marker symbol functions. The marker symbol class is derived from the symbol class. It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.PrivateCreateFromHandleInternal_CoreMarkerSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMarkerSymbol instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.Angle">
            <summary>Get the angle (in degrees) of the marker symbol.</summary>
            <remarks>
              Get the angle (in degrees) of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.AngleAlignment">
            <summary>Get the symbol angle alignment of the marker symbol.</summary>
            <remarks>
              Get the angle alignment of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.LeaderOffsetX">
            <summary>Get the leader offset X of the marker symbol.</summary>
            <remarks>
              Get the leader offset X of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.LeaderOffsetY">
            <summary>Get the leader offset Y of the marker symbol.</summary>
            <remarks>
              Get the leader offset Y of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.OffsetX">
            <summary>Get the offset X of the marker symbol.</summary>
            <remarks>
              Get the offset X of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.OffsetY">
            <summary>Get the offset Y of the marker symbol.</summary>
            <remarks>
              Get the offset Y of the marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.RotationType">
            <summary>Get the rotation type of the marker symbol.</summary>
            <remarks>
              Get the rotation type of the marker symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreMarkerSymbol)">
            <summary>Check if 2 line MarkerSymbols are equal.</summary>
            <remarks>
              Check MarkerSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="markerSymbol2">The 2nd MarkerSymbol object to check to see if equal to the 1st MarkerSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer">
            <summary>
              An instance of this class represents a layer that can visualize vector/feature data from mobile map package. It must be
              destroyed by calling RT_Layer_destroy.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMobileBasemapLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMobileBasemapLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer.PrivateCreateFromHandleInternal_CoreMobileBasemapLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMobileBasemapLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMobileBasemapLayer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer.Path">
            <summary>Gets the path of mobile basemap layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileBasemapLayer.SublayerIds">
            <summary>Gets the sublayer IDs.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage">
            <summary>A mobile map package.</summary>
            <remarks>
              MobileMapPackage implements the Loadable interface; the mobile map package contents can be accessed after the mobile map package has loaded.
              
              
              The version of the mobile map package has a version property which application developers can use to determine if they can be opened in this version of the ArcGIS Runtime SDK. Pre 1.0 packages which were created in ArcGIS Pro 1.1 are not supported, however, they can be loaded so that their version property and item property (including the title and thumbnail only) can be checked. The version of mobile map package from 1.0 onwards follow the semantic versioning scheme. The ArcGIS Runtime will be backwards compatible back to 1.0 mobile map packages and will open the latest supported major version, but will not be able to open future major versions of packages. Please see the system requirements for details on what mobile map package versions are currently supported.A mobile map package is a transport mechanism for mobile maps. It contains metadata about the package (description,
              thumbnail, etc.), one or more mobile maps, layers, data, and optionally networks and locators. Mobile map packages may
              contain MobileBasemapLayers. Packages are created in ArcGIS Pro.  Mobile map packages are a major part of the offline
              workflow. Mobile maps inside a mobile map package can be used and programmatically edited (layers can be added or
              removed). Note, mobile map packages are read-only; edits to mobile maps or layers are not persisted to disk.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMobileMapPackage class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMobileMapPackage instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.#ctor(System.String)">
            <summary>Creates a mobile map package helper.</summary>
            <remarks>
              Creates a mobile map package.
            </remarks>
            <param name="path">A path to mobile map package.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.Item">
            <summary>Gets mobile map package's item.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.LoadError">
            <summary>Retrieve the load error.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.LoadStatus">
            <summary>Retrieve the load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.LocatorTask">
            <summary>Gets locator task.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.Maps">
            <summary>Gets array of maps.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.Path">
            <summary>Gets mobile map package's path.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.Version">
            <summary>Gets mobile map package's version.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Callback, called when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Callback, called when the loadable load status changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the request-able objects set request required.</summary>
            <remarks>
              The function pointer is called when data is required. Retrieving the data should happen on a different thread. Once the
              data is retrieved RT_Request_handleResponse should be called. If an error occurs while retrieving the data you still
              need to call RT_Request_handleResponse. This must be called before loading or connecting to a locator task.
            </remarks>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.CancelLoad">
            <summary>Cancel loading meta-data for the object.</summary>
            <remarks>
              Will cancel loading the meta-data if the object is loading. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.Load">
            <summary>Load the meta-data for the object asynchronously.</summary>
            <remarks>
              Will load the meta-data if the object is not loaded. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMobileMapPackage.RetryLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol">
            <summary>Used to draw point or multipoint features on a layer using an 3D model.</summary>
            <remarks>
              Model marker symbols display graphics using a 3D model. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreModelMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreModelMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.PrivateCreateFromHandleInternal_CoreModelMarkerSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreModelMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreModelMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.#ctor">
            <summary>*Internal Use* Creates a model marker symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.#ctor(System.String)">
            <summary>Creates a model marker symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="uri">URI of the model.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.#ctor(System.String,System.Single)">
            <summary>Creates a model marker symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="scale">Scaling factor to apply to the model</param>
            <param name="uri">URI of the model.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.URI">
            <summary>Get the URI of the model marker symbol.</summary>
            <remarks>
              Get the URI of the model marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the symbol is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the symbol has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the symbol needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.HandleResponse(System.UInt64,System.Byte[],RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>Handles a response to a request for data.</summary>
            <param name="data">The data.</param>
            <param name="requestId">Identifier for the request.</param>
            <param name="userDefinedError">The user defined error.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.Load">
            <summary>Loads the model marker symbol.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreModelMarkerSymbol.RetryLoad">
            <summary>Retry loading the model marker symbol.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMultipart">
            <summary>A Multipart object which is derived from a geometry object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all multipart functions. The multipart class is derived from the geometry class. It must be destroyed by
              calling RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipart class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipart instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.PrivateCreateFromHandleInternal_CoreMultipart(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipart class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipart instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.Parts">
            <summary>Retrieve the parts for the multipart.</summary>
            <remarks>
              Retrieve the parts for the multipart. This is a copy and the any changes must be set.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.GetPartSizes(System.Int64,System.Int32[])">
            <summary>*Internal Use* Retrieves the number of points in each part in the multipart.</summary>
            <remarks>
              Retrieves the number of points in the part in the multipart. Will return zero if an error occurs.
            </remarks>
            <param name="arrayPartSize">(out) An array containing the size of each part.</param>
            <param name="size">The number of parts in the multipart.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.Info(System.Int64@,System.Int64@,System.Int64@,RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags@)">
            <summary>*Internal Use* Retrieves information about the multipart</summary>
            <param name="outGeometryFlags">(out) Additional information about the multipart.</param>
            <param name="outHash">(out) The hash of the multipart.</param>
            <param name="outSize">(out) The total number of parts in the multipart.</param>
            <param name="outTotalPointCount">(out) The total number of points that make up the multipart.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.PartAsArray(System.Int64,System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[])">
            <summary>*Internal Use* Retrieves a part values from the the multipart.</summary>
            <remarks>
              Retrieves a part in the multipart. Will return zero if an error occurs. The caller must allocate the the space before
              calling this function.
            </remarks>
            <param name="arrayM">(out) The m values for the points in the part in the multipart.</param>
            <param name="arrayXy">(out) The x and y values for the points in the part in the multipart.</param>
            <param name="arrayZ">(out) The z values for the points in the part in the multipart.</param>
            <param name="numberOfPoints">The number of points to retrieve from the part in the multipart.</param>
            <param name="partIndex">The index of the part in the multipart.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.PointsAsArray(System.Int64,System.Int32[],RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[])">
            <summary>*Internal Use* Retrieves the multipart as an array of points.</summary>
            <remarks>
              Retrieves the multipart as an array of points.
            </remarks>
            <param name="arrayM">(out) The m values for the points in the part in the multipart.</param>
            <param name="arrayPartSize">(out) An array of values indicating the number of points in each part.</param>
            <param name="arrayXy">(out) The x and y values for the points in the part in the multipart.</param>
            <param name="arrayZ">(out) The z values for the points in the part in the multipart.</param>
            <param name="size">The total number of parts.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipart.SizeOfPart(System.Int64)">
            <summary>*Internal Use* Retrieves the number of points in a part in the multipart.</summary>
            <remarks>
              Retrieves the number of points in the part in the multipart. Will return zero if an error occurs.
            </remarks>
            <param name="partIndex">The index of the part in the multipart.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder">
            <summary>The Multipart builder object is used to create a multipart geometry.</summary>
            <remarks>
              The Multipart builder object is used to create a multipart geometry. It represents an instance of a Multipart builder.
              You cannot directly access Multipart builder properties. This is an opaque handle. It must be destroyed by calling
              RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipartBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipartBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.PrivateCreateFromHandleInternal_CoreMultipartBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipartBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipartBuilder instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.Parts">
            <summary>Retrieve the parts for the multipart.</summary>
            <remarks>
              Retrieve the collection of parts for the multipart builder. Changes to the collection will be reflected in the multipart
              builder.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.Add(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[],System.Boolean,System.Boolean)">
            <summary>*Internal Use* Add part with an x, y, z, m to the multipart.</summary>
            <remarks>
              Creates a part with values for the points x, y, z, m for the multipart.
              Non-overloaded method: AddPartAsArray
            </remarks>
            <param name="arrayM">The m value for the point.</param>
            <param name="arrayXy">The x and y coordinate for the point.</param>
            <param name="arrayZ">The z coordinate for the point.</param>
            <param name="hasM">Should the m value be used.</param>
            <param name="hasZ">Should the z value be used.</param>
            <param name="size">The number of points in the array.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.AddPoint(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Adds a new point to the end of the last part of the multipart.</summary>
            <remarks>
              If there are no parts then an initial part is created and the point added to that. The point will become the end point
              of a line segment in the part.
              Non-overloaded method: AddPoint
            </remarks>
            <param name="point">The point to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.AddPoint(System.Double,System.Double)">
            <summary>Adds a new point to the end of the last part of the multipart.</summary>
            <remarks>
              If there are no parts then an initial part is created and the point added to that. The point will become the end point
              of a line segment in the part.
              Non-overloaded method: AddPointXY
            </remarks>
            <param name="x">The x coordinate of the point to add</param>
            <param name="y">The y coordinate of the point to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipartBuilder.AddPoint(System.Double,System.Double,System.Double)">
            <summary>Adds a new point to the end of the last part of the multipart.</summary>
            <remarks>
              If there are no parts then an initial part is created and the point added to that. The point will become the end point
              of a line segment in the part.
              Non-overloaded method: AddPointXYZ
            </remarks>
            <param name="x">The x coordinate of the point to add</param>
            <param name="y">The y coordinate of the point to add</param>
            <param name="z">The z coordinate of the point to add</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint">
            <summary>A Multipoint object which is derived from a geometry object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all multipoint functions. The multipoint class is derived from the geometry class. It must be destroyed by
              calling RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipoint class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipoint instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.PrivateCreateFromHandleInternal_CoreMultipoint(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipoint class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipoint instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.Points">
            <summary>Retrieve the points for the multipoint.</summary>
            <remarks>
              Retrieve the points for the multipoint. This is a copy and the any changes must be set.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.Info(System.Int64@,System.Int64@,RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags@)">
            <summary>*Internal Use* Retrieve the size and geometry flags for the multipoint.</summary>
            <remarks>
              Retrieve the size and geometry flags for the multipoint.
              Error Types: RT_ErrorType_commonInvalidArgument - NULL parameter.
            </remarks>
            <param name="outGeometryFlags">(out) The geometry flags for the points.</param>
            <param name="outHash">(out) The hash value.</param>
            <param name="outSize">(out) The number of points in the multipoint.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipoint.PointsAsArray(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[])">
            <summary>*Internal Use* Retrieve the points for the multipoint.</summary>
            <remarks>
              Retrieve the points for the multipoint.
              Error Types: RT_ErrorType_commonInvalidArgument - NULL parameter. RT_ErrorType_commonInvalidArgument - Invalid size.
            </remarks>
            <param name="arrayM">(out) The z value for the points.</param>
            <param name="arrayXy">(out) The x and y values for the points.</param>
            <param name="arrayZ">(out) The z value for the points.</param>
            <param name="size">The number of point you want to retrieve from the multipoint.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder">
            <summary>The multipoint builder object is used to create a multipoint.</summary>
            <remarks>
              The multipoint builder object is used to create a multipoint. It represents an instance of a multipoint builder. You
              cannot directly access multipoint builder properties. This is an opaque handle. It must be destroyed by calling
              RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipointBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipointBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.PrivateCreateFromHandleInternal_CoreMultipointBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMultipointBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMultipointBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a multipoint builder.</summary>
            <remarks>
              Creates a multipoint builder. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="spatialReference">The builder's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreMultipoint)">
            <summary>Creates a multipoint builder from a multipoint.</summary>
            <remarks>
              Creates a multipoint builder from a multipoint. This object must be destroyed by calling function
              RT_GeometryBuilder_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="multipoint">A multipoint object.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.Points">
            <summary>Retrieve the points for the multipoint.</summary>
            <remarks>
              Retrieve the points for the multipoint. Change this collection to update the multipoint builder.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMultipointBuilder.ToMultipointFromArray(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D[],System.Double[],System.Double[],RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>*Internal Use* Creates a multipoint from an array of points and spatial reference.</summary>
            <remarks>
              Creates an multipoint with values and a spatial reference. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_commonInvalidArgument Null parameter
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="arrayM">The m value for the point.</param>
            <param name="arrayXy">The x and y coordinate for the point.</param>
            <param name="arrayZ">The z coordinate for the point.</param>
            <param name="size">The number of points in the array.</param>
            <param name="spatialReference">The spatial reference for the point.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart">
            <summary>Represents a single part of a multipart builder.</summary>
            <remarks>
              Multipart builder is the base class of RT_PolygonBuilderHandle or RT_PolylineBuilderHandle. A part is made up of a
              collection of segments making the edge of the multipart. Additionally access and modified using the points (vertexes) of
              segments is available. Adjacent segments which share an end point and a start point are connected and the shared vertex
              is not duplicated when accessing points. The mutable part can represent gaps between one end point and an adjacent
              start. However, this is only recommended as a temporary state while modifying a multipart builder, when using
              RT_GeometryBuilder_toGeometry the gaps are closed with line segments. This is an opaque handle. It must be destroyed by
              calling RT_MutablePart_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMutablePart class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMutablePart instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a part with a specified spatial reference.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_MutablePart_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_MutablePart_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference object, can be NULL.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.EndPoint">
            <summary>Returns the end point of the last segment in the part. Returns NULL if the collection is empty.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.IsEmpty">
            <summary>Indicates if the part contains no segments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.PointCount">
            <summary>Returns the count of points in the part.</summary>
            <remarks>
              The points in the part are the start and end points of segments. Segments can share a point if the end point of one
              segment matches the start point of the next.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.SegmentCount">
            <summary>Returns the count of segments in the part.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.SpatialReference">
            <summary>Retrieve the spatial reference for the part.</summary>
            <remarks>
              Retrieve the spatial reference for the part. If the mutable_part does not have a spatial reference NULL is returned.
              This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.StartPoint">
            <summary>Returns the start point of the first segment in the part. Returns NULL if the collection is empty.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.AddPoint(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Add a new point to the end of the part. A new line segment will be added to connect the new point to the previous</summary>
            <remarks>
              The points in the part are the start and end points of segments. A new line segment is added to connect the new point to
              the previous point. If this is the first point in an empty segment, a single closed segment is added using the same
              start and end point. Adding a second point will update this line segment to gain a distinct end point. Adding a third or
              more points will add new line segments.
              Non-overloaded method: AddPoint
            </remarks>
            <param name="point">The point to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.AddPoint(System.Double,System.Double)">
            <summary>
              Add a new point to the end of the part by specifying the points x,y coordinates. A new line segment will be added to
              connect the new point to the previous
            </summary>
            <remarks>
              The points in the part are the start and end points of segments. A new line segment is added to connect the new point to
              the previous point. If this is the first point in an empty segment, a single closed segment is added using the same
              start and end point. Adding a second point will update this line segment to gain a distinct end point. Adding a third or
              more points will add new line segments.
              Non-overloaded method: AddPointXY
            </remarks>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
              Add a new point to the end of the part by specifying the points x,y,z coordinates. A new line segment will be added to
              connect the new point to the previous
            </summary>
            <remarks>
              The points in the part are the start and end points of segments. A new line segment is added to connect the new point to
              the previous point. If this is the first point in an empty segment, a single closed segment is added using the same
              start and end point. Adding a second point will update this line segment to gain a distinct end point. Adding a third or
              more points will add new line segments.
              Non-overloaded method: AddPointXYZ
            </remarks>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point.</param>
            <param name="z">The z coordinate of the new point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.AddSegment(RuntimeCoreNet.GeneratedWrappers.CoreSegment)">
            <summary>Add segment to the end of the part.</summary>
            <remarks>
              A new segment is added to the end. If the start point of the segment matches the previous end point, the segment will
              share this point. The count of points will increase by 1 if the segment connects, or 2 points if it is disconnected. A
              more efficient way to add LineSegments to a part is to use one of the addPoint methods. For example
              RT_MutablePart_addPointXY.
            </remarks>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetEndPointIndexFromSegmentIndex(System.Int64)">
            <summary>For a segment at a specified segment_index the method returns the point index of the segment's end point.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetPoint(System.Int64)">
            <summary>Returns a point at a specified point index.</summary>
            <remarks>
              The points in the part are the start and end points of segments. Segments can share a point if the end point of one
              segment matches the start point of the next.
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetPoints">
            <summary>Returns all the points that are the vertexes of the part.</summary>
            <remarks>
              This is a copy of the points in the mutable part
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetSegment(System.Int64)">
            <summary>Gets a segment at a specified segment index.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetSegmentIndexFromEndPointIndex(System.Int64)">
            <summary>
              Converts from a point index to a segment index that uses the given point as an end point. If the point is not an end
              point then a value equivalent to -1 value is returned.
            </summary>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetSegmentIndexFromPointIndex(System.Int64,System.Int64@,System.Int64@)">
            <summary>
              Converts from a point index to a segment index of the start point and another segment index containing the end point. If
              the point is not a start or end point a value equivalent to -1 is set.
            </summary>
            <param name="outEndPointSegmentIndex">(out) This is set to the segment index using the point as an end point. Can be NULL.</param>
            <param name="outStartPointSegmentIndex">(out) This is set to the segment index using the point as a start point. Can be NULL.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetSegmentIndexFromStartPointIndex(System.Int64)">
            <summary>
              Converts from a point index to a segment index that uses the given point as a start point. If the point is not a start
              point then a value equivalent to -1 value is returned.
            </summary>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.GetStartPointIndexFromSegmentIndex(System.Int64)">
            <summary>For a segment at a specified segment_index the method returns the point index of the segment's start point.</summary>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.InsertPoint(System.Int64,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>
              Inserts a point into the part at the specified point index. Line segments will be added to connect the point to adjacent
              segments.
            </summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              The points in the part are the start and end points of segments. An existing segment connection the point before or
              after the point index is removed. Inserting a new point will insert new line segments connecting the adjacent points.
              Non-overloaded method: InsertPoint
            </remarks>
            <param name="point">The point to insert.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.InsertPoint(System.Int64,System.Double,System.Double)">
            <summary>
              Inserts a point specified by its x,y coordinate into the part at the specified point index. Line segments will be added
              to connect the point to adjacent segments.
            </summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              The points in the part are the start and end points of segments. An existing segment connection the point before or
              after the point index is removed. Inserting a new point will insert new line segments connecting the adjacent points.
              Non-overloaded method: InsertPointXY
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.InsertPoint(System.Int64,System.Double,System.Double,System.Double)">
            <summary>
              Inserts a point specified by its x,y,z coordinate into the part at the specified point index. Line segments will be
              added to connect the point to adjacent segments.
            </summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              The points in the part are the start and end points of segments. An existing segment connection the point before or
              after the point index is removed. Inserting a new point will insert new line segments connecting the adjacent points.
              Non-overloaded method: InsertPointXYZ
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
            <param name="z">The z coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.InsertSegment(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreSegment)">
            <summary>Inserts a segment into the part at the specified index.</summary>
            <remarks>
              The new segment is inserted at the specified segment_index. This index may be equal to the segment count which is
              equivalent to adding to the end of the collection. The number of points in the part will increase to connect in the new
              segment.
            </remarks>
            <param name="segment">The segment to insert.</param>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.RemoveAll">
            <summary>Remove all segments from the part.</summary>
            <remarks>
              After calling this method the part will be empty.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.RemovePoint(System.Int64)">
            <summary>
              Removes a point from the part. Segments connecting to this point will be removed and the gap filled with a new line
              segment.
            </summary>
            <remarks>
              The points in the part are the start and end points of segments. Removing a point can remove the two adjacent segments.
              A new line segment will reconnect the gap.
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.RemoveSegment(System.Int64)">
            <summary>Remove a segment at the specified index from the part.</summary>
            <remarks>
              If the segment connected to adjacent segments, then after a segment is removed a gap can be left behind.
            </remarks>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.SetPoint(System.Int64,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Replace a point in the part at the specified point index. Segments that use this point will be changed.</summary>
            <remarks>
              The points in the part are the start and end points of segments. Setting a new point will affect 1 or 2 segments using
              the point at the specified index. Affected segments will become LineSegments and reference the new point.
            </remarks>
            <param name="point">The point.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePart.SetSegment(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreSegment)">
            <summary>Replaces a segment at the specified index in the part.</summary>
            <remarks>
              The points of the part can change if the input segment is not coincident with the start and end points of the segment
              that's being replaced.
            </remarks>
            <param name="segment">The segment to be set into the collection.</param>
            <param name="segmentIndex">Zero-based index of the segment.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection">
            <summary>
              A collection object that can be changed containing parts for a geometry. Each part is represented by a
              RT_MutablePartHandle.
            </summary>
            <remarks>
              It must be destroyed by calling RT_MutablePartCollection_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMutablePartCollection class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMutablePartCollection instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a mutable part collection with a specified spatial reference.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_MutablePartCollection_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_MutablePartCollection_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference object, can be NULL.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.IsEmpty">
            <summary>Indicates if the mutable part collection contains no parts.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.Size">
            <summary>Returns the number of parts in the collection.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.SpatialReference">
            <summary>Retrieve the spatial reference for the mutable part collection.</summary>
            <remarks>
              Retrieve the spatial reference for the mutable part collection. If the collection does not have a spatial reference NULL
              is returned. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error
              handler RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.AddPart(RuntimeCoreNet.GeneratedWrappers.CoreMutablePart)">
            <summary>Add a new part to the end of the mutable part collection.</summary>
            <param name="mutablePart">The part to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.GetPart(System.Int64)">
            <summary>Returns a part at the specified index in the collection.</summary>
            <param name="index">The position in the collection.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.IndexOf(RuntimeCoreNet.GeneratedWrappers.CoreMutablePart)">
            <summary>
              Retrieves the position of the segment in the mutable part collection. The first segment that is equal to the supplied
              segment is returned.
            </summary>
            <param name="mutablePart">The part to find</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.InsertPart(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreMutablePart)">
            <summary>Inserts a part into the mutable part collection at the specified part index.</summary>
            <remarks>
              The part index can be equal to the part count and this is equivalent to adding a part to the end of the collection.
            </remarks>
            <param name="index">Zero-based index of the part.</param>
            <param name="mutablePart">The part to insert.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.RemoveAll">
            <summary>Remove all parts from the mutable part collection.</summary>
            <remarks>
              After calling this method the mutable part collection will be empty.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.RemovePart(System.Int64)">
            <summary>Removes a part from the mutable part collection.</summary>
            <param name="index">Zero-based index of the part.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePartCollection.SetPart(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreMutablePart)">
            <summary>Replace a part in the mutable part collection at the specified part index.</summary>
            <param name="index">Zero-based index of the part</param>
            <param name="mutablePart">Collection of segments representing the part</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection">
            <summary>A collection object that can be changed containing points.</summary>
            <remarks>
              Contains a collection of points that can be changed. It must be destroyed by calling RT_MutablePointCollection_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreMutablePointCollection class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreMutablePointCollection instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a mutable point collection with a specified spatial reference.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_MutablePointCollection_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_MutablePointCollection_destroy on the return value.
            </remarks>
            <param name="spatialReference">A spatial reference object, can be NULL.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.IsEmpty">
            <summary>Indicates if the mutable point collection contains no points.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.Size">
            <summary>Returns the number of points in the collection.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.SpatialReference">
            <summary>Retrieve the spatial reference for the mutable point collection.</summary>
            <remarks>
              Retrieve the spatial reference for the mutable point collection. If the collection does not have a spatial reference
              NULL is returned. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the
              error handler RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.AddPoint(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Add a new point to the end of the mutable point collection.</summary>
            <remarks>
              Non-overloaded method: AddPoint
            </remarks>
            <param name="point">The point to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.AddPoint(System.Double,System.Double)">
            <summary>Add a new point to the end of the mutable point collection by specifying the points x,y coordinates.</summary>
            <remarks>
              Non-overloaded method: AddPointXY
            </remarks>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.AddPoint(System.Double,System.Double,System.Double)">
            <summary>Add a new point to the end of the mutable point collection by specifying the points x,y,z coordinates.</summary>
            <remarks>
              Non-overloaded method: AddPointXYZ
            </remarks>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point.</param>
            <param name="z">The z coordinate of the new point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.AddPoints(RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection)">
            <summary>Add a new points to the end of the mutable point collection</summary>
            <remarks>
              Non-overloaded method: AddPoints
            </remarks>
            <param name="points">The new points to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.AddPoints(RuntimeCoreNet.GeneratedWrappers.CoreImmutablePointCollection)">
            <summary>Add a new points to the end of the mutable point collection</summary>
            <remarks>
              Non-overloaded method: AddPointsFromImmutable
            </remarks>
            <param name="points">The new points to add</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.GetPoint(System.Int64)">
            <summary>Returns a point at the specified index in the collection.</summary>
            <param name="index">The position in the collection.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.IndexOf(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>
              Retrieves the position of the point in the mutable point collection. The first point that is equal to the supplied point
              is returned.
            </summary>
            <param name="point">The point to find</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.InsertPoint(System.Int64,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Inserts a point into the mutable point collection at the specified point index.</summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              Non-overloaded method: InsertPoint
            </remarks>
            <param name="point">The point to insert.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.InsertPoint(System.Int64,System.Double,System.Double)">
            <summary>Inserts a point specified by its x,y coordinate into the mutable point collection at the specified point index.</summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              Non-overloaded method: InsertPointXY
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.InsertPoint(System.Int64,System.Double,System.Double,System.Double)">
            <summary>Inserts a point specified by its x,y,z coordinate into the mutable point collection at the specified point index.</summary>
            <remarks>
              The point index can be equal to the point count and this is equivalent to adding a point to the end of the collection.
              Non-overloaded method: InsertPointXYZ
            </remarks>
            <param name="pointIndex">Zero-based index of the point.</param>
            <param name="x">The x coordinate of the new point.</param>
            <param name="y">The y coordinate of the new point</param>
            <param name="z">The z coordinate of the new point</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.RemoveAll">
            <summary>Remove all points from the mutable point collection.</summary>
            <remarks>
              After calling this method the mutable point collection will be empty.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.RemovePoint(System.Int64)">
            <summary>Removes a point from the mutable point collection.</summary>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreMutablePointCollection.SetPoint(System.Int64,RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Replace a point in the mutable point collection at the specified point index.</summary>
            <param name="point">The point.</param>
            <param name="pointIndex">Zero-based index of the point.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources">
            <summary>*Internal Use* A class defines specific interface for loading navigation resources.</summary>
            <remarks>
              Defines specific interface to load resource for voice guidance engine such as abbreviation dictionary and text guidance
              content. This interface should be implemented and cosumed by SDK which manages all resources in a most efficient way.
              The runtime core components should use this interface to load voice guidance resources. You need to pass this handle to
              all navigation resources methods. It must be destroyed by calling RT_NavigationResources_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreNavigationResources class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreNavigationResources instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources)">
            <summary>*Internal Use* Creates a navigation resources object.</summary>
            <remarks>
              Create a navigation resources object. This object must be destroyed by calling function RT_NavigationResources_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a loadabale resources to create navigation resources.
            </remarks>
            <param name="localizedResoures">The localized resources.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.SetLoadAbbreviationDictionaryCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NavigationResources_LoadAbbreviationDictionary)">
            <summary>*Internal Use* Sets load abbreviation JSON dictionary callback.</summary>
            <remarks>
              Returns dictionary with abbreviations in JSON string for specified language. The client of this interfaces is
              responsible to call this method with proper language identifier.
            </remarks>
            <param name="loadAbbreviationDictionary">The load abbreviation json dictionary callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources.SetLoadTextGuidanceContentCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NavigationResources_LoadTextGuidanceContent)">
            <summary>*Internal Use* Sets load text guidance JSON content callback.</summary>
            <remarks>
              Returns Text guidance JSON content for specified language. The client of this interfaces is responsible to call this
              method with proper language identifier.
            </remarks>
            <param name="loadTextGuidanceContent">The load text guidance JSON content callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources">
            <summary>Network analyst localized resources class.</summary>
            <remarks>
              Defines specific interface to load resources for driving directions engine and localized solve messages. You need to
              pass this handle to all network analyst resources functions. It represents an instance of a network analyst resources.
              This is an opaque handle. It must be destroyed by calling RT_NetworkAnalystResources_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreNetworkAnalystResources class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreNetworkAnalystResources instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources)">
            <summary>Creates a network analyst resources object.</summary>
            <remarks>
              Create a network analyst resources object. This object must be destroyed by calling function
              RT_NetworkAnalystResources_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a loadabale resources to create network analyst resources.
            </remarks>
            <param name="localizedResources">The localized resources.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.SetLoadDirectionsJSONContentCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NetworkAnalystResources_LoadDirectionsJSONContent)">
            <summary>Sets load directions JSON content callback.</summary>
            <remarks>
              The callback should return JSON string loaded from resource for specified language. The client of this interfaces
              (Route_task) is responsible to call this method with proper language identifier. The implementation of this interface
              can throw errors.
            </remarks>
            <param name="loadDirectionsJSONContent">The load directions JSON content callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources.SetLoadSolveMessageCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NetworkAnalystResources_LoadSolveMessage)">
            <summary>Sets load solve message callback.</summary>
            <remarks>
              The callback should return a formatted string of solve message using solve code and details. The behavior of this method
              should be similar to behavior of the previous method.
            </remarks>
            <param name="loadSolveMessage">The load solve message callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation">
            <summary>References a specific location/position along a transportation network source feature.</summary>
            <remarks>
              You need to pass this handle to all network location functions. It represents an instance of a network location. This is
              an opaque handle. It must be destroyed by calling RT_NetworkLocation_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreNetworkLocation class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreNetworkLocation instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.#ctor">
            <summary>Creates a netowrk location instance.</summary>
            <remarks>
              Creates a network location object. This object must be destroyed by calling function RT_NetworkLocation_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.OnRightSideOfSource">
            <summary>Gets on right side of source.</summary>
            <remarks>
              Returns True if network element on right side of network source, false - otherwise.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.SourceName">
            <summary>Gets name of the network source.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreNetworkLocation.SourceObjectPosition">
            <summary>Gets source object position.</summary>
            <remarks>
              Returns the position of network element on network source.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource">
            <summary>*Internal Use* A NMEA data source object.</summary>
            <remarks>
              This object allows to parse NMEA messages to RT_LocationHandle object. This is an opaque handle. It must be destroyed by
              calling RT_NMEADataSource_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreNMEADataSource class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreNMEADataSource instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.#ctor">
            <summary>*Internal Use* Creates a NMEA data source object.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.SetOnLocationChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_LocationDisplay_LocationChanged)">
            <summary>*Internal Use* Sets the on location changed callback function for the NMEA data source.</summary>
            <param name="onLocationChangedFn">The data source on location changed callback function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreNMEADataSource.ParseData(System.Byte[])">
            <summary>*Internal Use* Parses NMEA data.</summary>
            <param name="data">The data buffer that contains NMEA data.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy">
            <summary>A handle that represents an ordering in a query's order by clause.</summary>
            <remarks>
              You need to pass this handle to all order by methods. You can get this handle from various functions and the handle must
              be destroyed from RT_OrderBy_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreOrderBy class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreOrderBy instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.#ctor">
            <summary>Creates a new order by handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_OrderBy_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_OrderBy_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreSortOrder)">
            <summary>Creates a new order by handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_OrderBy_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_OrderBy_destroy on the return value.
            </remarks>
            <param name="fieldName">Name of the field.</param>
            <param name="sortOrder">The order.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.FieldName">
            <summary>The field name of the field being ordered by.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreOrderBy.SortOrder">
            <summary>The order that should be applied.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo">
            <summary>A handle that defines ownership-based access control settings of a service.</summary>
            <remarks>
              You need to pass this handle to all ownership based access control functions. You will get this handle from various
              functions and the handle must be destroyed from RT_OwnershipBasedAccessControlInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreOwnershipBasedAccessControlInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreOwnershipBasedAccessControlInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.AllowOthersToDelete">
            <summary>Returns true if others are allowed to delete features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.AllowOthersToQuery">
            <summary>Returns true if others are allowed to query for features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreOwnershipBasedAccessControlInfo.AllowOthersToUpdate">
            <summary>Returns true if others are allowed to update features.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePadding">
            <summary>*Internal Use* A padding object.</summary>
            <remarks>
              This is used to affect the active visible area. This should be mapped to a platform specific type. You need to pass this
              handle to all padding functions. This is an opaque handle. It must be destroyed by calling RT_Padding_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePadding class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePadding instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Create a immutable padding object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Padding_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Padding_destroy on the return value.
            </remarks>
            <param name="bottom">The bottom.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.Bottom">
            <summary>Retrieve the bottom parameter in padding.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.Left">
            <summary>Retrieve the left parameter in padding.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.Right">
            <summary>Retrieve the right parameter in padding.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePadding.Top">
            <summary>Retrieve the top parameter in padding.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType">
            <summary>The list of raster pansharpen types.</summary>
            <remarks>
              This is used to determine the raster pansharpen types.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.None">
            <summary>Pansharpen type is not defined</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.Ihs">
            <summary>IHS (intensity/hue/saturation) pansharpen type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.Brovey">
            <summary>Brovey pansharpen type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.Mean">
            <summary>Mean pansharpen type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.Esri">
            <summary>Esri pansharpen type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePansharpenType.GramSchmidt">
            <summary>Gram-Schmidt pansharpen type</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol">
            <summary>Used to draw point or multipoint features on a layer using an image.</summary>
            <remarks>
              Picture marker symbols display graphics using a picture image. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePictureMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePictureMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.PrivateCreateFromHandleInternal_CorePictureMarkerSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePictureMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePictureMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.#ctor">
            <summary>Creates a picture marker symbol object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreImage)">
            <summary>Creates a picture marker symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="image">The image.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.#ctor(System.String)">
            <summary>Creates a picture marker symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="url">URL of the image.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.URL">
            <summary>Get the URL of the picture marker symbol.</summary>
            <remarks>
              Get the URL of the picture marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.Height">
            <summary>Get the height of the picture marker symbol.</summary>
            <remarks>
              Get the height of the picture marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.Image">
            <summary>Returns the image of the picture marker symbol.</summary>
            <remarks>
              Error Types: &lt;c_api/mapping/symbol/picture_marker_symbol.h&gt;
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.Opacity">
            <summary>Get the opacity for the symbol.</summary>
            <remarks>
              Get the opacity for the symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.Width">
            <summary>Get the width of the picture marker symbol.</summary>
            <remarks>
              Get the width of the picture marker symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the symbol is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the symbol has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the symbol needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol)">
            <summary>Check if 2 line PictureMarkerSymbols are equal.</summary>
            <remarks>
              Check PictureMarkerSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="pictureMarkerSymbol2">The 2nd PictureMarkerSymbol object to check to see if equal to the 1st PictureMarkerSymbol object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.Load">
            <summary>Loads the picture marker symbol.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePictureMarkerSymbol.RetryLoad">
            <summary>Retry loading the picture marker symbol.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePoint">
            <summary>A point object which is derived from a geometry object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all point functions. The point class is derived from the geometry class. It must be destroyed by calling
              RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePoint class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePoint instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.PrivateCreateFromHandleInternal_CorePoint(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePoint class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePoint instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.#ctor(System.Double,System.Double)">
            <summary>Creates a point with an x, y and a NULL spatial reference.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.#ctor(System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a point with an x, y and a spatial reference.</summary>
            <remarks>
              Creates a point with x, y for the coordinates and a spatial reference. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>Creates a point with an x, y, z and a NULL spatial reference.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <param name="z">The z coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.#ctor(System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a point with an x, y, z and spatial reference.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <param name="z">The z coordinate for the point.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePoint.M">
            <summary>Retrieve the m coordinate for the point.</summary>
            <remarks>
              Retrieve the m coordinate for the point. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePoint.X">
            <summary>Retrieve the x coordinate for the point.</summary>
            <remarks>
              Retrieve the x coordinate for the point. Will return NAN if an error occurs.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePoint.Y">
            <summary>Retrieve the y coordinate for the point.</summary>
            <remarks>
              Retrieve the y coordinate for the point. Will return NAN if an error occurs.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePoint.Z">
            <summary>Retrieve the z coordinate for the point.</summary>
            <remarks>
              Retrieve the z coordinate for the point. NAN if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.CreateWithM(System.Double,System.Double,System.Double)">
            <summary>Creates a point with an x, y, m coordinates and a NULL spatial reference.</summary>
            <remarks>
              Non-overloaded method: CreateWithM
            </remarks>
            <param name="m">The m value for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.CreateWithM(System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a point with an x, y, m and spatial reference.</summary>
            <remarks>
              Non-overloaded method: CreateWithMSpatialReference
            </remarks>
            <param name="m">The m value for the point.</param>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.CreateWithM(System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a point with an x, y, z, m coordinates.</summary>
            <remarks>
              Non-overloaded method: CreateWithZM
            </remarks>
            <param name="m">The m value for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <param name="z">The z coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.CreateWithM(System.Double,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a point with an x, y, z, m and a spatial reference.</summary>
            <remarks>
              Non-overloaded method: CreateWithZMSpatialReference
            </remarks>
            <param name="m">The m value for the point.</param>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <param name="z">The z coordinate for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePoint.Values(System.Double@,System.Double@,System.Double@,System.Double@,System.Int64@,RuntimeCoreNet.GeneratedWrappers.CoreGeometryFlags@)">
            <summary>*Internal Use* Retrieves the values of the point.</summary>
            <remarks>
              Retrieves the values of the point.
            </remarks>
            <param name="outGeometryFlags">(out) The geometry flags.</param>
            <param name="outHash">(out) The hash value.</param>
            <param name="outM">(out) The M value.</param>
            <param name="outX">(out) The X value.</param>
            <param name="outY">(out) The Y value.</param>
            <param name="outZ">(out) The Z value.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier">
            <summary>A point barrier object is used to restrcit route solving.</summary>
            <remarks>
              A class that represents a point location to be avoided (or penalized) by a route. Point_barrier may represent a
              restricted location to be avoided by a route (e.g., a car accident) or a location at which some additional delay occurs
              if visited along a route (e.g., a railroad crossing). Changing type just to make it clear you get back a derived type.
              You need to pass this handle to all point barrier functions. The point barrier class is derived from the graphic class.
              It must be destroyed by calling RT_PointBarrier_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePointBarrier class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePointBarrier instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates a point barrier instance.</summary>
            <remarks>
              Creates a point barrier.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a geometry to create the stop.
            </remarks>
            <param name="point">A point.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.CurbApproach">
            <summary>Gets point barrier's curb approach.</summary>
            <remarks>
              Returns the curb approach.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              Returns the user's custom data.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.Geometry">
            <summary>Gets point barrier's geometry.</summary>
            <remarks>
              Returns the point of barrier.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.LocationStatus">
            <summary>Gets location status.</summary>
            <remarks>
              Returns a location status of the point barrier.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.Type">
            <summary>Gets point barrier's type.</summary>
            <remarks>
              Returns the type of barrier.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <remarks>
              Creates instance of point barrier object from JSON presentation.
            </remarks>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.GetAddedCost(System.String)">
            <summary>Gets added cost.</summary>
            <remarks>
              Get the amount of additional cost that has been added for a particular attribute on this Stop. If no cost has been
              added, or an incorrect name is specified, a value of zero will be returned.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.SetAddedCost(System.String,System.Double)">
            <summary>Sets added cost.</summary>
            <remarks>
              Set the amount of additional cost for an attribute by name. Any additional cost, e.g. Minutes, TravelTime, Kilometers,
              can be modified with this method.
            </remarks>
            <param name="addedCost">The added cost.</param>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBarrier.ToJSON">
            <summary>Converts an object to JSON string.</summary>
            <remarks>
              Creates JSON presentation of point barrier from it instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder">
            <summary>The point builder object is used to create a point.</summary>
            <remarks>
              The point builder object is used to create points. It represents an instance of a point builder. You cannot directly
              access point builder properties. This is an opaque handle. It must be destroyed by calling RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePointBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePointBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.PrivateCreateFromHandleInternal_CorePointBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePointBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePointBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a point builder.</summary>
            <remarks>
              Creates a point builder. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="spatialReference">The builder's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates a point builder from a point.</summary>
            <remarks>
              Creates a point builder from a point. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="point">The point object.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.M">
            <summary>Retrieve the m coordinate for the point.</summary>
            <remarks>
              Retrieve the m coordinate for the point. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.X">
            <summary>Retrieve the x coordinate for the point.</summary>
            <remarks>
              Retrieve the x coordinate for the point. Will return NAN if an error occurs.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.Y">
            <summary>Retrieve the y coordinate for the point.</summary>
            <remarks>
              Retrieve the y coordinate for the point. Will return NAN if an error occurs.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.Z">
            <summary>Retrieve the z coordinate for the point.</summary>
            <remarks>
              Retrieve the z coordinate for the point. Will return NAN if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.Normalize">
            <summary>*Internal Use* Adjusts the points's x ordinate to be within the bounds of the assigned spatial reference.</summary>
            <remarks>
              Non-overloaded method: Normalize
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.Normalize(RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>*Internal Use* Normalizes the envelope to the passed in envelope.</summary>
            <remarks>
              Non-overloaded method: NormalizeToEnvelope
            </remarks>
            <param name="envelope">The envelope to normalize against.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.Normalize(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>*Internal Use* Normalizes the point for wraparound.</summary>
            <remarks>
              Non-overloaded method: NormalizeToPointClosestTo
            </remarks>
            <param name="target">The target point within the spatial reference's bounds to normalize to.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.OffsetBy(System.Double,System.Double)">
            <summary>Offsets the envelope by the given offsets for the x and y dimension.</summary>
            <param name="offsetX">The number of units to move the envelope on the x axis.</param>
            <param name="offsetY">The number of units to move the envelope on the y axis.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.SetXY(System.Double,System.Double)">
            <summary>Sets the x and y ordinates of a point.</summary>
            <remarks>
              Sets the x and y ordinates of a point.
            </remarks>
            <param name="x">The new x ordinate value for the point.</param>
            <param name="y">The new y ordinate value for the point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePointBuilder.ToPointFromValues(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>*Internal Use* Creates a point with an x, y, z, m and spatial reference.</summary>
            <remarks>
              Creates a point with x, y, z, m for the coordinates and a spatial reference. This object must be destroyed by calling
              function RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
            <param name="hasM">The m value should be used.</param>
            <param name="hasZ">The z value should be used.</param>
            <param name="m">The m value for the point.</param>
            <param name="spatialReference">The spatial reference for the point.</param>
            <param name="x">The x coordinate for the point.</param>
            <param name="y">The y coordinate for the point.</param>
            <param name="z">The z coordinate for the point.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolygon">
            <summary>A Polygon object which is derived from a Multipart object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all polygon functions. The polyline class is derived from the Multipart class. It must be destroyed by calling
              RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygon.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygon.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolygon class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolygon instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygon.PrivateCreateFromHandleInternal_CorePolygon(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolygon class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolygon instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygon.ToPolyline">
            <summary>Creates a polyline containing paths for all the rings in this polygon.</summary>
            <remarks>
              Creates a polyline object that matches the geometry of this polygon. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier">
            <summary>A polygon barrier object is used to restrict route solving.</summary>
            <remarks>
              A class that represents a polygon feature to be avoided (or penalized) by a route. Polygon_barrier may represent a
              regional area of interest within the network to be avoided (i.e., not entered) by a route (e.g., a flood zone) or to
              penalize/delay a route within any portions of the area traversed by the route (e.g., a busy downtown area or a bad
              neighborhood). Changing type just to make it clear you get back a derived type. You need to pass this handle to all
              polygin barrier functions. The polygon barrier class is derived from the graphic class. It must be destroyed by calling
              RT_PolygonBarrier_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolygonBarrier class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolygonBarrier instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePolygon)">
            <summary>Creates a polygon barrier instance.</summary>
            <remarks>
              Creates a polygon barrier.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a geometry to create the stop.
            </remarks>
            <param name="polygon">A polygon.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              Returns user's custom data.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.Geometry">
            <summary>Gets polygon barrier's geometry.</summary>
            <remarks>
              Returns polygon of the barrier.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.Type">
            <summary>Gets polygon barrier's type.</summary>
            <remarks>
              Returns polygon barrier's type.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <remarks>
              Creates instance of polygon barrier based on JSON presentation.
            </remarks>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.GetScaleFactorForCost(System.String)">
            <summary>Gets scale factor for cost.</summary>
            <remarks>
              Returns scale factor for cost.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.SetScaleFactorForCost(System.String,System.Double)">
            <summary>Sets scale factor for cost.</summary>
            <remarks>
              Sets scale factor for cost.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
            <param name="scaleFactor">The scale factor for cost.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBarrier.ToJSON">
            <summary>Converts an object to JSON string.</summary>
            <remarks>
              Creates JSON presentation of object based on it real instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder">
            <summary>The polygon builder object is used to create a polygon.</summary>
            <remarks>
              The polygon builder object is used to create a polygon. It represents an instance of a polygon builder. You cannot
              directly access polygon builder properties. This is an opaque handle. It must be destroyed by calling
              RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolygonBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolygonBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.PrivateCreateFromHandleInternal_CorePolygonBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolygonBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolygonBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a polygon builder.</summary>
            <remarks>
              Creates a polygon builder. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="spatialReference">The builder's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePolygon)">
            <summary>Creates a polygon builder from a polygon.</summary>
            <remarks>
              Creates a polygon builder from a polygon. This object must be destroyed by calling function RT_GeometryBuilder_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="polygon">A polygon object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.#ctor(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>*Internal Use* Creates an empty polygon builder with capacity space reserved for use.</summary>
            <remarks>
              Creates a polygon builder from a polygon. This object must be destroyed by calling function RT_GeometryBuilder_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="capacity">The total number of points to reserve space for.</param>
            <param name="spatialReference">The spatial reference of the polygon.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.ExtractPolygon">
            <summary>*Internal Use* Creates a polygon with the values in the polygon builder.</summary>
            <remarks>
              Creates the polygon object described by this builder. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolygonBuilder.ToPolyline">
            <summary>Creates a polyline with the values in the polygon builder.</summary>
            <remarks>
              Creates the polyline object described by this builder. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolyline">
            <summary>A Polyline object which is derived from a Multipart object.</summary>
            <remarks>
              Same as a RT_GeometryHandle. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all polyline functions. The polyline class is derived from the Multipart class. It must be destroyed by
              calling RT_Geometry_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolyline.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolyline.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolyline class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolyline instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolyline.PrivateCreateFromHandleInternal_CorePolyline(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolyline class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolyline instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier">
            <summary>A polyline barrier is used to restrict route solving.</summary>
            <remarks>
              A class that represents a linear feature to be avoided (or penalized) by a route. Polyline_barrier may represent a
              linear feature (e.g., a subpath in the network) to be avoided (i.e., not crossed or followed) by a route or to
              penalize/delay a route along any portions of the feature traversed by the route (e.g., a stretch of interstate with
              temporarily reduced speed limits due to local construction along an adjacent lane). Changing type just to make it clear
              you get back a derived type. You need to pass this handle to all polyline barrier functions. The polyline barrier class
              is derived from the graphic class. It must be destroyed by calling RT_PolylineBarrier_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolylineBarrier class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolylineBarrier instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePolyline)">
            <summary>Creates a polyline barrier instance.</summary>
            <remarks>
              Creates a polyline barrier.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a geometry to create the stop.
            </remarks>
            <param name="polyline">A polyline.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              Returns user's custom data.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.Geometry">
            <summary>Gets polyline barrier's geometry.</summary>
            <remarks>
              Returns a polyline of barrier.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.Type">
            <summary>Gets point barrier's type.</summary>
            <remarks>
              Returns a type of polilyne barrier.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <remarks>
              Creates instance of polyline barrier object based on JSON presentation.
            </remarks>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.GetScaleFactorForCost(System.String)">
            <summary>Gets scale factor for cost.</summary>
            <remarks>
              Returns scale factor for cost.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.SetScaleFactorForCost(System.String,System.Double)">
            <summary>Sets scale factor for cost.</summary>
            <remarks>
              Sets scale factor for cost.
            </remarks>
            <param name="attributeName">The name of attribute.</param>
            <param name="scaleFactor">The scale factor for cost.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBarrier.ToJSON">
            <summary>Converts an object to JSON string.</summary>
            <remarks>
              Creates JSON presentation of polyline barrier object.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder">
            <summary>The polyline builder object is used to create a polyline.</summary>
            <remarks>
              The polyline builder object is used to create a polyline. It represents an instance of a polyline builder. You cannot
              directly access polyline builder properties. This is an opaque handle. It must be destroyed by calling
              RT_GeometryBuilder_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolylineBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolylineBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.PrivateCreateFromHandleInternal_CorePolylineBuilder(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePolylineBuilder class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePolylineBuilder instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Creates a polyline builder.</summary>
            <remarks>
              Creates a polyline builder. This object must be destroyed by calling function RT_GeometryBuilder_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="spatialReference">The builder's spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePolyline)">
            <summary>Creates a polyline builder from a polyline.</summary>
            <remarks>
              Creates a polyline builder from a polyline. This object must be destroyed by calling function
              RT_GeometryBuilder_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="polyline">A polyline object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.#ctor(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>*Internal Use* Creates an empty polyline builder with capacity space reserved for use.</summary>
            <remarks>
              Creates a polyline builder from a polyline. This object must be destroyed by calling function
              RT_GeometryBuilder_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_GeometryBuilder_destroy on the return value.
            </remarks>
            <param name="capacity">The total number of points to reserve space for.</param>
            <param name="spatialReference">The spatial reference of the polyline.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePolylineBuilder.ExtractPolyline">
            <summary>*Internal Use* Creates a polyline with the values in the polyline builder.</summary>
            <remarks>
              Creates the polyline object described by this builder. This object must be destroyed by calling function
              RT_Geometry_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopup">
            <summary>Represents a pop-up which is basically a pair (GeoElement, PopupDefinition).</summary>
            <remarks>
              The handle must be destroyed from RT_Popup_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopup class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopup instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreElement,RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition)">
            <summary>Create a new popup from a geo element and a popup definition.</summary>
            <remarks>
              Warning: You must call RT_Popup_destroy on the return value.
            </remarks>
            <param name="geoElement">An RT_ElementHandle containing an object that implements RT_GeoElementInterface</param>
            <param name="popupDefinition">A RT_PopupDefinitionHandle.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopup.EditSummary">
            <summary>Gets the popup edit summary.</summary>
            <remarks>
              Returns NULL is returned if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopup.GeoElement">
            <summary>Gets the geo element of the popup.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopup.PopupDefinition">
            <summary>Gets the popup definition of the popup.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopup.Symbol">
            <summary>Gets the popup symbol.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopup.Title">
            <summary>Gets the popup title.</summary>
            <remarks>
              Returns NULL is returned if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.FromGeoElement(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>
              Creates a new popup from a GeoElement. This method creates a default RT_PopupDefinitionHandle based on the given
              GeoElement.
            </summary>
            <remarks>
              Warning: You must call RT_Popup_destroy on the return value.
            </remarks>
            <param name="geoElement">An RT_ElementHandle containing an object that implements RT_GeoElementInterface</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopup.GetFormattedValue(RuntimeCoreNet.GeneratedWrappers.CorePopupField)">
            <summary>Gets the formatted value of the popup field.</summary>
            <param name="popupField">The popup field handle.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat">
            <summary>Format of a date field in a pop-up.</summary>
            <remarks>
              Controls how a date field is displayed a pop-up.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.DayShortMonthYear">
            <summary>Example: 30 Dec 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.LongDate">
            <summary>Example: Tuesday, December 30, 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.LongMonthDayYear">
            <summary>Example: December 30, 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.LongMonthYear">
            <summary>Example: December 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDate">
            <summary>Example: 12/30/1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLE">
            <summary>Example: 30/12/1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLELongTime">
            <summary>Example: 30/12/1997 5:59:59 PM</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLELongTime24">
            <summary>Example: 30/12/1997 17:59:59</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLEShortTime">
            <summary>Example: 30/12/1997 6:00 PM</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLEShortTime24">
            <summary>Example: 30/12/1997 18:00</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLongTime">
            <summary>Example: 12/30/1997 5:59:59 PM</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateLongTime24">
            <summary>Example: 12/30/1997 17:59:59</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateShortTime">
            <summary>Example: 12/30/1997 6:00 PM</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortDateShortTime24">
            <summary>Example: 12/30/1997 18:00</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.ShortMonthYear">
            <summary>Example: Dec 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.Year">
            <summary>Example: 1997</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupDateFormat.Unknown">
            <summary>Unknown date format.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition">
            <summary>Represents the look and feel of pop-ups.</summary>
            <remarks>
              The handle must be destroyed from RT_PopupDefinition_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopupDefinition class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopupDefinition instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.#ctor">
            <summary>Create a new popup definition.</summary>
            <remarks>
              Use this object to define the look and feel of pop-up windows when users click or query a feature. This object must be
              destroyed by calling function RT_PopupDefinition_destroy. If an error occurs the error handler RT_ErrorHandler will be
              called.
              Warning: You must call RT_PopupDefinition_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.AllowDelete">
            <summary>Gets a flag indicating whether the popup should allow the associated GeoElement to be deleted.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.AllowEdit">
            <summary>Gets a flag indicating whether the popup should allow the associated GeoElement to be edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.AllowEditGeometry">
            <summary>Gets a flag indicating whether the popup should allow the geometry of the associated GeoElement to be edited.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.Description">
            <summary>Gets a string that appears in the body of the pop-up window as a description.</summary>
            <remarks>
              The description can contain a literal value, or a placeholder for value from the geo element's attribute. The
              placeholder needs to be of the form {field_name} where field_name is a key in the geo element's attributes
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.Fields">
            <summary>Gets a vector of RT_PopupFieldHandle objects defining how each field participates in the pop-up window.</summary>
            <remarks>
              The order of the vector is the order that fields are shown in the pop-up window.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonInvalidArgument
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.Medias">
            <summary>Gets a vector of RT_PopupMediaHandle objects that define images and charts displayed in the pop-up window.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.ShowAttachments">
            <summary>Gets a flag determining whether attachments will be loaded for feature layers that have attachments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.ShowEditSummary">
            <summary>Gets a flag indicating whether the popup should display the edit summary of the associated GeoElement.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.ShowRelatedRecords">
            <summary>Gets a flag indicating whether the popup should display the related records of the associated GeoElement.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.Title">
            <summary>Gets a string that appears at the top of the pop-up window as a title.</summary>
            <remarks>
              The title can contain a literal value, or a placeholder for value from the geo element's attribute. The placeholder
              needs to be of the form {field_name} where field_name is a key in the geo element's attributes
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.FromGeoElement(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Create a new popup definition from a geo element.</summary>
            <remarks>
              Use this object to define the look and feel of pop-up windows when users click or query a feature. This object must be
              destroyed by calling function RT_PopupDefinition_destroy. If an error occurs the error handler RT_ErrorHandler will be
              called.
              Warning: You must call RT_PopupDefinition_destroy on the return value.
            </remarks>
            <param name="geoElement">An RT_ElementHandle containing an object that implements RT_GeoElementInterface</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupDefinition.FromPopupSource(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>Create a new popup definition from a popup source.</summary>
            <remarks>
              Use this object to define the look and feel of pop-up windows when users click or query a feature. This object must be
              destroyed by calling function RT_PopupDefinition_destroy. If an error occurs the error handler RT_ErrorHandler will be
              called.
              Warning: You must call RT_PopupDefinition_destroy on the return value.
            </remarks>
            <param name="popupSource">An RT_ElementHandle containing an object that implements RT_PopupSourceInterface</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupField">
            <summary>Represents how a geoelement's attribute (field) should be displayed in a pop-up.</summary>
            <remarks>
              The handle must be destroyed from RT_PopupField_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupField.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupField.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupField.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupField.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopupField class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopupField instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupField.#ctor">
            <summary>Create a new popup field object.</summary>
            <remarks>
              Use a popup field object to define how a field in the dataset participates (or does not participate) in a pop-up window.
              This object must be destroyed by calling function RT_PopupField_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_PopupField_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.FieldName">
            <summary>Gets the field name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.Format">
            <summary>Gets the format used to display the field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.IsEditable">
            <summary>Gets a flag indicating whether users can edit the field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.IsVisible">
            <summary>Gets a flag indicating whether the field is visible in the pop-up.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.Label">
            <summary>Gets the field label.</summary>
            <remarks>
              The field label (alias) can be overridden by the web map author.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.StringFieldOption">
            <summary>Gets the type of input box editors see when editing the field.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupField.Tooltip">
            <summary>Gets a string providing an editing hints for editors of the field.</summary>
            <remarks>
              This string can provide a short description of the field and how editors should format or supply its value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat">
            <summary>
              Represents the formatting of a field when used in the application. Applies only to fields of type date or number (float,
              double, integer).
            </summary>
            <remarks>
              The handle must be destroyed from RT_PopupFieldFormat_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopupFieldFormat class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopupFieldFormat instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.#ctor">
            <summary>Create a new popup field format.</summary>
            <remarks>
              Use this object with numerical or date fields to provide more detail about how values should be displayed in web map
              pop-up windows. This object must be destroyed by calling function RT_PopupFieldFormat_destroy. If an error occurs the
              error handler RT_ErrorHandler will be called.
              Warning: You must call RT_PopupFieldFormat_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.DateFormat">
            <summary>Gets the format used to display a date field in a pop-up.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.DecimalPlaces">
            <summary>Gets the number of supported decimal places that should appear for displaying a numerical field in a pop-up.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupFieldFormat.UseThousandsSeparator">
            <summary>
              Gets a flag indicating whether a numerical field may use the thousands (or digit) separator when the field is displayed
              in a pop-up.
            </summary>
            <remarks>
              Depending on the locale, the thousands separator is a decimal point, a comma or a blank.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia">
            <summary>Represents the media that is displayed in a pop-up for a geo-element.</summary>
            <remarks>
              The handle must be destroyed from RT_PopupMedia_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopupMedia class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopupMedia instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.#ctor">
            <summary>Create a new popup media.</summary>
            <remarks>
              Use this object to define an image or a chart to be displayed in a pop-up window. This object must be destroyed by
              calling function RT_PopupMedia_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_PopupMedia_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.Caption">
            <summary>Gets the caption that is displayed for the media.</summary>
            <remarks>
              This can contain a literal value, or a placeholder for value from the geoelement's attribute for which the pop-up is
              displayed. The placeholder needs to be of the form {field_name} where field_name is a key in the geoelement's
              attributes.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.Title">
            <summary>Gets the title that is displayed for the media.</summary>
            <remarks>
              This can contain a literal value, or a placeholder for value from the geoelement's attribute for which the pop-up is
              displayed. The placeholder needs to be of the form {field_name} where field_name is a key in the geoelement's
              attributes.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.Type">
            <summary>Gets the type of media.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMedia.Value">
            <summary>Gets the optional popup media value that are depending on the type of media.</summary>
            <remarks>
              Returns NULL if an error occurs or if the popup media has no associated value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType">
            <summary>Type of media in a pop-up.</summary>
            <remarks>
              Controls the type of media inside a pop-up.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.Image">
            <summary>Image.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.BarChart">
            <summary>Bar chart.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.ColumnChart">
            <summary>Column chart.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.LineChart">
            <summary>Line chart.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.PieChart">
            <summary>Pie chart.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaType.Unknown">
            <summary>Unknown media type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue">
            <summary>Represents the popup media values that are depending on the type of media.</summary>
            <remarks>
              The handle must be destroyed from RT_PopupMediaValue_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePopupMediaValue class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePopupMediaValue instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.#ctor">
            <summary>Create a new popup media value object.</summary>
            <remarks>
              This value object contains information about how the image should be retrieved or how the chart should be constructed.
              This object must be destroyed by calling function RT_PopupMediaValue_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_PopupMediaValue_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.FieldNames">
            <summary>Gets the fields to display in the chart.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.LinkURL">
            <summary>Gets the link URL for an image media.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.NormalizeFieldName">
            <summary>Gets the optional field used to normalize the chart.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.SourceURL">
            <summary>Gets the source URL for an image media.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePopupMediaValue.TooltipFieldName">
            <summary>Gets the tooltip field name.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePopupStringFieldOption">
            <summary>Type of input box editors see when editing the field in a po-pup.</summary>
            <remarks>
              Controls the type of input box editors inside a pop-up.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupStringFieldOption.SingleLine">
            <summary>A single-line input box.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupStringFieldOption.MultiLine">
            <summary>A multi-line input box.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupStringFieldOption.RichText">
            <summary>A rich text editor allowing for bold text, highlighting, and so forth.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePopupStringFieldOption.Unknown">
            <summary>Unknown string field option.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePortal">
            <summary>A handle that represents a portal.</summary>
            <remarks>
              You need to pass this handle to all portal functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Portal_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePortal class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePortal instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.#ctor(System.String)">
            <summary>Creates a portal object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Portal_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Portal_destroy on the return value.
            </remarks>
            <param name="url">The URL to the portal.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortal.URL">
            <summary>Returns the URL of the specified portal.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortal.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortal.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortal.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.Load">
            <summary>Loads the specified portal.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortal.RetryLoad">
            <summary>Retry loading the portal.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess">
            <summary>Indicates the level of access to this portal object: private, shared, organization, or public.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess.Unknown">
            <summary>An unknown portal access</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess.Organization">
            <summary>Organization level of access.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess.Private">
            <summary>Private access.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess.Public">
            <summary>Public access.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalAccess.Shared">
            <summary>Shared access.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePortalItem">
            <summary>A handle that represents a portal item.</summary>
            <remarks>
              You need to pass this handle to all portal items functions. You will get this handle from various functions and the
              handle must be destroyed from RT_Item_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePortalItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePortalItem instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PrivateCreateFromHandleInternal_CorePortalItem(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CorePortalItem class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CorePortalItem instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CorePortal)">
            <summary>Creates a portal item object from a JSON string and a portal.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Item_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Item_destroy on the return value.
            </remarks>
            <param name="jSON">The JSON representation of the portal item.</param>
            <param name="portal">The portal.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePortal)">
            <summary>Creates a new portal item object for a specified portal.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Item_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Item_destroy on the return value.
            </remarks>
            <param name="portal">The portal.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePortal,System.String)">
            <summary>Creates a portal item object for a specified portal and a specified item ID.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Item_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Item_destroy on the return value.
            </remarks>
            <param name="itemID">The item ID.</param>
            <param name="portal">The portal.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.#ctor(System.String)">
            <summary>Creates a portal item object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Item_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Item_destroy on the return value.
            </remarks>
            <param name="url">The URL to the portal item.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.GUID">
            <summary>Returns the GUID of the portal item.</summary>
            <remarks>
              Returns the GUID of the portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.URL">
            <summary>Returns the URL of the specified portal.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Access">
            <summary>Returns the portal item access.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.AvgRating">
            <summary>Returns the average rating of the portal item.</summary>
            <remarks>
              Returns the average rating of the portal item. Uses a weighted average called "Bayesian average." Will return -1 if an
              error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.CommentsEnabled">
            <summary>Returns a flag indicating whether the comments are allowed on the portal item.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Culture">
            <summary>Returns the culture of the portal item.</summary>
            <remarks>
              Returns the culture (language and country) of the portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.FolderID">
            <summary>*Internal Use* Gets the folder ID of the portal item.</summary>
            <remarks>
              A NULL folderID means either an error or that the folderID is unknown i.e. that the portal item request was done without
              the credentials allowing to access to the user item. An empty folderID means that the item is stored at the root folder
              of the user directory.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.License">
            <summary>Returns any license information or restrictions on the portal item.</summary>
            <remarks>
              Returns license information or restrictions on the portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.NumComments">
            <summary>Returns the number of comments on the portal item.</summary>
            <remarks>
              Returns the number of comments on the portal item. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.NumRatings">
            <summary>Returns the number of ratings on the portal item.</summary>
            <remarks>
              Returns the number of ratings on the portal item. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.NumViews">
            <summary>Returns the number of views of the portal item.</summary>
            <remarks>
              Returns the number of views of the portal item. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Owner">
            <summary>Returns the username of the user who owns this portal item.</summary>
            <remarks>
              Returns the username of the user who owns this portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Portal">
            <summary>Returns the portal of the specified portal item.</summary>
            <remarks>
              Returns the portal of the specified portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.ServiceURL">
            <summary>
              Returns the URL of the service that the portal item represents. Applies only to items that represent web-accessible
              resources such as map services.
            </summary>
            <remarks>
              Returns the URL of the service that the portal item represents. Will return NULL if an error occurs and an empty string
              if the item doesn't represent a web-accessible resource.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Size">
            <summary>Returns the size of the portal item.</summary>
            <remarks>
              Returns the size of the portal item. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Type">
            <summary>Returns the GIS content type of this portal item.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.TypeKeywords">
            <summary>
              Returns a set of keywords that further describes the type of this portal item. Each item is tagged with a set of type
              keywords that are derived based on its primary type.
            </summary>
            <remarks>
              Returns the type keywords of the specified portal item. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the load status of the object has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback invoked when the object needs to have the client provide additional data.</summary>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.CancelLoad">
            <summary>Cancels the previous load operation,</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.Load">
            <summary>Loads the specified portal item.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PortalAccessFromString(System.String)">
            <summary>*Internal Use* Converts a string to a RT_PortalAccess.</summary>
            <remarks>
              For internal use only. Useful while all portal objects are not deserialized by C_API.
              Error Types: RT_ErrorType_commonInvalidArgument
            </remarks>
            <param name="access">The portal access as a string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PortalAccessToString(RuntimeCoreNet.GeneratedWrappers.CorePortalAccess)">
            <summary>*Internal Use* Converts a RT_PortalAccess to a RT_StringHandle.</summary>
            <remarks>
              For internal use only. Useful while all portal objects are not deserialized by C_API.
              Error Types: RT_ErrorType_commonInvalidArgument RT_PortalAccess_unknown can't be converted to string.
            </remarks>
            <param name="access">The portal access as a RT_PortalAccess.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PortalItemTypeFromString(System.String)">
            <summary>*Internal Use* Converts a string to a RT_PortalItemType.</summary>
            <remarks>
              For internal use only. Useful while all portal objects are not deserialized by C_API.
              Error Types: RT_ErrorType_commonInvalidArgument
            </remarks>
            <param name="type">The portal item type as string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.PortalItemTypeToString(RuntimeCoreNet.GeneratedWrappers.CorePortalItemType)">
            <summary>*Internal Use* Converts a RT_PortalItemType to a RT_StringHandle.</summary>
            <remarks>
              For internal use only. Useful while all portal objects are not deserialized by C_API.
              Error Types: RT_ErrorType_commonInvalidArgument RT_PortalItemType_unknown can't be converted to string.
            </remarks>
            <param name="type">The portal access as a RT_PortalItemType.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CorePortalItem.RetryLoad">
            <summary>Retry loading the portal item.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType">
            <summary>An enumeration of various types of portal items.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.Unknown">
            <summary>An unknown portal item type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ArcPadPackage">
            <summary>ArcPad Package (zip)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.CSV">
            <summary>
              A text file of data values separated by commas or other delimiters. Can be published as a feature service using the
              Portal API Publish call.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.CityEngineWebScene">
            <summary>A city engine web scene.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.CodeAttachment">
            <summary>The sample code associated with an application whose purpose is code sample.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.CodeSample">
            <summary>A code sample.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ColorSet">
            <summary>A color set.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.DesktopAddIn">
            <summary>ArcGIS Add-In (esriaddin)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.DesktopApplicationTemplate">
            <summary>The Desktop Application Template (zip) includes either a desktop add in or a toolbar.exe.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.DocumentLink">
            <summary>Link to a web resource</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ExplorerAddIn">
            <summary>ArcGIS Explorer Layer (eaz)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ExplorerLayer">
            <summary>ArcGIS Explorer Layer (nmc)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ExplorerMap">
            <summary>ArcGIS Explorer Document (nmf)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.FeatureCollection">
            <summary>
              A feature collection is a saved web map feature layer with layer definition (types, symbols, fields, and so on) and a
              feature set (the actual features).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.FeatureCollectionTemplate">
            <summary>A feature collection that includes the layer definition component.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.FeatureService">
            <summary>
              A feature service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL). Optional JSON data contains overridden service properties.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeocodingService">
            <summary>
              ArcGIS Server Geocoding Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeodataService">
            <summary>
              ArcGIS Server Geodata Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeometryService">
            <summary>
              ArcGIS Server Geometry Service The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeoprocessingPackage">
            <summary>ArcGIS Geoprocessing Package (gpk) or ArcGIS Pro Geoprocessing Package (gpkx)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeoprocessingSample">
            <summary>Geoprocessing Sample.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GeoprocessingService">
            <summary>
              ArcGIS Server Geoprocessing Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GlobeDocument">
            <summary>ArcGlobe Document (3dd)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.GlobeService">
            <summary>
              ArcGIS Server Globe Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.Image">
            <summary>Image Types (.jpg, .jpeg, .tif, .tiff, .png)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ImageService">
            <summary>
              An image service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL). Optional JSON data contains overridden service properties.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.KML">
            <summary>
              KML Network Link or KML file. If a file, then the data resource retrieves the file and can be used as a network link. If
              a network link, then the serviceURL property of the item (see RT_PortalItem_getServiceURL) contains the URL for the
              network link.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.Layer">
            <summary>Layer File (lyr) or ArcGIS Pro layer file (lyrx).</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.LayerPackage">
            <summary>Layer Package (lpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.LocatorPackage">
            <summary>ArcGIS Locator Package (gcpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MapDocument">
            <summary>ArcMap Document r(mxd)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MapPackage">
            <summary>ArcGIS Map Package (mpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MapService">
            <summary>
              A map service. The URL to the serviice is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL). Optional JSON data contains overridden service properties.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MapTemplate">
            <summary>The Map Template (.zip) contains documentation, a map, and GDB folder.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MicrosoftExcel">
            <summary>Microsoft Excel Document (.xls, .xlsx)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MicrosoftWord">
            <summary>Microsoft Word Document (.doc, .docx)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MobileApplication">
            <summary>
              A mobile application. The URL to the application in the app store is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.MobileMapPackage">
            <summary>ArcGIS Mobile Map Package (mmpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.NetworkAnalysisService">
            <summary>
              ArcGIS Server Network Analyst Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.OperationView">
            <summary>An operation view.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.OperationsDashboardAddIn">
            <summary>ArcGIS Operations Dashboard Add In (opdashboardaddin)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.PDF">
            <summary>Portable Document Format (.pdf)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.PublishedMap">
            <summary>ArcReader Document (pmf)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.SceneDocument">
            <summary>ArcScene Document (sxd)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ServiceDefinition">
            <summary>A Service Definition that can be published to create a geospatial web service using the Portal API Publish call.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.ShapeFile">
            <summary>A shape file.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.SymbolSet">
            <summary>A symbol set.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.TilePackage">
            <summary>Tile Package (tpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.VectorTileService">
            <summary>
              A Vector Tile Service. The URL to the service ( example ) is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.VisioDocument">
            <summary>Visio Document (.vsd)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WMS">
            <summary>
              OGC Web Map Service. The URL to the service is stored in the serviceURL property of the item (see
              RT_PortalItem_getServiceURL).
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WMTS">
            <summary>A WMTS Service.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WebMap">
            <summary>A Web map.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WebMappingApplication">
            <summary>A web mapping application.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WindowsMobilePackage">
            <summary>A windows mobile package.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WorkflowManagerPackage">
            <summary>Workflow Manager Package (wpk)</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePortalItemType.WorkforceProject">
            <summary>Workforce Project</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult">
            <summary>The returned results of calling RT_GeometryEngine_nearestCoordinate and RT_GeometryEngine_nearestVertex.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreProximityResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreProximityResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.Coordinate">
            <summary>The point found.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.Distance">
            <summary>The result distance.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.PartIndex">
            <summary>The index of the part in which the point was found.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.PointIndex">
            <summary>The index of the point that was found within it's part.</summary>
            <remarks>
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreProximityResult.Npos">
            <summary>Returns a value indicating a bad index.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CorePulseThread">
            <summary>*Internal Use* Who is responsible for call the pulse method.</summary>
            <remarks>
              sTells the map view who is responsible for calling the pulse function for the map view. The pulse controls when items are
              updated in the map view. The pulse thread needs to be called by a timer.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePulseThread.UserDefined">
            <summary>You are responsible to call the pulse function on regular intervals.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePulseThread.UseGeoView">
            <summary>THe map view will have a timer and call the pulse function. You do not need to call pulse.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CorePulseThread.Unknown">
            <summary>An unknown status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreQueryFeatureOptions">
            <summary>Various options that can be specified with calling RT_ServiceFeatureTable_queryFeaturesWithOption.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreQueryFeatureOptions.IdOnly">
            <summary>Returns only the object id in the query result.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreQueryFeatureOptions.MinimalFieldsWithGeometry">
            <summary>Requests only the minimal set of fields in the query result.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreQueryFeatureOptions.LoadAllFeatures">
            <summary>Requests all available fields to be returned in the query result.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats">
            <summary>A handle that identifies the supported formats in which query results can be returned from a feature service.</summary>
            <remarks>
              You need to pass this handle to all query formats functions. You will get this handle from various functions and the
              handle must be destroyed from RT_QueryFormats_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreQueryFormats class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreQueryFormats instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.SupportsAMF">
            <summary>Returns true if AMF is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryFormats.SupportsJSON">
            <summary>Returns true if the JSON is supported.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters">
            <summary>A handle that represents a database query.</summary>
            <remarks>
              You need to pass this handle to all query parameter methods. You can get this handle from various functions and the
              handle must be destroyed from RT_QueryParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreQueryParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreQueryParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.#ctor">
            <summary>Creates a new query parameters handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_QueryParameters_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_QueryParameters_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.URLParameters">
            <summary>Returns a map of URL parameters that are used for sending to the query service on a Feature server.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.Geometry">
            <summary>Gets the geometry that is used to filter results.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.InSpatialReference">
            <summary>Gets the spatial reference used within the query parameters.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.MaxAllowableOffset">
            <summary>Gets the max allowable offset.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.MaxFeatures">
            <summary>Gets max number of features the query should return.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.ObjectIds">
            <summary>Gets the object ids of the features to query for.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.OrderByFields">
            <summary>Returns a container describing how the results of the query are ordered.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.OutSpatialReference">
            <summary>Gets the spatial reference of the returned features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.ReturnGeometry">
            <summary>Returns true if geometry values should be returned from the query.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.ReturnIdsOnly">
            <summary>Returns true if only feature ids should be returned from the query.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.SpatialRelationship">
            <summary>Gets the spatial relationship to use for filtering features.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.TimeExtent">
            <summary>Returns the time extent of the query.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters.WhereClause">
            <summary>Returns the where clause of the query.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain">
            <summary>A handle that specifies a range of valid values for an RT_FieldHandle.</summary>
            <remarks>
              You need to pass this handle to all domain functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Domain_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRangeDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRangeDomain instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain.PrivateCreateFromHandleInternal_CoreRangeDomain(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRangeDomain class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRangeDomain instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain.MaxValue">
            <summary>Returns the range domain's maximum value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRangeDomain.MinValue">
            <summary>Returns the range domain's minimum value.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRaster">
            <summary>The raster object.</summary>
            <remarks>
              This is the raster data source object. This handle needs to be passed to raster functions, i.e. functions with prefix
              RT_Raster, not to be confused with "raster function". It must be destroyed from RT_Raster_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRaster class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRaster instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.#ctor">
            <summary>*Internal Use* Creates a default raster.</summary>
            <remarks>
              The object created is a raster data source object.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.#ctor(System.String)">
            <summary>Creates a raster with path.</summary>
            <remarks>
              The object created is a raster data source object.
            </remarks>
            <param name="path">Path of raster data source, can be local path or network path.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRaster.LoadError">
            <summary>Returns the error code for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRaster.LoadStatus">
            <summary>Returns the current load status of the raster.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRaster.ObjectType">
            <summary>Get the type of the raster (data source)</summary>
            <remarks>
              Get the type of the raster object.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRaster.Path">
            <summary>*Internal Use* Returns the raster path.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Sets the callback invoked when the raster is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Sets the callback invoked when the raster's load status has changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Sets the callback to invoke when raster needs to have the client provides additional data.</summary>
            <remarks>
              This function is provided as part of the interface RT_RequestableInterface but is actually not doing anything since a
              raster is loaded locally without any request.
            </remarks>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when any state of the raster have changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.CancelLoad">
            <summary>Cancel loading the raster.</summary>
            <remarks>
              Cancels any outstanding requests that the raster has sent. If the raster is in the RT_LoadStatus_loading state then the
              RT_LoadStatus and RT_ErrorHandle code will be set to RT_LoadStatus_failedToLoad and RT_ErrorType_commonUserCancelled and
              RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.HandleResponse(System.UInt64,System.Byte[],RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>Handles the response to a request for data.</summary>
            <remarks>
              This function is provided as part of the interface RT_RequestableInterface but is actually not doing anything since a
              raster is loaded locally without any request.
              Error Types: RT_ErrorType_commonInvalidArgument The request id is for a different object.
            </remarks>
            <param name="data">The JSON from the service.</param>
            <param name="requestId">The unique id for the service. Should be 0 if creating the tile cache directly.</param>
            <param name="userDefinedError">The error code associated with the load.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.Load">
            <summary>Start the process of getting all the required information.</summary>
            <remarks>
              Loads the raster object. Load will only try loading the object if the load status is RT_LoadStatus_notLoaded. If the
              object is not in the RT_LoadStatus_notLoaded state the object will do nothing and the RT_Loadable_doneLoading_fn
              function will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRaster.RetryLoad">
            <summary>Retry loading the raster.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the raster is in the failed to load state. Does nothing if the
              raster is in any other state.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer">
            <summary>An instance of this class allows you to display raster data (from a raster data source).</summary>
            <remarks>
              Same as a RT_LayerHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all raster layer functions. The raster layer class is derived from the layer class. It must be destroyed by calling
              RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRasterLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRasterLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.PrivateCreateFromHandleInternal_CoreRasterLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRasterLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRasterLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.#ctor">
            <summary>*Internal Use* Creates a default raster layer object without specifying raster data source.</summary>
            <remarks>
              Use this function to create a default raster layer. It needs to be followed by a call to RT_RasterLayer_setRaster.
              Warning: You must call RT_Layer_destroy on the returned value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreRaster)">
            <summary>Creates a raster layer object.</summary>
            <remarks>
              Use this function to create a raster layer from the input raster data source.
              Warning: You must call RT_Layer_destroy on the returned value.
            </remarks>
            <param name="raster">Raster data source object.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.IsPopupEnabled">
            <summary>Gets a flag indicating whether the RT_PopupDefinitionHandle defined on the RT_RasterLayerHandle is enable / disable.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.PopupDefinition">
            <summary>Gets the pop-up definition for the raster layer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.Renderer">
            <summary>Returns the raster renderer used for rendering raster on this layer.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterLayer.SetRaster(RuntimeCoreNet.GeneratedWrappers.CoreRaster)">
            <summary>*Internal Use* Sets the raster source on this layer.</summary>
            <param name="raster">Raster data source object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer">
            <summary>A raster renderer object.</summary>
            <remarks>
              This is the top level raster renderer object. You need to pass this handle to all raster renderer functions. The handle
              must be destroyed by calling RT_RasterRenderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRasterRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRasterRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.PrivateCreateFromHandleInternal_CoreRasterRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRasterRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRasterRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.#ctor">
            <summary>Creates a raster renderer handle.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRasterRenderer.ObjectType">
            <summary>Returns the instantiated type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType">
            <summary>The list of raster renderer types.</summary>
            <remarks>
              This is used to determine the raster renderer type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.RasterRenderer">
            <summary>A generic raster renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.BlendRenderer">
            <summary>A blend renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.ColormapRenderer">
            <summary>A colormap renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.HillshadeRenderer">
            <summary>A hillshade renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.RgbRenderer">
            <summary>A RGB renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterRendererType.StretchRenderer">
            <summary>A stretch renderer object.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRasterType">
            <summary>The list of raster types.</summary>
            <remarks>
              This is used to determine the raster type, i.e. the type of a raster data source.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterType.Unknown">
            <summary>Unknown raster type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterType.Raster">
            <summary>A raster object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterType.MosaicDataset">
            <summary>A mosaic dataset object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRasterType.Geopackage">
            <summary>A geopackage raster.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRenderer">
            <summary>A Renderer object.</summary>
            <remarks>
              You need to pass this handle to all renderer functions. This is an opaque handle. It must be destroyed by calling
              RT_Renderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.PrivateCreateFromHandleInternal_CoreRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRenderer instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.InstanceId">
            <summary>*Internal Use* Get the instance id of the Renderer referenced by the specified RT_RendererHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.ObjectType">
            <summary>Returns the instantiated type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.RotationExpression">
            <summary>Gets the renderer's rotation expression.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.RotationType">
            <summary>Returns the renderer's rotation type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.SceneProperties">
            <summary>Gets the scene view properties for the renderer.</summary>
            <remarks>
              You must call RT_RendererSceneProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.Clone">
            <summary>Returns a clone of the given handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.FromJSON(System.String)">
            <summary>Creates a renderer handle from JSON.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.GetHash">
            <summary>Gets the hash value of the renderer.</summary>
            <remarks>
              Get the hash value of the renderer.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.GetSymbol(RuntimeCoreNet.GeneratedWrappers.CoreFeature)">
            <summary>Returns the symbol that should be used to visualize the given feature.</summary>
            <remarks>
              Non-overloaded method: GetSymbolForFeature
            </remarks>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.GetSymbol(RuntimeCoreNet.GeneratedWrappers.CoreGraphic)">
            <summary>Returns the symbol that should be used to visualize the given feature.</summary>
            <remarks>
              Non-overloaded method: GetSymbolForGraphic
            </remarks>
            <param name="graphic">The graphic.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreRenderer)">
            <summary>Compares two renderer objects and returns true if they are equal, false otherwise.</summary>
            <param name="right">The right.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRenderer.ToJSON">
            <summary>Serializes the given renderer to JSON.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType">
            <summary>The different types of normalization.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType.ByField">
            <summary>Normalize by field.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType.ByLog">
            <summary>Normalize by a log.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType.ByPercentOfTotal">
            <summary>Normalize by percent of total.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType.None">
            <summary>Do not normalize.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererNormalizationType.Unknown">
            <summary>An unknown normalization type. Normally indicates an exception has occurred if this value is returned.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties">
            <summary>provides access to scene specific properties.</summary>
            <remarks>
              Scene properties can be retrieved from the RT_RendererHandle and used to set scene specific properties defining the
              behavior in 3D It must be destroyed by calling RT_RendererSceneProperties_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRendererSceneProperties class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRendererSceneProperties instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.#ctor">
            <summary>Creates a new scene view properties object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_RendererSceneProperties_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_RendererSceneProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreExtrusionMode)">
            <summary>Creates a new scene view properties object with extrusion properties.</summary>
            <remarks>
              Use this method to create a RendererSceneProperties object. This object must be destroyed by calling function
              RT_RendererSceneProperties_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_RendererSceneProperties_destroy on the return value.
            </remarks>
            <param name="extrusionExpression">Extrusion expression to be used.</param>
            <param name="extrusionMode">Extrusion mode to apply to the scene view properties RT_ExtrusionMode</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new scene view properties object with rotation properties</summary>
            <remarks>
              Use this method to create a RendererSceneProperties object. This object must be destroyed by calling function
              RT_RendererSceneProperties_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_RendererSceneProperties_destroy on the return value.
            </remarks>
            <param name="headingExpression">Heading expression to be used.</param>
            <param name="pitchExpression">A RT_StringHandle to the pitch expression to be used.</param>
            <param name="rollExpression">A RT_StringHandle to the roll expression to be used.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.ExtrusionExpression">
            <summary>Gets the Extrusion expression in the Scene Properties.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.ExtrusionMode">
            <summary>Gets the Extrusion mode from the Scene Properties.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.HeadingExpression">
            <summary>Gets the Heading expression in the Scene Properties.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.PitchExpression">
            <summary>Gets the Pitch expression in the Scene Properties.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRendererSceneProperties.RollExpression">
            <summary>Gets the Roll expression in the Scene Properties.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRendererType">
            <summary>The different types of renderers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.ClassBreaksRenderer">
            <summary>A class break renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.DictionaryRenderer">
            <summary>A dictionary renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.SimpleRenderer">
            <summary>A simple renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.UniqueValueRenderer">
            <summary>A unique value renderer object.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.UnsupportedRenderer">
            <summary>An unsupported renderer.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRendererType.Unknown">
            <summary>An unknown renderer type. Normally indicates an exception has occurred if this value is returned.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRenderMode">
            <summary>The list of Render modes.</summary>
            <remarks>
              Render mode affects what scale a layer is rendered at.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRenderMode.Aesthetics">
            <summary>Layer should be renderered so that it looks nice (not fuzzy), but scale may not be respected.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRenderMode.Scale">
            <summary>Layer should be renderered at the correct scale, but may look fuzzy on high DPI screens.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRenderMode.Default">
            <summary>
              Default render mode type. For operational, base, and reference layers, this will behave like RT_RenderMode_scale by
              default.
            </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRequest">
            <summary>Information that is being requested.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.PrivateCreateFromHandleInternal_CoreRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRequest instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.URI">
            <summary>Returns the URI of the request.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.Attachments">
            <summary>Attachments associated with the request object.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.Canceled">
            <summary>Returns true if this request has been canceled, false otherwise.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.HttpOperation">
            <summary>Returns the HTTP operation requested by the request.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.InstanceId">
            <summary>*Internal Use* Get the instance id of the Request referenced by the specified RT_RequestHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.Parameters">
            <summary>The parameters of the request.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.RequestId">
            <summary>A unique identifier for the request.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.RequestSourceType">
            <summary>*Internal Use* The type of object that made this request.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequest.RequestType">
            <summary>The type of the request.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.SetCancelRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_CancelRequest)">
            <summary>Sets the callback to be invoked when the request is canceled.</summary>
            <param name="cancelRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequest.HandleResponse(System.Byte[],RuntimeCoreNet.GeneratedWrappers.CoreClientReference)">
            <summary>Handles a response to a request for data.</summary>
            <param name="data">The data.</param>
            <param name="userDefinedError">The user defined error.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment">
            <summary>A file attachment that might be included with a RT_RequestHandle.</summary>
            <remarks>
              Represents a file attachment. You need to pass this handle to all request attachment functions. It must be destroyed by
              calling RT_RequestAttachment_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRequestAttachment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRequestAttachment instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.ContentType">
            <summary>Gets the content type (mime type) of the attachment.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.Data">
            <summary>Returns the data of the attachment. May be empty if the file name refers to a file on disk.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.FileName">
            <summary>Gets the file name of the attachment.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.ParameterName">
            <summary>Gets the HTTP parameter name of the attachment.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRequestAttachment.GetEncodedData">
            <summary>Returns the data of the attachment encoded using base64 encoding.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRequestSourceType">
            <summary>*Internal Use* The list of Request source types.</summary>
            <remarks>
              This is used to determine the type of object making a Request.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestSourceType.Other">
            <summary>Any other request type was made.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestSourceType.PictureMarkerSymbol">
            <summary>A picture marker symbol object made this request.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestSourceType.UnknownLayer">
            <summary>An unknown layer object made this request.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRequestType">
            <summary>The list of Request types.</summary>
            <remarks>
              This is used to determine the Request type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.LoadRequest">
            <summary>A load request.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.TileRequest">
            <summary>A tile request</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.ImageRequest">
            <summary>An image request</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.JobRequest">
            <summary>An request from a job request</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.FileRequest">
            <summary>A request where the result is returned as a file on disk, rather than as an in-memory array of bytes.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.SceneRequest">
            <summary>An request from a scene request</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.ServiceRequest">
            <summary>A service request raised by route task or locator task</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRequestType.Unknown">
            <summary>Unknown Request type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute">
            <summary>A structure that describes a transportation network restriction attribute.</summary>
            <remarks>
              You need to pass this handle to all route task restriction attribute functions. It represents an instance of a route
              task restriction attribute. This is an opaque handle. It must be destroyed by calling RT_RestrictionAttribute_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRestrictionAttribute class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRestrictionAttribute instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.ParameterValues">
            <summary>Gets parameter values.</summary>
            <remarks>
              Gets restriction attribute's parameter values.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRestrictionAttribute.RestrictionUsageParameterName">
            <summary>Gets restriction usage parameter name.</summary>
            <remarks>
              Gets restriction usage parameter name.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters">
            <summary>A class that describes a reverse geocode method parameters.</summary>
            <remarks>
              Structure holding the parameters to support the reverse geocode operation for a geocoding service or local locator. You
              need to pass this handle to all reverse geocode parameters functions. It represents an instance of a reverse geocode
              parameters. This is an opaque handle. It must be destroyed by calling RT_ReverseGeocodeParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreReverseGeocodeParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreReverseGeocodeParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.#ctor">
            <summary>Creates a new reverse geocode parameters handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_ReverseGeocodeParameters_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.FeatureTypes">
            <summary>Gets feature types.</summary>
            <remarks>
              Determines what feature types of address which should be returned. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.ForStorage">
            <summary>Gets for storage.</summary>
            <remarks>
              Specifies whether the results of the operation will be persisted. The default value is false, which indicates the
              results of the operation can't be stored. If you store the results, in a database for example, you need to set this
              parameter to true. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.MaxDistance">
            <summary>Gets distance specifiying with location the area where candidates will be searched in meters.</summary>
            <remarks>
              Distance specifiying with location the area where candidates will be searched [meters]. Supported value in a range
              between 1000 and 50000 meters, 1000 meters by default. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.MaxResults">
            <summary>Gets max locations.</summary>
            <remarks>
              Determines the maximum count of candidates which should be returned. By default should be returned all found candidates.
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.OutputLanguageCode">
            <summary>Gets output language code.</summary>
            <remarks>
              Determines addresses with which the language should be returned. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.OutputSpatialReference">
            <summary>Gets output spatial reference.</summary>
            <remarks>
              The spatial reference for candidate geometries. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreReverseGeocodeParameters.ResultAttributeNames">
            <summary>Gets array of geocode result attribute names indicating which attributes should be returned for every result.</summary>
            <remarks>
              For empty array return only default attributes, "*" means all attributes will be returned. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor">
            <summary>A RGB object which is derived from a color object.</summary>
            <remarks>
              Same as a RT_ColorHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all RGB functions. The RGB class is derived from the color class. It must be destroyed by calling RT_Color_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRGBColor class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRGBColor instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.PrivateCreateFromHandleInternal_CoreRGBColor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRGBColor class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRGBColor instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.#ctor(System.UInt32)">
            <summary>Creates a RGB color from a value. This allocates memory that must be deleted.</summary>
            <remarks>
              The color is made of 4 8 bit values Alpha, blue, green, red (0xAABBGGRR) between 0 - 255. This object must be destroyed
              by calling function RT_Color_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Color_destroy on the return value.
            </remarks>
            <param name="value">The 32 bit RGBA color value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Creates a RGB color from a set of values. This allocates memory that must be deleted.</summary>
            <remarks>
              Values are between 0 - 255. 0 being none and 255 being the full amount. If alpha is 255 then the color is opaque. This
              object must be destroyed by calling function RT_Color_destroy. If an error occurs the error handler RT_ErrorHandler will
              be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_Color_destroy on the return value.
            </remarks>
            <param name="alpha">The 8 bit alpha color value.</param>
            <param name="blue">The 8 bit blue color value.</param>
            <param name="green">The 8 bit green color value.</param>
            <param name="red">The 8 bit red color value.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.RGBA">
            <summary>Retrieve the color value.</summary>
            <remarks>
              Retrieves the color values as a single 32 bit value from the RGB color object. The color is made of 4 8 bit values
              Alpha, blue, green, red (0xAABBGGRR) between 0 - 255.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.Alpha">
            <summary>Retrieve the alpha value.</summary>
            <remarks>
              Retrieves the alpha color value from the RGB color object. The value is between 0 - 255. If alpha is 255 then the color
              is opaque.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.Blue">
            <summary>Retrieve the blue value.</summary>
            <remarks>
              Retrieves the blue color value from the RGB color object. The value is between 0 - 255.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.Green">
            <summary>Retrieve the green value.</summary>
            <remarks>
              Retrieves the green color value from the RGB color object. The value is between 0 - 255.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBColor.Red">
            <summary>Retrieve the red value.</summary>
            <remarks>
              Retrieves the red color value from the RGB color object. The value is between 0 - 255.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer">
            <summary>A rgb renderer object which is derived from a base stretch renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all rgb renderer functions.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRGBRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRGBRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.PrivateCreateFromHandleInternal_CoreRGBRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRGBRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRGBRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CorePansharpenType,RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a rgb renderer handle.</summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed. A RT_VectorHandle of RT_ElementType_int32.</param>
            <param name="panchromaticRaster">Panchromatic raster, RT_RasterHandle.</param>
            <param name="pansharpenType">RT_PansharpenType</param>
            <param name="weights">Band weights value for pansharpening. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CorePansharpenType,RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a rgb renderer handle.</summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed. A RT_VectorHandle of RT_ElementType_int32.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="panchromaticRaster">Panchromatic raster, RT_RasterHandle.</param>
            <param name="pansharpenType">RT_PansharpenType</param>
            <param name="weights">Band weights value for pansharpening. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CorePansharpenType,RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a rgb renderer handle.</summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed. A RT_VectorHandle of RT_ElementType_int32.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="maxValues">Maximum stretch values. A RT_VectorHandle of RT_ElementType_float64.</param>
            <param name="minValues">Minimum stretch values. A RT_VectorHandle of RT_ElementType_float64.</param>
            <param name="panchromaticRaster">Panchromatic raster, RT_RasterHandle.</param>
            <param name="pansharpenType">RT_PansharpenType</param>
            <param name="weights">Band weights value for pansharpening. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CorePansharpenType,RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a rgb renderer handle.</summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed. A RT_VectorHandle of RT_ElementType_int32.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="max">Maximum percent clip value.</param>
            <param name="min">Minimum percent clip value.</param>
            <param name="panchromaticRaster">Panchromatic raster, RT_RasterHandle.</param>
            <param name="pansharpenType">RT_PansharpenType</param>
            <param name="weights">Band weights value for pansharpening. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.#ctor(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CorePansharpenType,RuntimeCoreNet.GeneratedWrappers.CoreRaster,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a rgb renderer handle.</summary>
            <param name="bandIndexes">The band indexes in which the raster is displayed. A RT_VectorHandle of RT_ElementType_int32.</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="numStandardDeviations">Standard deviation factor. Default value is 2.</param>
            <param name="panchromaticRaster">Panchromatic raster, RT_RasterHandle.</param>
            <param name="pansharpenType">RT_PansharpenType</param>
            <param name="weights">Band weights value for pansharpening. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.BandIndexes">
            <summary>Returns band index array.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.PanchromaticRaster">
            <summary>Returns panchromatic raster.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.PansharpenType">
            <summary>Returns pansharpen type.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRGBRenderer.Weights">
            <summary>Returns pansharpen weight array.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRotationType">
            <summary>The list of possible rotation types.</summary>
            <remarks>
              Controls the origin and direction of rotation of a symbol on a feature.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRotationType.Arithmetic">
            <summary>The symbol is rotated from East in a counter-clockwise direction where East is the 0 degrees axis.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRotationType.Geographic">
            <summary>The symbol is rotated from North in a clockwise direction where North is the 0 degrees axis.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRotationType.Unknown">
            <summary>Unknown rotation type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRoute">
            <summary>A route object contains information about single route.</summary>
            <remarks>
              A class that contains the output from a route task for a single route. The route contains all necessary output from a
              succesfully- completed route task solve. This includes the cost, shape, and additional metadata specific to the
              resulting route solution (e.g., route directions, local start/end time, etc.). Changing type just to make it clear you
              get back a derived type. You need to pass this handle to all route functions. It must be destroyed by calling
              RT_Route_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRoute class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRoute instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.CustomData">
            <summary>Retrieves custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.DirectionManeuvers">
            <summary>Gets direction maneuver.</summary>
            <remarks>
              Gets the list of turn-by-turn directions for this route. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.LocalEndTime">
            <summary>Gets local end time.</summary>
            <remarks>
              Returns value of the local end time. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.LocalStartTime">
            <summary>Gets local start time.</summary>
            <remarks>
              Returns value of the local start time. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.RouteGeometry">
            <summary>Gets route's geometry.</summary>
            <remarks>
              Gets the geometry for the full route (polyline). If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.RouteName">
            <summary>Gets route's name.</summary>
            <remarks>
              Returns the name of the route. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.Stops">
            <summary>Gets stops.</summary>
            <remarks>
              Returns collection of output stops. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.TotalLength">
            <summary>Gets total length in meters.</summary>
            <remarks>
              Gets the total length of the route (meters).
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.TotalTime">
            <summary>Gets total time in minutes.</summary>
            <remarks>
              This includes any travel time, time spent waiting at stops (arriving before the start of a time window), and service
              time at stops. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.TravelTime">
            <summary>Gets travel time in minutes.</summary>
            <remarks>
              This includes only time of the travel. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.ViolationTime">
            <summary>Gets violation time in minutes.</summary>
            <remarks>
              Gets the total amount of additional time incurred due to time window violations. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRoute.WaitTime">
            <summary>Gets wait time in minutes.</summary>
            <remarks>
              Gets the total amount of additional time incurred due to waiting at time windows. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.GetCost(System.String)">
            <summary>Gets cost.</summary>
            <remarks>
              Returns the associated cost for this attribute name. If an error occurs the error handler RT_ErrorHandler will be
              called.
            </remarks>
            <param name="attributeName">The name of the attribute name e.g. "Minutes" or "TravelTime".</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRoute.ToJSON">
            <summary>Converts an object to JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters">
            <summary>A route parameters object contains parameters for route calculation.</summary>
            <remarks>
              A class that contains settings that are used when solving a Route_task. The Route_parameters class contains all inputs
              for the Route_task, as well as settings such as the impedance attribute, accumulate and restriction attributes,
              backtrack (u-turn) policy, etc. Changing type just to make it clear you get back a derived type. You need to pass this
              handle to all route parameters functions. It must be destroyed by calling RT_RouteParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.#ctor">
            <summary>Creates a route parameters.</summary>
            <remarks>
              Creates a route parameters object. This object must be destroyed by calling function RT_RouteParameters_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.AccumulateAttributeNames">
            <summary>Gets accumulate attribute names.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.CustomData">
            <summary>Gets custom data.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.DirectionsDistanceUnits">
            <summary>Gets directions distance text units.</summary>
            <remarks>
              Gets a directions distance text units. Describes the unit of measurement for the length of directions.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.DirectionsLanguage">
            <summary>Gets directions language.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.DirectionsStyle">
            <summary>Gets directions style.</summary>
            <remarks>
              Gets a directions style. The directions setting to generate directions desinged for different kind of applications.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.FindBestSequence">
            <summary>Gets find best sequence.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.LocalStartTime">
            <summary>Gets local start time.</summary>
            <remarks>
              Time in the local time zone. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.OutputSpatialReference">
            <summary>Gets output spatial reference.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.PreserveFirstStop">
            <summary>Gets preserve first stop.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.PreserveLastStop">
            <summary>Gets preserve last stop.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnDirections">
            <summary>Gets return directions.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnPointBarriers">
            <summary>Gets return point barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnPolygonBarriers">
            <summary>Gets return polygon barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnPolylineBarriers">
            <summary>Gets return polyline barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnRoutes">
            <summary>Gets return routes.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ReturnStops">
            <summary>Gets return stops.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.RouteShapeType">
            <summary>Gets route shape type.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.TravelMode">
            <summary>Gets travel mode.</summary>
            <remarks>
              Gets travel mode instance for route parameters. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ClearPointBarriers">
            <summary>Clears point barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ClearPolygonBarriers">
            <summary>Clears polygon barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ClearPolylineBarriers">
            <summary>Clears polyline barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ClearStops">
            <summary>Clears stops.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.FromJSON(System.String)">
            <summary>Creates route parameters from JSON string.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_RouteParameters_destroy on the return value.
            </remarks>
            <param name="json">The JSON string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.GetSearchWhereClause(System.String)">
            <summary>Gets search where clause.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="sourceName">The name of source.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPointBarriers(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Sets point barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="pointBarriers">A RT_VectorHandle of RT_ElementType_pointBarrier. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPointBarriersWithFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable,RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters)">
            <summary>Sets point barriers with feature table.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPolygonBarriers(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Sets polygon barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="polygonBarriers">A RT_VectorHandle of RT_ElementType_polygonBarrier. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPolygonBarriersWithFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable,RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters)">
            <summary>Sets polygon barriers with feature table.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPolylineBarriers(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Sets polyline barriers.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="lineBarriers">A RT_VectorHandle of RT_ElementType_polylineBarrier. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetPolylineBarriersWithFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable,RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters)">
            <summary>Sets polyline barriers with feature table.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetSearchWhereClause(System.String,System.String)">
            <summary>Sets search where clause.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="searchWhereClause">The search where clause.</param>
            <param name="sourceName">The name of source.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetStops(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Sets stops.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="stops">A RT_VectorHandle of RT_ElementType_stop. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.SetStopsWithFeatureTable(RuntimeCoreNet.GeneratedWrappers.CoreArcGISFeatureTable,RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters)">
            <summary>Sets stops with feature table.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="featureTable">The feature table.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters.ToJSON">
            <summary>Serializes this object to a JSON string.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult">
            <summary>A route result object contains output of route task's solve.</summary>
            <remarks>
              A class that contains the output results from a route task. The route result contains all necessary output from a
              succesfully- completed route task solve. This includes collection of routes, barriers and messages. Changing type just
              to make it clear you get back a derived type. You need to pass this handle to all route result functions. It must be
              destroyed by calling RT_RouteResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.CustomData">
            <summary>Returns custom data.</summary>
            <remarks>
              Returns custom data. Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.DirectionsLanguage">
            <summary>Returns directions language.</summary>
            <remarks>
              Gets language of directions. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.Messages">
            <summary>Returns messages.</summary>
            <remarks>
              Messages received when solve is completed. If a route cannot be solved, the message returned by the server identifies
              the route that could not be solved. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.PointBarriers">
            <summary>Returns point barriers.</summary>
            <remarks>
              Barriers are only returned if the returnPointBarriers property of RouteParameters is true. If an error occurs the error
              handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.PolygonBarriers">
            <summary>Returns polygon barriers.</summary>
            <remarks>
              Barriers are only returned if the returntPolygonBarriers property of RouteParameters is true. If an error occurs the
              error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.PolylineBarriers">
            <summary>Returns polyline barriers.</summary>
            <remarks>
              Barriers are only returned if the returntPolylineBarriers property of RouteParameters is true. If an error occurs the
              error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.Routes">
            <summary>Returns routes.</summary>
            <remarks>
              Each object represents a separate route with independent driving directions If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.FromJSON(System.String)">
            <summary>Creates route result from JSON string.</summary>
            <remarks>
              Creates instance of route result based on JSON presentation. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteResult.ToJSON">
            <summary>Convert route result to JSON string.</summary>
            <remarks>
              Creates JSON presentation of object based on it real instance. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteShapeType">
            <summary>The type of shape output for a route.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRouteShapeType.None">
            <summary>A none shape type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRouteShapeType.StraightLine">
            <summary>A straight line shape type.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreRouteShapeType.TrueShapeWithMeasures">
            <summary>A true shape type with measures.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask">
            <summary>A route task object is used for calculation route by specified paramaters.</summary>
            <remarks>
              A class that implements the route task. The route task class uses a transportation network to create a route between
              multiple stops. The route generated and the results returned honor the settings provided by a route settings object.
              Changing type just to make it clear you get back a derived type. You need to pass this handle to all route task
              functions. It must be destroyed by calling RT_RouteTask_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteTask class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteTask instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset,RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources)">
            <summary>Creates a route task with path to geodatabase.</summary>
            <remarks>
              Creates a route task.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a path to the database to create the route task.
            </remarks>
            <param name="dataset">A transportation network dataset.</param>
            <param name="resources">A network analyst resources.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.#ctor(System.String,System.String,RuntimeCoreNet.GeneratedWrappers.CoreNetworkAnalystResources)">
            <summary>Creates a route task with path to geodatabase.</summary>
            <remarks>
              Creates a route task.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a path to the database to create the route task.
            </remarks>
            <param name="networkName">A network name.</param>
            <param name="pathToDatabase">A path to geodatabase.</param>
            <param name="resources">A network analyst resources.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreLocalizedResources)">
            <summary>Creates a route task with URL.</summary>
            <remarks>
              Creates a route task.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a url to routing services to create the route task.
            </remarks>
            <param name="resources">The localized resources.</param>
            <param name="url">An url to online routing services.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.URL">
            <summary>Gets URL of online service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.LoadError">
            <summary>Retrieve the load error.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.LoadStatus">
            <summary>Retrieve the load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.TransportationNetworkDataset">
            <summary>Gets transportation network dataset.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Callback, called when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Callback, called when the loadable load status changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the request-able objects set request required.</summary>
            <remarks>
              The function pointer is called when data is required. Retrieving the data should happen on a different thread. Once the
              data is retrieved RT_Request_handleResponse should be called. If an error occurs while retrieving the data you still
              need to call RT_Request_handleResponse. This must be called before loading or connecting to a map view.
            </remarks>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.CancelLoad">
            <summary>Cancel loading meta-data for the object.</summary>
            <remarks>
              Will cancel loading the meta-data if the object is loading. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.GenerateDefaultParameters">
            <summary>Generates default parameters.</summary>
            <remarks>
              Generates default parameters.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.GetRouteTaskInfo">
            <summary>Gets rotue task info.</summary>
            <remarks>
              Generates default parameters.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.Load">
            <summary>Load the meta-data for the object asynchronously.</summary>
            <remarks>
              Will load the meta-data if the object is not loaded. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.RetryLoad">
            <summary>Load or retry loading meta-data for the object asynchronously.</summary>
            <remarks>
              Will retry loading the meta-data if the object is failed to load. Will load the object if the object is not loaded. Will
              not retry to load the object if the object is loaded. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTask.SolveRoute(RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters)">
            <summary>Solves a route passing in a parameters object.</summary>
            <remarks>
              Solves a route passing in a parameters object.
            </remarks>
            <param name="routeParameters">The route parameters.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo">
            <summary>A class that describes the transportation network that a route task is bound to.</summary>
            <remarks>
              You need to pass this handle to all route task info functions. It represents an instance of a route task info. This is
              an opaque handle. It must be destroyed by calling RT_RouteTaskInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteTaskInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteTaskInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.AccumulateAttributeNames">
            <summary>Gets accumulate attribute names.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.CostAttributes">
            <summary>Gets cost attributes.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.DefaultTravelModeName">
            <summary>Gets default travel mode's name.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.DirectionDistanceUnits">
            <summary>Gets directions distance text units.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.DirectionsLanguage">
            <summary>Gets directions language.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.DirectionsStyle">
            <summary>Gets directions style.</summary>
            <remarks>
              Gets a directions style. The directions setting to generate directions desinged for different kind of applications.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.FindBestSequence">
            <summary>Gets find best sequence.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.LocalStartTime">
            <summary>Gets local start time.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.NetworkName">
            <summary>Gets network name.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.OutputSpatialReference">
            <summary>Gets output spatial reference.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.PreserveFirstStop">
            <summary>Gets preserve first stop.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.PreserveLastStop">
            <summary>Gets preserve last stop.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.RestrictionAttributes">
            <summary>Gets restriction attributes.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.RouteShapeType">
            <summary>Gets route shape type.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.SupportedLanguages">
            <summary>Gets array of supported languages.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.SupportedRestrictionUsageParameterValues">
            <summary>Gets array of supported restriction usage parameter values.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreRouteTaskInfo.TravelModes">
            <summary>Gets array of travel modes.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker">
            <summary>*Internal Use* A route tracker for tracks the vehicle location along the route.</summary>
            <remarks>
              Instances of this class represent methods for processing navigation. You need to pass this handle to all route tracker
              methods. It must be destroyed by calling RT_RouteTracker_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteTracker class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteTracker instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreNavigationResources,RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener)">
            <summary>*Internal Use* Creates a route tracker.</summary>
            <remarks>
              Creates a new route tracker instance.
            </remarks>
            <param name="listener">A route tracker listener.</param>
            <param name="navigationResources">A navigation resources.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.CancelRerouting">
            <summary>*Internal Use* Cancels rerouting task of route tracker.</summary>
            <remarks>
              If rerouting is started this method can interrupt rerouting process.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.DisableLogging">
            <summary>*Internal Use* Disables logging functionality of route tracker.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.DisableRerouting">
            <summary>*Internal Use* Disables rerouting functionality of route tracker.</summary>
            <remarks>
              After disabling rerouting tracker can re-calculate route in case RT_TrackingStatus_offRoute status.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.EnableFeatureLocator(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>*Internal Use* Enables feature locator.</summary>
            <remarks>
              Feature locator is usefull when current location on parking lot and can be snapped to route.
              Error Types: RT_ErrorType_commonInvalidArgument Invalid argument exception. RT_ErrorType_commonIllegalState Where route tracker is
              not initialized.
            </remarks>
            <param name="featureTables">A vector of the feature tables.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.EnableLogging(System.String)">
            <summary>*Internal Use* Enables logging functionality of route tracker.</summary>
            <remarks>
              Route tracker's logger allows to collect information about route tracker state and GPS location. Logger creates the
              following files: YYYY-mm-DDTHH-MM-SS_GPS.log for input GPS data. YYYY-mm-DDTHH-MM-SS_STOPS.log for stop and route
              parameters. YYYY-mm-DDTHH-MM-SS_TRACK.log for snapshot of the tracking result for each RT_RouteTracker_trackLocation.
            </remarks>
            <param name="folder">A folder for logging files.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.EnableRerouting(RuntimeCoreNet.GeneratedWrappers.CoreRouteTask,RuntimeCoreNet.GeneratedWrappers.CoreRouteParameters,RuntimeCoreNet.GeneratedWrappers.CoreCurbApproach)">
            <summary>*Internal Use* Enables rerouting functionality of route tracker.</summary>
            <remarks>
              Tracker will start route calculation when it is necessary.
              Error Types: RT_ErrorType_commonInvalidArgument Invalid argument exception. RT_ErrorType_commonIllegalState Where route tracker is
              not initialized.
            </remarks>
            <param name="curbApproach">A curb approach of departure stop for rerouting (either side by default).</param>
            <param name="routeParameters">a route parameters.</param>
            <param name="routeTask">A route task.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.IsLoggingEnabled">
            <summary>*Internal Use* Checks logging status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.IsReroutingEnabled">
            <summary>*Internal Use* Returns current state (turned on/off) of rerouting functionality.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.SetResult(RuntimeCoreNet.GeneratedWrappers.CoreRouteResult,System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreDirectionDistanceTextUnits)">
            <summary>*Internal Use* Sets route result to route tracker.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonInvalidArgument Invalid argument error.
            </remarks>
            <param name="directionDistanceUnits">Distance units of route directions and route tracker's output data.</param>
            <param name="routeIndex">The zero-base index of route in routes collection.</param>
            <param name="routeResult">Pre-calculated route result.</param>
            <param name="stops">A RT_VectorHandle of RT_ElementType_stop. Represents a collection of stops which were used to calculate route. Contents of the vector are copied.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.SwitchToNextDestination">
            <summary>*Internal Use* Switches route tracker to the next destination and the next route part.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNotFound Not found error if next route part is missed. RT_ErrorType_commonIllegalState Where route
              tracker is not initialized.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTracker.TrackLocation(RuntimeCoreNet.GeneratedWrappers.CoreLocation)">
            <summary>*Internal Use* Tracks location and updates route tracking status.</summary>
            <remarks>
              Tracker expects point in WGS84 spatial reference, course(bearing) in degrees, speed in meters per second.
              Error Types: RT_ErrorType_commonIllegalState Where route tracker is not initialized.
            </remarks>
            <param name="gpsLocation">A GPS location.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener">
            <summary>*Internal Use* A class defines specific interface for sending notification about tracking status changes.</summary>
            <remarks>
              Defines specific interface to notify SDK level about tracking status changes(tracking status, destination status, new
              route result, new text guidance notification). This interface should be implemented and cosumed by SDK which can
              listences notification from core level. The runtime core components should use this interface to notify SDK level about
              changes. You need to pass this handle to all route tracker listener methods. It must be destroyed by calling
              RT_RouteTrackerListener_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreRouteTrackerListener class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreRouteTrackerListener instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.#ctor">
            <summary>*Internal Use* Creates a route tracker listener object.</summary>
            <remarks>
              Create a navigation resources object. This object must be destroyed by calling function RT_RouteTrackerListener_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnDestinationStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnDestinationStatusChanged)">
            <summary>*Internal Use* Sets on destination status changed callback.</summary>
            <param name="onDestinationStatusChanged">A callback method.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnNewTextGuidanceCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnNewTextGuidance)">
            <summary>*Internal Use* Sets on new text guidance callback.</summary>
            <param name="onNewTextGuidance">A callback method.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnRerouteFailedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnRerouteFailed)">
            <summary>*Internal Use* Sets on reroute failed callback.</summary>
            <param name="onRerouteFailed">A callback method.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnRerouteFinishedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnRerouteFinished)">
            <summary>*Internal Use* Sets on reroute finished callback.</summary>
            <param name="onRerouteFinished">A callback method.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnRerouteStartedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnRerouteStarted)">
            <summary>*Internal Use* Sets on reroute started callback.</summary>
            <param name="onRerouteStarted">A callback method.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreRouteTrackerListener.SetOnTrackingStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_RouteTrackerListener_OnTrackingStatusChanged)">
            <summary>*Internal Use* Sets on tracking status changed callback.</summary>
            <param name="onTrackingStatusChanged">A callback method.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreScene">
            <summary>The scene contains layers and additional properties and can be displayed in a SceneView.</summary>
            <remarks>
              You need to pass this handle to all scene functions. It represents an instance of a scene. You cannot directly access
              scene properties. You can get this handle from RT_SceneHandle and the handle must be destroyed from RT_Scene_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreScene class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreScene instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.#ctor">
            <summary>Creates a scene.</summary>
            <remarks>
              Creates a scene.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreBasemap)">
            <summary>Create a scene with basemap.</summary>
            <remarks>
              Use this method to create an Scene object. This object must be destroyed by calling function RT_Scene_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Scene_destroy on the return value.
            </remarks>
            <param name="basemap">A basemap object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreBasemapType)">
            <summary>Creates a scene with a basemap.</summary>
            <remarks>
              The scene will be created with a basemap set This object must be destroyed by calling function RT_Scene_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Scene_destroy on the return value.
            </remarks>
            <param name="basemapType">The basemap.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.BaseSurface">
            <summary>Retrieves the base surface for the scene.</summary>
            <remarks>
              Retrieves the base surface for the scene. The base surface is the default surface on which layers are draped or from
              which relative layers are offset.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.Basemap">
            <summary>Retrieves the basemap for the scene.</summary>
            <remarks>
              Retrieves the basemap for the scene
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.Bookmarks">
            <summary>Retrieve the bookmarks for the scene.</summary>
            <remarks>
              Retrieve the bookmarks for the scene. The collection is specific to this scene.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.InitialViewpoint">
            <summary>Retrieve the initial viewpoint.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.LoadError">
            <summary>Retrieve the load error for the scene.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.LoadStatus">
            <summary>Retrieve the load status for the scene.</summary>
            <remarks>
              Retrieve the load status for the scene.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.OperationalLayers">
            <summary>Retrieve the operational layers for the scene.</summary>
            <remarks>
              Retrieve the operational layers for the scene. The collection is specific to this scene.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreScene.SpatialReference">
            <summary>Retrieve the spatial reference for the scene.</summary>
            <remarks>
              Retrieve the spatial reference for the scene.
              Error Types: RT_ErrorType_commonIllegalState The scene needs to be loaded before making this call.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>*Internal Use* Sets the function that will be called when the scene is done loading.</summary>
            <remarks>
              Sets the function that will be called when the scene is done loading. Setting the function to NULL after it has already
              been set will stop the function from being called. By default the callback will not occur.
            </remarks>
            <param name="doneLoading">The done loading function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Set the function that will be called when the load status changes.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>*Internal Use* Sets the function that will be called if additional data is required.</summary>
            <remarks>
              Set the function that will be called if additional loading is required. Setting the function to NULL after it has
              already been set will stop the function from being called. By default the callback will not occur.
            </remarks>
            <param name="requestRequired">The load required function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.CancelLoad">
            <summary>Cancel loading the scene.</summary>
            <remarks>
              Cancels any outstanding requests that the scene has sent. If the scene is in the RT_LoadStatus_loading state then the
              RT_LoadStatus and RT_ErrorHandle will be set to RT_LoadStatus_failedToLoad and RT_ErrorType_commonUserCancelled and
              RT_Loadable_doneLoading_fn will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.Load">
            <summary>Load the scene.</summary>
            <remarks>
              Load the scene. The layer will be loaded to get the min scale and max scale if they are not already provided. Load will
              only try loading the object if the load status is RT_LoadStatus_notLoaded. If the object is not in the
              RT_LoadStatus_notLoaded state the object will do nothing and the RT_Loadable_doneLoading_fn function will be called.
              This may call the load requested callback and the done loading.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreScene.RetryLoad">
            <summary>Retry loading the scene.</summary>
            <remarks>
              Set the load status to not loaded and calls load if the basemap is in the failed to load state. Does nothing if the
              basemap is in any other state.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSceneRequest">
            <summary>Represents a request for a scenelayer.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSceneRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSceneRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneRequest.PrivateCreateFromHandleInternal_CoreSceneRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSceneRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSceneRequest instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition">
            <summary>The list of possible scene symbol anchor placements.</summary>
            <remarks>
              This is used to determine the position of the scene marker symbol.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition.Top">
            <summary>The top of the symbol is the anchor point.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition.Bottom">
            <summary>The bottom of the symbol is the anchor point.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition.Center">
            <summary>The center of the symbol is the anchor point.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSceneView">
            <summary>A scene view object.</summary>
            <remarks>
              You need to pass this handle to all scene view functions. The scene view is how a scene is displayed on a screen. The
              scene view will be updated when the scene changes. This is an opaque handle. It must be destroyed by calling
              RT_GeoView_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSceneView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSceneView instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.PrivateCreateFromHandleInternal_CoreSceneView(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSceneView class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSceneView instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.#ctor(System.Int32,System.Int32,System.Single,System.Single,RuntimeCoreNet.GeneratedWrappers.CorePulseThread)">
            <summary>Create a scene view for displaying a scene.</summary>
            <remarks>
              Creates scene view for displaying a scene. You need to connect a scene to the scene view before anything is draw. If
              using RT_PulseThread_useGeoView you must call RT_GeoView_resume to start the pulse thread which starts the drawing and
              RT_GeoView_pause to stop the pulse thread. There can only be 1 set of function callbacks for each scene view.
              initialization_completed - Called when scene view is ready for you to start interacting with it.   draw_requested -
              Called when scene view requires a RT_GeoView_draw to be called.   start_drawing - Called when scene view starts a new
              draw phase. Multiple draws can occur after this call but this will not be called again until completed_draw is called.
              completed_draw - Called when scene view is finished drawing in a draw phase. Multiple draws can occur before this call.
              This object must be destroyed by calling function RT_GeoView_destroy.
              Warning: With RT_PulseThread_useGeoView you must call RT_GeoView_resume and RT_GeoView_pause to control the pulse thread.
            </remarks>
            <param name="dipsToPixelsFactor">The factor for converting dips to pixels.</param>
            <param name="height">The height of the viewport.</param>
            <param name="pixelsPerInch">This is used to determine the resolution of the screen.</param>
            <param name="pulse">Determines if the scene view owns the pulse or not.</param>
            <param name="width">The width of the viewport.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.AmbientLight">
            <summary>Returns the ambient light.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.AtmosphereEffect">
            <summary>Returns the effect applied to the scene's atmosphere.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.Scene">
            <summary>Returns the scene that is currently set to the scene view.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SunDateTime">
            <summary>Returns the position of the Sun.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SunLighting">
            <summary>Returns the type of lighting applied to the scene view.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetTotalMemoryCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_SceneView_TotalMemoryRequestCallback)">
            <summary>*Internal Use* Set the memory check callbacks for the scene.</summary>
            <param name="totalMemory">the callback function that returns the total memory available to the application.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetUsedMemoryCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_SceneView_UsedMemoryRequestCallback)">
            <summary>*Internal Use* Set the memory check callbacks for the scene.</summary>
            <param name="usedMemory">the callback function that returns the currently used amount of memory by the application.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.GetCurrentViewpointCamera">
            <summary>Retrieve a camera for the view.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.InteractionSetOrigin(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>Set the anchor point for to use when interacting with the scene</summary>
            <remarks>
              This method sets the interaction screen anchor point, subsequent interactions pass delta changes from this point.
            </remarks>
            <param name="coordinate">screen coordinate</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.InteractionUpdateHeadingAndPitch(System.Double,System.Double)">
            <summary>Update the cameras heading and pitch in the scene view</summary>
            <remarks>
              This method rotates the cameras heading an pitch
            </remarks>
            <param name="headingDeltaDegrees">The delta heading change of the camera in degrees</param>
            <param name="pitchDeltaDegrees">The delta pitch change of camera in degrees</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.InteractionUpdatePanOrigin(System.Double,System.Double)">
            <summary>Pan the scene view relative to the anchor point, set by calling RT_SceneView_interactionSetOrigin</summary>
            <remarks>
              This method pans the scene view by the given delta inputs. You must call RT_SceneView_interactionSetOrigin before
              calling this method. The delta pan is applied to the anchor point it sets.
            </remarks>
            <param name="screenXDelta">The screen distance in x to pan the scene view</param>
            <param name="screenYDelta">The screen distance in y to pan the scene view</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.InteractionUpdateRotateAroundOrigin(System.Double,System.Double)">
            <summary>
              Rotate the camera in scene view around the origin that's set by RT_SceneView_interactionSetOrigin and updated by
              RT_SceneView_interactionUpdatePanOrigin
            </summary>
            <remarks>
              This method rotates the camera around the origin point that is set by RT_SceneView_interactionSetOrigin. The delta
              rotate is applied to the anchor point it sets.
            </remarks>
            <param name="headingDeltaDegrees">The heading change from the origin point to the camera in degrees</param>
            <param name="pitchDeltaDegrees">The pitch change from the origin point to the camera in degrees</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.InteractionUpdateZoomToOrigin(System.Double)">
            <summary>
              Zoom the camera in scene view towards the origin that's set by RT_SceneView_interactionSetOrigin and updated by
              RT_SceneView_interactionUpdatePanOrigin
            </summary>
            <remarks>
              This method zooms the camera to or from the origin point that is set by RT_SceneView_interactionSetOrigin.
            </remarks>
            <param name="factor">The zoom factor to apply to the camera.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.LocationToScreen(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Converts a coordinate within the map view's spatial reference to a screen coordinate (in pixels) with a visibility.</summary>
            <param name="mapPoint">A point defined within the spatial reference of the map view.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.ScreenToBaseSurface(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>Converts a screen coordinate (in pixels) to a coordinate within the scene view's spatial reference.</summary>
            <param name="screen">The screen point, in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.ScreenToLocationAsync(RuntimeCoreNet.GeneratedWrappers.CoreCoordinate2D)">
            <summary>Converts a screen coordinate to a coordinate within the scene view's spatial reference asynchronously.</summary>
            <param name="screen">The screen point.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetTotalMemory(System.UInt64)">
            <summary>*Internal Use* Set the total memory available to the application</summary>
            <remarks>
              note the minumum total memory that can be set is 256MB
            </remarks>
            <param name="totalMemoryBytes">the total memory available to the application in bytes.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetUsedMemory(System.UInt64)">
            <summary>*Internal Use* Set the memory used by the application</summary>
            <param name="usedMemoryBytes">the memory used by application in bytes.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetViewpointCamera(RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Set the viewpoint camera in the scene view.</summary>
            <param name="camera">the new camera information for the scene view.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetViewpointCameraAsync(RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Change the Scene view to the new camera viewpoint asynchronously.</summary>
            <remarks>
              Non-overloaded method: SetViewpointCameraAsync
            </remarks>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSceneView.SetViewpointCameraAsync(RuntimeCoreNet.GeneratedWrappers.CoreCamera,System.Single)">
            <summary>Change the Scene view to the new camera viewpoint asynchronously using the specified duration to arrive.</summary>
            <remarks>
              Error Types: RT_ErrorType_commonInvalidArgument duration must be greater or equal to 0.0
              Non-overloaded method: SetViewpointCameraWithDurationAsync
            </remarks>
            <param name="camera">The camera.</param>
            <param name="duration">The duration in seconds to move the to new camera location, must be greater or equal</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreScreenCoordinateType">
            <summary>The different types of screen coordinates.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenCoordinateType.DIPs">
            <summary>Screen coordinates are in DIPs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenCoordinateType.Pixels">
            <summary>Screen coordinates are in pixels.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility">
            <summary>Various modes of visibility that can be applied to a location_to_screen_result.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility.Visible">
            <summary>Visible.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility.HiddenByBaseSurface">
            <summary>Blocked by base surface.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility.HiddenByEarth">
            <summary>Point is on other side of globe.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility.HiddenByElevation">
            <summary>Elevation layer is blocking visibility.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreScreenPointVisibility.NotOnScreen">
            <summary>Not within current viewport.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSegment">
            <summary>A segment represents an edge of a multipart geometry, connecting a start to an end point.</summary>
            <remarks>
              Like geometries, segments are also immutable. All segments have a start point, an end point and a spatial reference. The
              spatial reference can be NULL. This is an opaque handle. It must be destroyed by calling RT_Segment_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSegment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSegment instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.PrivateCreateFromHandleInternal_CoreSegment(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSegment class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSegment instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSegment.EndPoint">
            <summary>Retrieve the end point of the segment.</summary>
            <remarks>
              Retrieve the end point of the segment. If an error occurs the error handler RT_ErrorHandler will be called and NULL will
              be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSegment.IsClosed">
            <summary>Indicates is a segment is closed, it has a matching start and end point.</summary>
            <remarks>
              If an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSegment.ObjectType">
            <summary>Gets the object type of the segment</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSegment.SpatialReference">
            <summary>Retrieve the spatial reference for the segment.</summary>
            <remarks>
              Retrieve the spatial reference for the segment. If the segment does not have a spatial reference NULL is returned. This
              object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSegment.StartPoint">
            <summary>Retrieve the start point of the segment.</summary>
            <remarks>
              Retrieve the start point of the segment. If an error occurs the error handler RT_ErrorHandler will be called and NULL
              will be returned.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.GetHash">
            <summary>Retrieve the hash for the segment.</summary>
            <remarks>
              Retrieve the hash for the segment. The hash is used to generate fixed-length output data that acts as a shortened
              reference to the original data. If an error occurs then 0 is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSegment.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSegment)">
            <summary>Check if 2 segments and their spatial references are equal.</summary>
            <remarks>
              Check both the segments and spatial reference to see if they are equal. Will return false if an error occurs.
            </remarks>
            <param name="segmentB">The second segment to compare for equality.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSegmentType">
            <summary>The different types of segments.</summary>
            <remarks>
              Each of the different supported segment types. The segment type can be accessed by calling RT_Segment_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSegmentType.LineSegment">
            <summary>Line segment.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSegmentType.Unknown">
            <summary>An unknown segment.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSelectionMode">
            <summary>Describes how to combine a feature selection request with the current selected features list.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSelectionMode.Add">
            <summary>Appends the features to be selected with the current list of selected features.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSelectionMode.New">
            <summary>Replaces the current list of selected features with the features to be selected.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSelectionMode.Subtract">
            <summary>Removes the features from the current list of selected features.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo">
            <summary>
              Provides various information about the map service such as title, author, keywords and comments. It also includes the
              text anti-aliasing mode.
            </summary>
            <remarks>
              You need to pass this handle to all document info functions. You can get this handle from
              RT_ArcGISMapServiceInfo_getDocumentInfo or RT_ArcGISFeatureServiceInfo_getDocumentInfo and the handle must be destroyed
              from RT_ServiceDocumentInfo_destroy.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceDocumentInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceDocumentInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.AntialiasingMode">
            <summary>Returns the anti aliasing mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Author">
            <summary>Returns the document author.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Category">
            <summary>Returns the document category.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Comments">
            <summary>Returns the document comments.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Keywords">
            <summary>Returns the document keywords.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Subject">
            <summary>Returns the document subject.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.TextAntialiasingMode">
            <summary>Returns the text anti aliasing mode.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceDocumentInfo.Title">
            <summary>Returns the document title.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable">
            <summary>A handle that represents an ArcGIS feature table.</summary>
            <remarks>
              You need to pass this handle to all feature table functions. You will get this handle from various functions and the
              handle must be destroyed from RT_FeatureTable_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceFeatureTable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.PrivateCreateFromHandleInternal_CoreServiceFeatureTable(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceFeatureTable class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceFeatureTable instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.#ctor(System.String)">
            <summary>Creates a new service feature table handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_FeatureTable_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_FeatureTable_destroy on the return value.
            </remarks>
            <param name="uRI">The uri of the service to connect to.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.URI">
            <summary>Returns the URI of the service feature table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.BufferFactor">
            <summary>Returns the buffer applied to geometries when sending a request to the service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.Credential">
            <summary>Returns the user credential of the service feature table.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.FeatureRequestMode">
            <summary>Returns the mode defining when features are requested from the service.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.GeodatabaseVersion">
            <summary>Gets the geodatabase version.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.ApplyEdits">
            <summary>Uploads any changes to the local table to the feature service.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.ClearCache">
            <summary>Clears cached data.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.PopulateFromService(RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Manually query data from the service and import into the table.</summary>
            <param name="clearCache">If true then RT_ServiceFeatureTable_clearCache will be called before populating the table.</param>
            <param name="outfields">A RT_VectorHandle containing RT_StringHandle.</param>
            <param name="parameters">Options for controlling the operation.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.QueryFeaturesWithOption(RuntimeCoreNet.GeneratedWrappers.CoreQueryParameters,RuntimeCoreNet.GeneratedWrappers.CoreQueryFeatureOptions)">
            <summary>Submits a query against the table.</summary>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="queryFeatureOption">Options for controlling what data is in the query result.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceFeatureTable.RefreshData">
            <summary>Refreshes the tables data.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer">
            <summary>A super class for all image tiled layers that fetch map tiles from a remote service.</summary>
            <remarks>
              Allows you to have a custom service image tiled layer. For a given LOD, column and row your custom service image tiled
              layer will be called to generate a request (RT_ServiceImageTiledLayer_setGenerateRequestCallback). Once you set the
              request information (RT_ServiceImageTiledLayer_setRequest) then the request will be sent over the network for you Same
              as a RT_LayerHandle. Changing type just to make it clear you get back a derived type. You need to pass this handle to
              all service image tiled layer functions. The service image tiled layer class is derived from the image tiled layer
              class. It must be destroyed by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.DisposeCallbacks">
            <summary>Releases any callbacks in this class and base classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceImageTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceImageTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.PrivateCreateFromHandleInternal_CoreServiceImageTiledLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceImageTiledLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceImageTiledLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreTileInfo)">
            <summary>Creates a tile service layer object.</summary>
            <remarks>
              Use this method to create a tile service layer object. This object must be destroyed by calling function
              RT_Layer_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Layer_destroy on the return value.
            </remarks>
            <param name="tileInfo">A tile info object.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.SetGenerateRequestCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Layer_Tile)">
            <summary>Sets the callback to invoke when the layer needs to request a tile from the client.</summary>
            <param name="tileRequest">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceImageTiledLayer.SetRequest(RuntimeCoreNet.GeneratedWrappers.CoreTileKey,System.String,RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary)">
            <summary>Sends the request for the tile.</summary>
            <remarks>
              The parameters will be added to the URI for a GET and will be used for a POST. A request will be generated for this.
            </remarks>
            <param name="uRI">The base URI for the request.</param>
            <param name="parameters">The URI parameters for the request.</param>
            <param name="tileKey">The tile key (levelID, column, row).</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceRequest">
            <summary>Represents a service raised by route task or locator task.</summary>
            <remarks>
              It must be destroyed by calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceRequest.PrivateCreateFromHandleInternal_CoreServiceRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceRequest instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo">
            <summary>
              Represents metadata about a service's support for querying features (see RT_FeatureTable_queryFeatures) and requesting
              map images for RT_ArcGISMapImageLayerHandle based on time.
            </summary>
            <remarks>
              It contains various time related information such as the map's time extent and the map's native time reference.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreServiceTimeInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreServiceTimeInfo instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.DefaultTimeInterval">
            <summary>
              Gets the default time interval for the service. This can be used as a time sliders step size. The time unit is specified
              by RT_ServiceTimeInfo_getDefaultTimeIntervalUnit.
            </summary>
            <remarks>
              Will return 0 if an error occurs.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.DefaultTimeIntervalUnit">
            <summary>Gets the default time unit for the service.</summary>
            <remarks>
              Will return RT_TimeUnit_unknown if an error occurs.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.DefaultTimeWindow">
            <summary>Gets the default time window for the service to use for a time slider.</summary>
            <remarks>
              If this value is 0, then the time slider should create and use a time extent for an instant in time (start time = end
              time), if it is greater than 0 this value should be used as the difference between the start time and end time. The time
              units are specified by RT_ServiceTimeInfo_getDefaultTimeIntervalUnit.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.HasLiveData">
            <summary>Indicates if the service has live data.</summary>
            <remarks>
              If true, export and identify operations will default the TimeExtent to startTime = (current server time - time
              interval), endTime = current server time.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.TimeExtent">
            <summary>Gets the time extent for all the data in the layer.</summary>
            <remarks>
              Returns the time extent of the service. Will return NULL if an error occurs.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.TimeReference">
            <summary>Gets the information about the time reference for the service.</summary>
            <remarks>
              Will return NULL if an error occurs.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.TimeRelation">
            <summary>Gets the time relation for the service.</summary>
            <remarks>
              This can be used for determining how a time slider's start and end time are processed.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.Hash">
            <summary>Returns the hash value of the given handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreServiceTimeInfo)">
            <summary>Tests if two service time info handles are equal.</summary>
            <param name="handle2">The second handle.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreServiceType">
            <summary>An enumeration of the different types of ArcGIS Server services.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreServiceType.Unknown">
            <summary>An unknown service type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreServiceType.FeatureService">
            <summary>A feature service</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreServiceType.ImageService">
            <summary>An image service</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreServiceType.MapService">
            <summary>A map service</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol">
            <summary>Used to draw polygon features on a layer using simple patterns.</summary>
            <remarks>
              Fill symbols are used with graphics which are based on a polygon geometry. The symbol can fill the interior of a polygon
              graphic with a solid color. In addition, the symbol can have an optional outline which is defined by a line symbol. It
              must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleFillSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleFillSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.PrivateCreateFromHandleInternal_CoreSimpleFillSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleFillSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleFillSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.#ctor">
            <summary>Creates a simple fill symbol object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle,RuntimeCoreNet.GeneratedWrappers.CoreColor,RuntimeCoreNet.GeneratedWrappers.CoreLineSymbol)">
            <summary>Creates a simple fill symbol object with some initial values.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the simple fill symbol.</param>
            <param name="outline">The outline of the simple fill symbol.</param>
            <param name="style">Indicates the type of simple fill symbol to create.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.Style">
            <summary>Get the style of the simple fill symbol.</summary>
            <remarks>
              Get the style of the simple fill symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbol)">
            <summary>Check if 2 SimpleFillSymbols are equal.</summary>
            <remarks>
              Check SimpleFillSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="simpleFillSymbol2">The 2nd SimpleFillSymbol object to check to see if equal to the 1st SimpleFillSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle">
            <summary>The list of possible simple fill symbol styles.</summary>
            <remarks>
              This is used to determine the style of the simple fill symbol.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.BackwardDiagonal">
            <summary>Fills with backward diagonal lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Cross">
            <summary>Fills with horizontal and vertical lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.DiagonalCross">
            <summary>Fills with forward and backward diagonal lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.ForwardDiagonal">
            <summary>Fills with forward diagonal lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Horizontal">
            <summary>Fills with horizontal lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Null">
            <summary>No fill.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Solid">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Vertical">
            <summary>Fills with vertical lines.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleFillSymbolStyle.Unknown">
            <summary>Unknown fill style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol">
            <summary>Used to draw linear features on a layer.</summary>
            <remarks>
              Simple line symbols display graphics using predefined line style patterns such as solid, dash, dot, etc. It must be
              destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleLineSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.PrivateCreateFromHandleInternal_CoreSimpleLineSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleLineSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleLineSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.#ctor">
            <summary>Creates a simple line symbol object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle,RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Single)">
            <summary>Creates a simple line symbol object with some initial values.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the simple line symbol.</param>
            <param name="style">Indicates the type of simple line symbol to create.</param>
            <param name="width">The width of the simple line symbol.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.Style">
            <summary>Get the style of the simple line symbol.</summary>
            <remarks>
              Get the style of the simple line symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbol)">
            <summary>Check if 2 SimpleLineSymbols are equal.</summary>
            <remarks>
              Check SimpleLineSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="simpleLineSymbol2">The 2nd SimpleLineSymbol object to check to see if equal to the 1st SimpleLineSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle">
            <summary>The list of possible simple line symbol styles.</summary>
            <remarks>
              This is used to determine the style of the simple line symbol.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.Dash">
            <summary>Dash line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.DashDot">
            <summary>Dash dot line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.DashDotDot">
            <summary>Dash dot dot line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.Dot">
            <summary>Dot line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.Null">
            <summary>Invisible line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.Solid">
            <summary>Solid line.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleLineSymbolStyle.Unknown">
            <summary>Unknown line style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol">
            <summary>Used to draw point or multipoint features on a layer using an 3D marker symbol.</summary>
            <remarks>
              simple marker scene symbols display graphics using a 3D symbol. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleMarkerSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleMarkerSceneSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.PrivateCreateFromHandleInternal_CoreSimpleMarkerSceneSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleMarkerSceneSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleMarkerSceneSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.#ctor">
            <summary>Creates a simple marker scene symbol with unknown style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle,RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol .</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor_position of the symbol RT_SceneSymbolAnchorPosition</param>
            <param name="color">The color of the symbol RT_ColorHandle</param>
            <param name="depth">The depth in meters of the cone symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
            <param name="style">The style of the symbol RT_SimpleMarkerSceneSymbolStyle</param>
            <param name="width">The width in meters of the cone symbol</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.Style">
            <summary>Get the style of the scene marker symbol.</summary>
            <remarks>
              Get the style of the simple scene marker symbol RT_SimpleMarkerSceneSymbolStyle.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.ConeWithColorDiameterHeight(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double)">
            <summary>Creates a simple marker scene symbol with cone style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of base of the cone symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.ConeWithColorDiameterHeightAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with cone style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cone symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of base of the cone symbol</param>
            <param name="height">The height in meters of the cone symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.CubeWithColorSize(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double)">
            <summary>Creates a simple marker scene symbol with cube style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="size">The size in meters of base of the cube in each dimension symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.CubeWithColorSizeAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with cube style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cube symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="size">The size in meters of base of the cube in each dimension symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.CylinderWithColorDiameterHeight(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double)">
            <summary>Creates a simple marker scene symbol with cylinder style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of base of the cylinder symbol</param>
            <param name="height">The height in meters of the cylinder symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.CylinderWithColorDiameterHeightAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with cylinder style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cube symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of base of the cylinder symbol</param>
            <param name="height">The height in meters of the cylinder symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.DiamondWithColorSizeHeight(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double)">
            <summary>Creates a simple marker scene symbol with diamond style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="height">The height in meters of the diamond symbol</param>
            <param name="size">The size in meters of width and depth of the diamond symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.DiamondWithColorSizeHeightAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with diamond style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cube symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="height">The height in meters of the diamond symbol</param>
            <param name="size">The size in meters of width and depth of the diamond symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.SphereWithColorDiameter(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double)">
            <summary>Creates a simple marker scene symbol with sphere style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of sphere symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.SphereWithColorDiameterAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with sphere style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cube symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="diameter">The diameter in meters of sphere symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.TetrahedronWithColorSizeHeight(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double)">
            <summary>Creates a simple marker scene symbol with tetrahedron style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the symbol</param>
            <param name="height">The height in meters of the tetrahedron symbol</param>
            <param name="size">The size in meters of width and depth of the tetrahedron symbol</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbol.TetrahedronWithColorSizeHeightAnchorPosition(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreSceneSymbolAnchorPosition)">
            <summary>Creates a simple marker scene symbol with tetrahedron style.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Symbol_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="anchorPosition">The anchor position RT_SceneSymbolAnchorPosition of the cube symbol</param>
            <param name="color">The color of the symbol</param>
            <param name="height">The height in meters of the tetrahedron symbol</param>
            <param name="size">The size in meters of width and depth of the tetrahedron symbol</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle">
            <summary>The list of possible simple marker scene symbol styles.</summary>
            <remarks>
              This is used to determine the style of the simple scene marker symbol.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Cone">
            <summary>The marker is a cone.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Cube">
            <summary>The marker is a 3D cube.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Cylinder">
            <summary>The marker is a cylinder.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Diamond">
            <summary>The marker is a 3D diamond.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Sphere">
            <summary>The marker is a sphere.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Tetrahedron">
            <summary>The marker is a tetrahedron.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSceneSymbolStyle.Unknown">
            <summary>Unknown simple marker scene style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol">
            <summary>Used to draw point or multipoint features on a layer.</summary>
            <remarks>
              Simple marker symbols display graphics using simple, predefined markers such as circle, cross, etc. In addition, the
              markers can have an optional outline, which is defined by a line symbol. It must be destroyed by calling
              RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.PrivateCreateFromHandleInternal_CoreSimpleMarkerSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleMarkerSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleMarkerSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.#ctor">
            <summary>Creates a simple marker symbol object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle,RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Single)">
            <summary>Creates a simple marker symbol object with some initial values.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the simple marker symbol.</param>
            <param name="size">The size of the simple marker symbol.</param>
            <param name="style">Indicates the type of simple marker symbol to create.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.Color">
            <summary>Get the color for the simple marker symbol.</summary>
            <remarks>
              Get the color for the simple marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.Outline">
            <summary>Get the outline of the simple marker symbol.</summary>
            <remarks>
              Get the outline of the simple marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.Size">
            <summary>Get the size of the simple marker symbol.</summary>
            <remarks>
              Get the size of the simple marker symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.Style">
            <summary>Get the style of the simple marker symbol.</summary>
            <remarks>
              Get the style of the simple marker symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbol)">
            <summary>Check if 2 line SimpleMarkerSymbols are equal.</summary>
            <remarks>
              Check SimpleMarkerSymbols are equal. Will return false if an error occurs.
            </remarks>
            <param name="simpleMarkerSymbol2">The 2nd SimpleMarkerSymbol object to check to see if equal to the 1st SimpleMarkerSymbol object.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle">
            <summary>The list of possible simple marker symbol styles.</summary>
            <remarks>
              This is used to determine the style of the simple marker symbol.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Circle">
            <summary>The marker is a circle.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Cross">
            <summary>The marker is a cross.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Diamond">
            <summary>The marker is a diamond.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Square">
            <summary>The marker is a square.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Triangle">
            <summary>The marker is a triangle.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.X">
            <summary>The marker is a diagonal cross.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSimpleMarkerSymbolStyle.Unknown">
            <summary>Unknown simple marker style.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer">
            <summary>A Simple Renderer object.</summary>
            <remarks>
              You need to pass this handle to all simple renderer functions. This is an opaque handle. It must be destroyed by calling
              RT_Renderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.PrivateCreateFromHandleInternal_CoreSimpleRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSimpleRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSimpleRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.#ctor">
            <summary>Creates a new simple renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Creates a new simple renderer object with the given symbol.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.Description">
            <summary>Gets the description of this renderer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.Label">
            <summary>Gets the renderer's label.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSimpleRenderer.Symbol">
            <summary>Gets the renderer's symbol.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSlopeType">
            <summary>The list of raster slope types.</summary>
            <remarks>
              This is used to determine the raster slope type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSlopeType.None">
            <summary>Slope type is not defined.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSlopeType.Degree">
            <summary>Degree slope type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSlopeType.PercentRise">
            <summary>Percent rise slope type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSlopeType.Scaled">
            <summary>Scaled slope type</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode">
            <summary>Solve codes related to the exceptions.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InsufficientNumberOfStops">
            <summary>At least 2 stops are required to solve a route.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopUnlocated">
            <summary>One or more stops is unlocated. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopLocatedOnNonTraversableElement">
            <summary>One or more stops is located on a non-traversable element. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopLocatedOnSoftRestrictedElement">
            <summary>One or more stops is located on a soft-restricted element. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PointBarrierUnlocated">
            <summary>One or more point barriers is unlocated. Details = indexes of the point barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PointBarrierInvalidAddedCostAttributeName">
            <summary>One or more point barriers has an invalid added cost attribute name. Details = indexes of the point barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.LineBarrierInvalidScaledCostAttributeName">
            <summary>One or more line barriers has an invalid scaled cost attribute name. Details = indexes of the line barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.LineBarrierDoesNotCoverAnyNetworkElements">
            <summary>One or more line barriers does not cover any network elements. Details = indexes of the line barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolygonBarrierInvalidScaledCostAttributeName">
            <summary>One or more polygon barriers has an invalid scaled cost attribute name. Details = indexes of the polygon barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolygonBarrierDoesNotCoverAnyNetworkElements">
            <summary>One or more polygon barriers does not cover any network elements. Details = indexes of the polygon barriers.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolygonBarrierNonPositiveScaledCostAttribute">
            <summary>
              One or more polygon barriers has non-positive scaled cost attribute value. RT_ElementType_int32 Details[0] = index of
              the polygon barrier. RT_ElementType_array Details[1] = names of the invalid cost attributes.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolylineBarrierNonPositiveScaledCostAttribute">
            <summary>
              One or more polyline barriers has non-positive scaled cost attribute value. RT_ElementType_int32 Details[0] = index of
              the polyline barrier. RT_ElementType_array Details[1] = names of the invalid cost attributes.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidImpedanceAttribute">
            <summary>The impedance attribute name is invalid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidRestrictionAttribute">
            <summary>One or more restriction attribute names are invalid. Details = names of invalid restriction attributes.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidAccumulateAttribute">
            <summary>One or more accumulate attribute names are invalid. Details = names of invalid accumulate attributes.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidDirectionsTimeAttribute">
            <summary>The directions time attribute name is invalid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidDirectionsDistanceAttribute">
            <summary>The directions distance attribute name is invalid.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidAttributeParametersAttributeName">
            <summary>
              One or more attribute names associated with the custom parameter attribute values are invalid. Details = a collection of
              RT_DictionaryHandle elements that have the following structure: &lt;attribute_name, &lt;parameter_attribute_name,
              parameter_attribute_value&gt;&gt;.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidAttributeParametersParameterName">
            <summary>
              One or more parameter names associated with the custom parameter attribute values are invalid. Details = a collection of
              RT_DictionaryHandle elements that have the following structure: &lt;attribute_name, &lt;parameter_attribute_name,
              parameter_attribute_value&gt;&gt;.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidAttributeParametersValueType">
            <summary>
              One or more parameter value types associated with the custom parameter attribute values are invalid. Details = indexes
              of the custom attribute parameter values.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidAttributeParametersRestrictionUsageValue">
            <summary>
              One or more restriction usage values associated with the custom parameter attribute values are invalid. Details = a
              collection of RT_DictionaryHandle elements that have the following structure: &lt;attribute_name,
              &lt;parameter_attribute_name, parameter_attribute_value&gt;&gt;.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.NeutralAttributeParametersRestrictionUsageValue">
            <summary>
              One or more restriction usage values associated with the custom parameter attribute values are neutral (i.e., have no
              effect). Details = a collection of RT_DictionaryHandle elements that have the following structure: &lt;attribute_name,
              &lt;parameter_attribute_name, parameter_attribute_value&gt;&gt;.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.TraversedSoftRestrictedElements">
            <summary>
              The resulting route has traversed one or more soft-restricted elements. Details = indexes of the traversed (soft)
              restriction attribute names.
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.NetworkHasNoHierarchyAttribute">
            <summary>The network does not have a hierarchy attribute for performing hierarchical route planning.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.NoPathFoundBetweenStops">
            <summary>No path can be found between a given pair of stops. Details = indexes of the pair of stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.UndefinedInputSpatialReference">
            <summary>The Route_parameters has an undefined input spatial reference.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.UndefinedOutputSpatialReference">
            <summary>The Route_parameters has an undefined output spatial reference.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidDirectionsStyle">
            <summary>Invalid directions style.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidDirectionsLanguage">
            <summary>Invalid directions langugage.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.DirectionsTimeAndImpedanceAttributeMismatch">
            <summary>Directions time attribute and impedance attribute mismatch.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.InvalidDirectionsRoadClassAttribute">
            <summary>Invalid directions road class attribute.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.RouteLocalStartTimeBeforeUnixEpoch">
            <summary>The earliest supported start time is the unix epoch.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.RouteUtcStartTimeAtStopBeforeUnixEpoch">
            <summary>One or more stops has a start time before the unix epoch. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopLocalTimeWindowStartsBeforeUnixEpoch">
            <summary>One or more stops has a local time window before the unix epoch. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopUtcTimeWindowStartsBeforeUnixEpoch">
            <summary>One or more stops has a UTC time window before the unix epoch. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopTimeWindowIsInverted">
            <summary>One or more stops has a time window end that occurs before its time window start. Details = indexes of the stops.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.WalkingModeRouteTooLarge">
            <summary>The extent of the problem is too large to solve using the walking travel mode.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopHasNullGeometry">
            <summary>One or more stops has a null geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PointBarrierHasNullGeometry">
            <summary>One or more point barriers has a null geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolylineBarrierHasNullGeometry">
            <summary>One or more polyline barriers has a null geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.PolygonBarrierHasNullGeometry">
            <summary>One or more polygon barriers has a null geometry.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSolveCode.StopHasInvalidAddedCost">
            <summary>
              One or more stop has invalid added cost. RT_ElementType_int32 Details[0] = index of stop, RT_ElementType_array
              Details[1] = names of invalid added costs.
            </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition">
            <summary>A struct that represents a warning or error condition returned by a route task solve.</summary>
            <remarks>
              Solve conditions represent exceptional cases (e.g., invalid input, unlocated stops) which must be reported to the client
              upon completion of the route task solve operation. This includes support for both warning conditions (where the input is
              ineffective, but valid) and error conditions (where the input is invalid). The code associated with the condition
              indicates the condition type (see RT_SolveCode enum for details), and the details associated with the condition indicate
              the objects to which the condition refers (e.g., if the code is RT_SolveCode_stopUnlocated, then the details vector
              contains the indices of the problematic stop(s) which are unlocated in the input stops vector of the route settings
              object). You need to pass this handle to all solve condition's functions. It represents an instance of a solve
              condition. This is an opaque handle. It must be destroyed by calling RT_SolveCondition_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSolveCondition class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSolveCondition instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.GetCode">
            <summary>Gets a solve condition code.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSolveCondition.GetDetails">
            <summary>Gets solve condition details.</summary>
            <remarks>
              The valid values types for details array: RT_ElementType_int32 if solve condition related with stops or barriers.
              RT_ElementType_string if solve condition related with invalid accumulative or restriction attributes names.
              RT_ElementType_dictionary if solve condition related with attribute parameter values or restriction usage parameters.
              Dictionary has this structure: &lt;attribute_name, &lt;parameter_name, parameter_value&gt;&gt;. Combined when first
              element is RT_ElementType_int32 and second element is RT_ElementType_array. Please look to the RT_SolveCode
              documentation which describes this case for several solve codes.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSortOrder">
            <summary>The various ways a query result can be ordered by.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSortOrder.Unknown">
            <summary>An unknown order. Normally the result when an error occurs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSortOrder.Ascending">
            <summary>Sort the query results in an ascending order.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSortOrder.Descending">
            <summary>Sort the query results in a descending order.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition">
            <summary>A structure that describes a source object postion.</summary>
            <remarks>
              Class presents position of network element on network source. You need to pass this handle to all route source object
              position functions. It represents an instance of a source object position. This is an opaque handle. It must be
              destroyed by calling RT_SourceObjectPosition_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSourceObjectPosition class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSourceObjectPosition instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.#ctor(System.Int32,System.Int64,System.Double)">
            <summary>Creates a source object position instance.</summary>
            <remarks>
              Creates a source object position. This object must be destroyed by calling function RT_SourceObjectPosition_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
            <param name="position">A position.</param>
            <param name="sourceIndex">A source instance.</param>
            <param name="sourceOid">A source OID.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.Position">
            <summary>Gets position.</summary>
            <remarks>
              Gets source object's position.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.SourceIndex">
            <summary>Gets source index.</summary>
            <remarks>
              Gets index of the source.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSourceObjectPosition.SourceObjectID">
            <summary>Gets source object ID.</summary>
            <remarks>
              Gets source object ID.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference">
            <summary>A spatial reference object.</summary>
            <remarks>
              You need to pass this handle to all spatial reference functions. You cannot directly access spatial reference
              properties. This is an opaque handle. It must be destroyed by calling RT_SpatialReference_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSpatialReference class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSpatialReference instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.#ctor(System.Int32)">
            <summary>Creates a spatial reference based on WKID.</summary>
            <remarks>
              The method will create a spatial reference that has only horizontal coordinate system and does not have vertical
              coordinate system associated with it. This object must be destroyed by calling function RT_SpatialReference_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
            <param name="wKID">The well known ID of the horizontal coordinate system. Must be a positive value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.#ctor(System.String)">
            <summary>Creates a spatial reference based on well known text.</summary>
            <remarks>
              This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
            <param name="wkText">The well known text of the spatial reference to create.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.#ctor(System.Int32,System.Int32)">
            <summary>Creates a spatial reference based on WKID for the horizontal coordinate system and vertical coordinate system.</summary>
            <remarks>
              The method will create a spatial reference that has both horizontal and vertical coordinate systems. When the
              vertical_WKID is 0, the method is equivalent to calling RT_SpatialReference_create(WKID), and does not define a vertical
              coordinate system part. This object must be destroyed by calling function RT_SpatialReference_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
            <param name="wKID">The well known ID of the horizontal coordinate system. Must be a positive value.</param>
            <param name="verticalWKID">The well known ID of the vertical coordinate system. Must be a non negative value.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.WKID">
            <summary>Retrieve the well known id for the horizontal coordinate system.</summary>
            <remarks>
              Retrieves the well known id for the horizontal coordinate system. Will return 0 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.WKText">
            <summary>Retrieve the well known string for the horizontal and vertical coordinate system.</summary>
            <remarks>
              Retrieves the well known string for the horizontal and vertical coordinate system. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.BaseGeographic">
            <summary>
              If the given spatial reference is a projected coordinate system, then this will return the geographic coordinate system
              of that system.
            </summary>
            <remarks>
              If the spatial reference is a projected coordinate system, then a spatial reference object representing the underlying
              geographic coordinate system is returned. Every projected coordinate system has an underlying geographic coordinate
              system. If the spatial reference is a geographic coordinate system, then a reference to itself is returned. If the
              spatial reference is a local spatial reference, a NULL is returned with an error. The returned object must be destroyed
              by calling function RT_SpatialReference_destroy. If an error occurs the error handler RT_ErrorHandler will be called and
              NULL will be returned.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
              Warning: This function will return NULL. Geometry types do not support custom data.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.Extent">
            <summary>Retrieve the extent for the spatial reference.</summary>
            <remarks>
              Retrieve the extent for the spatial reference which is a envelope and contains the same spatial reference as the input
              spatial reference. This object must be destroyed by calling function RT_Geometry_destroy.
              Warning: You must call RT_Geometry_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsGeographic">
            <summary>Returns true if spatial reference is a Geographic Coordinate System.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsPannable">
            <summary>Returns true if coordinate system is horizontally pannable.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsProjected">
            <summary>Returns true if spatial reference is a Projected Coordinate System.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.Unit">
            <summary>Returns the unit of measure for this spatial reference system.</summary>
            <remarks>
              The returned object must be destroyed by calling function RT_Unit_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.VerticalWKID">
            <summary>Retrieve the well known id for the vertical coordinate system.</summary>
            <remarks>
              Retrieves the well known id for the vertical coordinate system. Will return 0 if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.WGS84">
            <summary>Creates a spatial reference based on WGS84.</summary>
            <remarks>
              The method will create a WGS84 spatial reference. This object must be destroyed by calling function
              RT_SpatialReference_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.FromJSON(System.String)">
            <summary>Creates a spatial reference based on json input.</summary>
            <remarks>
              This object must be destroyed by calling function RT_SpatialReference_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
            <param name="json">The json text of the spatial reference to create.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.GetHash">
            <summary>Retrieve the hash for the spatial reference.</summary>
            <remarks>
              Retrieve the hash for the spatial reference. The hash is used to generate fixed-length output data that acts as a
              shortened reference to the original data. If an error occurs then 0 is returned.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference)">
            <summary>Check if the 2 spatial references are equal.</summary>
            <remarks>
              Check spatial references to see if they are equal. Will return false if an error occurs.
            </remarks>
            <param name="spatialReferenceB">The 2nd spatial reference to check to see if equal to the 1st.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsValidVerticalWKID(System.Int32)">
            <summary>Returns true if id can be used to create a vertical coordinate system.</summary>
            <param name="wkid">The identifier of the spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsValidWKID(System.Int32)">
            <summary>Returns true if id can be used to create a horizontal coordinate system.</summary>
            <param name="wkid">The identifier of the spatial reference.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.IsValidWKT(System.String)">
            <summary>Returns true if given string is valid WellKnownText.</summary>
            <param name="wkt">A string containing WellKnownText.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.ToJSON">
            <summary>Serializes the Spatial Reference object to Json.</summary>
            <remarks>
              The returned object must be destroyed by calling function RT_String_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called and NULL will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_String_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference.WebMercator">
            <summary>Creates a spatial reference based on web Mercator.</summary>
            <remarks>
              The method will create a web Mercator spatial reference. This object must be destroyed by calling function
              RT_SpatialReference_destroy. If an error occurs the error handler RT_ErrorHandler will be called and NULL will be
              returned.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_SpatialReference_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship">
            <summary>The various operators for spatially relating geometries.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Unknown">
            <summary>An unknown value. Normally the result when an error occurs.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Relate">
            <summary>relate operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Equals">
            <summary>equals operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Disjoint">
            <summary>no summary documentation found</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Intersects">
            <summary>intersects operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Touches">
            <summary>touches operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Crosses">
            <summary>crosses operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Within">
            <summary>within operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Contains">
            <summary>contains operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.Overlaps">
            <summary>overlaps operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.EnvelopeIntersects">
            <summary>envelope intersects operator</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSpatialRelationship.IndexIntersects">
            <summary>index intersects operator</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreState">
            <summary>Various states that could be changed on handles.</summary>
            <remarks>
              Each of the values represents a state that is found within a handle.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.AllowMagnifierToPanMap">
            <summary>Allow magnifier to pan map</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.AnimationStarted">
            <summary>Animation started</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.AnimationCompleted">
            <summary>Animation completed</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Attribution">
            <summary>Attribution</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Attributes">
            <summary>Attributes</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.BaseLayers">
            <summary>Base layers</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Basemap">
            <summary>Basemap</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Bookmarks">
            <summary>Bookmarks</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Closing">
            <summary>Closing</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.DefinitionExpression">
            <summary>Definition expression</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Description">
            <summary>Description</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.DrawRequested">
            <summary>Draw requested</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.DrawStatus">
            <summary>Draw status</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.DrawingStarted">
            <summary>Drawing started</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.DrawingCompleted">
            <summary>Drawing completed</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ElevationSources">
            <summary>Elevation Sources</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Enabled">
            <summary>enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.EndTimeField">
            <summary>End time field</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.FullExtent">
            <summary>Full extent</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Height">
            <summary>Height</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Version">
            <summary>Version</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.GeodatabaseVersion">
            <summary>Geodatabase version</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.GeographicTransformations">
            <summary>Geographic transformations</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Geometry">
            <summary>Geometry</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ImageFormat">
            <summary>Image format</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.InitialBackground">
            <summary>Initial background</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.InitialGrid">
            <summary>Initial grid</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.InitialTimeExtent">
            <summary>Initial time extent</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.InitialTimeDisplay">
            <summary>Initial time display</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.IsInteracting">
            <summary>Is Interacting</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.KmlFeatureIsUpdating">
            <summary>KML Feature is updating</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.KmlFeatureIsUpdated">
            <summary>KML Feature is updated</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Labeling">
            <summary>Labeling</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.LabelsEnabled">
            <summary>Labels enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.LegendInfos">
            <summary>Legend infos</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.LoadStatus">
            <summary>Load status</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.LogoVisible">
            <summary>Logo visible</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.MagnifierEnabled">
            <summary>Magnifier enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Map">
            <summary>Map</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.MaxExtent">
            <summary>Max extent</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.MaxScale">
            <summary>Max scale</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.MaxTimeExtent">
            <summary>Max time extent</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.MinScale">
            <summary>Min scale</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Name">
            <summary>Name</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Navigating">
            <summary>Navigating</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Opacity">
            <summary>Opacity</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.OperationalLayers">
            <summary>Operational layers</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.PopupDefinition">
            <summary>Popup definition</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.RasterRenderer">
            <summary>Raster renderer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ReferenceLayers">
            <summary>Reference layers</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Renderer">
            <summary>Renderer</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.RenderingMode">
            <summary>Rendering mode</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Rotation">
            <summary>Rotation</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Scale">
            <summary>Scale</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Selected">
            <summary>Selected</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SelectionColor">
            <summary>Selection color</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SelectionSymbol">
            <summary>Selection symbol</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SelectionWidth">
            <summary>Selection width</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Scene">
            <summary>Scene</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SceneProperties">
            <summary>Scene view properties   Scene Properties</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SceneViewAmbientLight">
            <summary>Scene view's ambient light</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SceneViewAtmosphereEffect">
            <summary>Scene view's atmosphere effect</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SceneViewSunDatetime">
            <summary>Scene view's Sun datetime</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ShowInLegend">
            <summary>Show in legend</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SpatialReference">
            <summary>Spatial reference</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.StartTimeField">
            <summary>Start time field</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.SubLayerContents">
            <summary>Sub Layer Contents</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Symbol">
            <summary>Symbol</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.TimeExtent">
            <summary>Time extent</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Visibility">
            <summary>Visibility</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ViewPoint">
            <summary>Viewpoint</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.Width">
            <summary>Width</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.WrapAroundEnabled">
            <summary>Wrap around enabled</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.WrapAroundMode">
            <summary>Wrap around mode</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreState.ZIndex">
            <summary>Z index</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStop">
            <summary>A class that represents a location to be visited along a route.</summary>
            <remarks>
              The Stop class contains location inputs for the Route_task. The Route_task will create a route between two or more
              Stops. A Stop object is not an arbitrary bag of properties, but contains only the properties needed for routing (for
              example, a Stop object does not have address information). Stop objects are collected into a vector by value, and passed
              as an input to Route_task. Changing type just to make it clear you get back a derived type. You need to pass this handle
              to all stop functions. The stop class is derived from the graphic class. It must be destroyed by calling
              RT_Stop_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStop class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStop instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint)">
            <summary>Creates a stop instance with point.</summary>
            <remarks>
              Creates a stop. This object must be destroyed by calling function RT_Stop_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument You must pass in a geometry to create the stop.
            </remarks>
            <param name="point">A point.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.ArrivalCurbApproach">
            <summary>Gets arrival curb approach.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.CurbApproach">
            <summary>Gets curb approach.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.CurrentBearing">
            <summary>Gets current bearing in degrees.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.CurrentBearingTolerance">
            <summary>Gets current bearing tolerance in degrees.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.CustomData">
            <summary>Retrieves custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.DepartureCurbApproach">
            <summary>Gets departure curb approach.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.DistanceToNetworkLocation">
            <summary>Gets distance to network location in meters.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.Geometry">
            <summary>Gets stop's point geometry.</summary>
            <remarks>
              Returns point geometry from stop. The object cannot be used after it has been destroyed. The memory is deleted. If an
              error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.LocalArrivalTime">
            <summary>Gets local arrival time.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.LocalDepartureTime">
            <summary>Gets local departure time.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.LocalTimeWindowEnd">
            <summary>Gets local time window end.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.LocalTimeWindowStart">
            <summary>Gets local time window start.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.LocationStatus">
            <summary>Gets location status.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.Name">
            <summary>Gets stop's name.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.NavigationLatency">
            <summary>Gets navigation latency in seconds.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.NavigationSpeed">
            <summary>Gets navigation speed in meters per second.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.NetworkLocation">
            <summary>Gets network location.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.RouteName">
            <summary>Gets route's name.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.Sequence">
            <summary>Gets sequence.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.ViolationTime">
            <summary>Gets violation time in minutes.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStop.WaitTime">
            <summary>Gets wait time in minutes.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.FromJSON(System.String)">
            <summary>Converts a JSON string to an object.</summary>
            <param name="json">The JSON.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.GetAddedCost(System.String)">
            <summary>Gets added cost attribute vaue.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
            <param name="attributeName">The name of the cost attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.GetCumulativeCost(System.String)">
            <summary>Gets cumulative cost attribute value.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
            <param name="attributeName">The name of cumulative attribute.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.SetAddedCost(System.String,System.Double)">
            <summary>Sets added cost.</summary>
            <remarks>
              The object cannot be used after it has been destroyed. The memory is deleted. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
            <param name="addedCost">The added cost.</param>
            <param name="attributeName">The attribute name.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStop.ToJSON">
            <summary>Converts an object to JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer">
            <summary>A stretch renderer object which is derived from a base stretch renderer object.</summary>
            <remarks>
              Same as a RT_RasterRendererHandle. Changing type just to make it clear you get back a derived type. You need to pass
              this handle to all stretch renderer functions.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStretchRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStretchRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.PrivateCreateFromHandleInternal_CoreStretchRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStretchRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStretchRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor">
            <summary>Creates a stretch renderer handle.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreColorRampName)">
            <summary>Creates a stretch renderer handle.</summary>
            <param name="colorRampName">RT_ColorRampName</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreColorRampName)">
            <summary>Creates a stretch renderer handle.</summary>
            <param name="colorRampName">RT_ColorRampName</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="maxValues">Maximum stretch values. A RT_VectorHandle of RT_ElementType_float64.</param>
            <param name="minValues">Minimum stretch values. A RT_VectorHandle of RT_ElementType_float64.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor(System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreColorRampName)">
            <summary>Creates a stretch renderer handle.</summary>
            <param name="colorRampName">RT_ColorRampName</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
            <param name="max">Maximum percent clip value.</param>
            <param name="min">Minimum percent clip value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.#ctor(System.Double,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.Boolean,RuntimeCoreNet.GeneratedWrappers.CoreColorRampName)">
            <summary>Creates a stretch renderer handle.</summary>
            <param name="colorRampName">RT_ColorRampName</param>
            <param name="estimateStats">Whether to estimate statistics if it does not exist.</param>
            <param name="factor">Standard deviation factor. Default value is 2.</param>
            <param name="gammas">Gamma adjustment. A RT_VectorHandle of RT_ElementType_float64. Can be NULL.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStretchRenderer.ColorRampName">
            <summary>Returns color ramp name if it's set.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStretchType">
            <summary>The list of raster stretch types.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreStretchType.None">
            <summary>Stretch type not defined</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreStretchType.MinimumMaximum">
            <summary>Min/Max stretch type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreStretchType.StandardDeviation">
            <summary>Standard deviation stretch type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreStretchType.HistogramEqualization">
            <summary>Histogram equalization stretch type</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreStretchType.PercentClip">
            <summary>Percent clip stretch type</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreString">
            <summary>The String object.</summary>
            <remarks>
              You need to pass this handle to all String functions. You will get this handle from various functions and the handle
              must be destroyed from RT_String_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreString.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreString.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreString.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreString.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreString class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreString instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreString.Size">
            <summary>Retrieves the number of characters in the string.</summary>
            <remarks>
              Retrieves the number of characters in the string. Will return zero if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreString.GetByteArray">
            <summary>Returns underlying byte array.</summary>
            <remarks>
              The byte array that is returned cannot be used after RT_StringHandle has been destroyed. The memory is deleted.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary">
            <summary>The String dictionary object.</summary>
            <remarks>
              You need to pass this handle to all String dictionary functions. You will get this handle from various functions and the
              handle must be destroyed from RT_StringDictionary_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStringDictionary class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStringDictionary instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.#ctor">
            <summary>Creates a dictionary of strings. This allocates memory that must be deleted.</summary>
            <remarks>
              This object must be destroyed by calling function RT_StringDictionary_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_StringDictionary_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Keys">
            <summary>Returns a collection containing all the keys in the dictionary.</summary>
            <remarks>
              Returns a list of keys found in the dictionary.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Size">
            <summary>Determines the number of strings in the string dictionary.</summary>
            <remarks>
              Retrieves the number of strings in the string dictionary. If an error occurs a 0 will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.At(System.String)">
            <summary>Get a string for a specific key.</summary>
            <remarks>
              Retrieves the string for the specified key.
            </remarks>
            <param name="key">The key which you want to get the string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Contains(System.String)">
            <summary>Does the string dictionary contain a key.</summary>
            <remarks>
              Does the string dictionary contain a specific key.
            </remarks>
            <param name="key">The key you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Insert(System.String,System.String)">
            <summary>Insert a string for a given key in the string dictionary.</summary>
            <remarks>
              Insert a string at a specified key position to the string dictionary.
            </remarks>
            <param name="key">The key position which you want to insert the string.</param>
            <param name="value">The string that is to be added.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.IsEmpty">
            <summary>Determines if there are any strings in the dictionary.</summary>
            <remarks>
              Check if the string dictionary object has any strings in it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Remove(System.String)">
            <summary>Remove a string at a specific key position in the string dictionary.</summary>
            <remarks>
              Remove a string at a specific position in the string dictionary.
            </remarks>
            <param name="key">The key position which you want to remove the string.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.RemoveAll">
            <summary>Remove all strings from the string dictionary.</summary>
            <remarks>
              Remove all strings from the string dictionary.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStringDictionary.Replace(System.String,System.String)">
            <summary>Replace a string at a specific key position in the string dictionary.</summary>
            <remarks>
              Replace a string at a specific key position in the string dictionary.
            </remarks>
            <param name="key">The key position which you want to replace the string.</param>
            <param name="newValue">The new string.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters">
            <summary>Search parameters used to search for symbol primitives in a SymbolDictionary.</summary>
            <remarks>
              StyleSymbolSearchParameters allow you to specify different parameters when searching a symbol dictionary with
              RT_SymbolDictionary_searchSymbolsAsync. For example, you may want to search for any symbols where the category is "2",
              the name contains "destroyed", and the tags contain "Protection Lines". You need to pass this handle to all style symbol
              search parameters functions. This object allows you to set the parameters inorder to perform a search on symbol
              dictionary. It must be destroyed by calling RT_StyleSymbolSearchParameters_destroy.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStyleSymbolSearchParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStyleSymbolSearchParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.#ctor">
            <summary>Creates a new Style Symbol Search Parameters object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_StyleSymbolSearchParameters_destroy. If an error occurs the error handler RT_ErrorHandler will be called. This object
              is a collection of name, class, category, tags and keys. Ssymbol dictionary performs a search based on that and looks
              for all the symbols matching these entries in stylx file.
              Warning: You must call RT_StyleSymbolSearchParameters_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.Categories">
            <summary>Returns a string list of all the categories defined in database used for search.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.CategoriesStrictMatch">
            <summary>Returns a boolean showing if the categories parameter is to be matched exactly against the database.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.IsEmpty">
            <summary>Returns a boolean showing if all the parameters are empty.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.Keys">
            <summary>Returns a string list of all the keys(unique identifiers) used for search.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.KeysStrictMatch">
            <summary>Returns a boolean showing if the keys parameter is to be matched exactly against the database.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.Names">
            <summary>Returns a string list of all the names used for search</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.NamesStrictMatch">
            <summary>Returns a boolean showing if the names parameter is to matched exactly against the database.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.SymbolClasses">
            <summary>Returns a string list of all the symbol classes(symbol types) used for search. e.g. Point, Line, Polygon</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.SymbolClassesStrictMatch">
            <summary>Returns a boolean showing if the symbol classes parameter is to be matched exactly against the database.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.Tags">
            <summary>Returns a string list of all the tags used for search</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters.TagsStrictMatch">
            <summary>Returns a boolean showing if the tags parameter is to matched exactly against the database.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult">
            <summary>A search result object returned by symbol dictionary.</summary>
            <remarks>
              This object is returned by symbol dictionary based on the search performed using search parameters. It contains the
              information related to name, tags, category, class type, key associated to a symbol. It also returns the symbol. You
              need to pass this handle to all style symbol search result functions. This object returns the results based on search
              performed in the symbol dictionary using the search parameters. It must be destroyed by calling
              RT_StyleSymbolSearchResult_destroy. This returns the cim symbol and all the parameters associated to it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreStyleSymbolSearchResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreStyleSymbolSearchResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.Category">
            <summary>Returns the category associated to a symbol</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.Key">
            <summary>Returns the key(unique identifier) associated to a symbol</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.Name">
            <summary>Returns the name associated to a symbol</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.SymbolClass">
            <summary>Returns the class associated to a symbol</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.Tags">
            <summary>Returns a string list of all the tags associated to a symbol</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchResult.GetSymbol">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters">
            <summary>A structure representing parameters for a geocoding suggestion operation.</summary>
            <remarks>
              Geocoding suggestions provide character-by-character auto-completion for facilitating interactive search experiences.
              You need to pass this handle to all suggest parameters functions. It represents an instance of a suggest parameters.
              This is an opaque handle. It must be destroyed by calling RT_SuggestParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSuggestParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSuggestParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.#ctor">
            <summary>Creates a new suggest parameters handle.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_SuggestParameters_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.Categories">
            <summary>Gets categories.</summary>
            <remarks>
              Determines addresses from which categories should be returned. If an error occurs the error handler RT_ErrorHandler will
              be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.CountryCode">
            <summary>Gets country code.</summary>
            <remarks>
              Determines addresses from which the country should be returned. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.MaxResults">
            <summary>Gets max results.</summary>
            <remarks>
              Determines the maximum number of returned suggestions. Supported value from interval [1..15], 5 by default. If an error
              occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.PreferredSearchLocation">
            <summary>Gets preferred search location.</summary>
            <remarks>
              Point specifiying the preffered location where candidates will be searched. If an error occurs the error handler
              RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestParameters.SearchArea">
            <summary>Gets search area.</summary>
            <remarks>
              Geometry specifiying the area where candidates will be searched. If an error occurs the error handler RT_ErrorHandler
              will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult">
            <summary>A class representing the result of a geocoding suggestion operation.</summary>
            <remarks>
              A suggestion result can be forwarded to geocoding find operation. You need to pass this handle to all suggest result
              functions. It represents an instance of a suggest result. This is an opaque handle. It must be destroyed by calling
              RT_SuggestResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSuggestResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSuggestResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSuggestResult.Label">
            <summary>Gets label.</summary>
            <remarks>
              Returns a label that contains suggested address. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSurface">
            <summary>The surface contains elevation sources and defines a surface upon which layers and overlays can be draped.</summary>
            <remarks>
              You need to pass this handle to all surface functions. It represents an instance of a surface. You cannot directly
              access surface properties. You can get this handle from RT_Surface_create and the handle must be destroyed from
              RT_Surface_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSurface class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSurface instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.#ctor">
            <summary>Creates a Surface object.</summary>
            <remarks>
              Provides a surface on which layers may be draped or from which relative layers maybe offset. The most common use of the
              Surface is to represent the ground in a scene. It is comprised of a collection of elevation sources
              RT_ElevationSourceHandle which are combined in the to generate the surface. If the data from the elevation sources is
              spatially coincident it will use the elevation source order to determine which source to use. This object must be
              destroyed by calling function RT_Surface_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Surface_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.ElevationExaggeration">
            <summary>Get the exaggeration for the surface.</summary>
            <remarks>
              Get the exaggeration for the surface. The exaggeration value is a multiplying factor applied to the altitude value of
              the surface. The default value is 1.0 indicating no exaggeration.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.ElevationSources">
            <summary>Retrieve the elevation sources for the surface.</summary>
            <remarks>
              The elevation sources are an ordered collection of elevation source data that are combined to generate a single surface.
              The order of the elevation sources in the collection indicate which elevation has priority when the sources are
              spatially coincident. Retrieve the elevation sources for the surface. The collection is specific to this surface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.IsEnabled">
            <summary>Gets the "is enabled" state for the surface.</summary>
            <remarks>
              The "is enabled" state indicates if the Surface should rendered. If the surface is enabled is false the none of the
              elevation sources RT_ElevationSourceHandle it contains are used for rendering. If it is true then the elevation sources
              own "is enabled" state is used to determine if it is used for rendering.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.LoadError">
            <summary>Returns the error for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.LoadStatus">
            <summary>Retrieve the load status for the surface.</summary>
            <remarks>
              Retrieve the load status for the surface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSurface.Name">
            <summary>Get the name for the surface.</summary>
            <remarks>
              Get the name for the surface.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>*Internal Use* Sets the function that will be called if additional data is required.</summary>
            <remarks>
              Set the function that will be called if additional loading is required. Setting the function to NULL after it has
              already been set will stop the function from being called. By default the callback will not occur.
            </remarks>
            <param name="requestRequired">The load required function.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.CancelLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.Load">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSurface.RetryLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSurfacePlacement">
            <summary>The options for handling altitude values.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSurfacePlacement.Draped">
            <summary>Drape the data on the surface.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSurfacePlacement.Absolute">
            <summary>Treat the Z values as absolute altitude values.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSurfacePlacement.Relative">
            <summary>Treat the Z values as relative to the surface altitude values.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSymbol">
            <summary>A base class to represent symbols.</summary>
            <remarks>
              Symbols describe how graphics look on the map. Different symbols are used for graphics with different geometry types.
              Marker symbols are used for point and multipoint graphics, Fill symbols are used for polygon graphics, and Line symbols
              are used for polyline graphics. The handle must be destroyed from RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.PrivateCreateFromHandleInternal_CoreSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSymbol instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.InstanceId">
            <summary>*Internal Use* Get the instance id of the Symbol referenced by the specified RT_SymbolHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.ObjectType">
            <summary>Get the type of the symbol.</summary>
            <remarks>
              Get the type of the symbol object.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.CreateSwatchAsync(RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Single)">
            <summary>Creates a swatch of the symbol.</summary>
            <remarks>
              Non-overloaded method: CreateSwatchAsync
            </remarks>
            <param name="backgroundColor">The background color of the swatch. Can be NULL, in which case a transparent background is used.</param>
            <param name="dipsToPixelsFactor">The factor for converting dips to pixels.
              NOTE: This parameter should not be exposed publicly.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.CreateSwatchAsync(System.Int32,System.Int32,System.Single,RuntimeCoreNet.GeneratedWrappers.CoreColor,RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Creates a swatch of the symbol.</summary>
            <remarks>
              Non-overloaded method: CreateSwatchWithGeometryAsync
            </remarks>
            <param name="backgroundColor">The background color of the swatch. Can be NULL, in which case a transparent background is used.</param>
            <param name="geometry">The geometry of the symbol to be drawn in the swatch image. The specified geometry is in pixels, with the point {0,0} located at the centerpoint of the swatch image. The X-axis increases towards the right-hand side of the swatch image. The Y-axis increases towards the top of the swatch image. For example: when creating a swatch for a RT_MarkerSymbolHandle, specifying a geometry of {10,10} will draw the marker 10 pixels up and to the right of the center of the swatch. The geometry type (RT_PointHandle, RT_PolylineHandle, RT_PolygonHandle) should correspond to the symbol type (RT_MarkerSymbolHandle, RT_LineSymbolHandle, RT_FillSymbolHandle). The geometry's spatial reference is ignored.</param>
            <param name="height">The height of the swatch in pixels.</param>
            <param name="imagePpi">The ppi of the swatch. This value is used to scale symbology when rendering the swatch. The value should be set appropriately in order to render swatches at the correct scale for a given display. Note: Picture Marker Symbols without a set Width or Height are not scaled by image_ppi, as unset Width and Height are taken to mean "render at native pixel scale".</param>
            <param name="width">The width of the swatch in pixels.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.FromJSON(System.String)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.GetHash">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbol.ToJSON">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSymbolAngleAlignment">
            <summary>The list of possible symbol angle alignment types.</summary>
            <remarks>
              Marker symbol alignment when map is rotated.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolAngleAlignment.Map">
            <summary>Marker top edge always aligned with map north.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolAngleAlignment.Screen">
            <summary>Marker top edge always aligned with screen top edge.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolAngleAlignment.Unknown">
            <summary>Unknown angle alignment.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary">
            <summary>A symbol dictionary object.</summary>
            <remarks>
              A SymbolDictionary can be used in conjunction with a DictionaryRenderer applied to a FeatureLayer or GraphicsOverlay.
              
              
              When used by itself, the SymbolDictionary supports two key workflows. The first is to find a symbol with provided attributes values. This is done by creating a map of field names and attribute values (as determined by the associated specification), and passing those into findSymbol, which returns a new CIMSymbol. In this case, the key is the name of the specification field (e.g. "symbolset" in the case of mil2525d), and the value is value you want associated with that field (e.g "Atmospheric"). You might use this symbol to create a new Graphic.
              
              
              You can also use a standalone SymbolDictionary to search for symbol primitives. Symbol primitives are the individual symbols that make up more complex and advanced multilayer military symbols. This is achieved using searchSymbols. You could create a symbol picker app that searches for all symbols that have the tag "maritime" in it. The search results contain CIM symbols which you could then either use as they are or extract from them different individual symbols to create a new composite symbol.You need to pass this handle to all symbol dictionary functions. This object talks to rule engines to generate symbols
              and search symbols specific to the standard. It must be destroyed by calling RT_SymbolDictionary_destroy.  A
              SymbolDictionary is made up of a *.stylx file (a sqlite database from ArcGIS Pro), which contains the symbol primitives
              for a given symbology specification (such as mil2525d), as well as a rule engine that parses input fields. The
              SymbolDictionary assembles new symbols from the input attributes, and can also apply geometry manipulations to the
              symbols in the case of multipoint geometries.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSymbolDictionary class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSymbolDictionary instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.#ctor(System.String)">
            <summary>Creates a new Symbol dictionay object.</summary>
            <remarks>
              Use this method to create an object. An example of specificationType is "mil2525d". Use the getSpecificationTypes
              function to get a string list of all the supported specifications. Since a SymbolDictionary requires a *.stylx file and
              no dictionary path is set, it is assumed that the *.stylx file is in the default location. For example, mil2525d stylx
              file's default path is sdk_install_path/resources/symbols/mil2525d.stylx, where sdk_install_path is the path returned
              from the ArcGIS Runtime environment install directory. This object must be destroyed by calling function
              RT_SymbolDictionary_destroy. If an error occurs the error handler RT_ErrorHandler will be called. This object talks to
              rule engines to generate symbols and search symbols specific to the standard.
              Warning: You must call RT_SymbolDictionary_destroy on the return value.
            </remarks>
            <param name="specificationType">name of the dictionary(stylx) to be created.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.#ctor(System.String,System.String)">
            <summary>Creates a new Symbol dictionay object.</summary>
            <remarks>
              Use this method to create an object. An example of specificationType is "mil2525d". Use getSpecificationTypes function
              to get a string list of all the supported specifications. This object must be destroyed by calling function
              RT_SymbolDictionary_destroy. If an error occurs the error handler RT_ErrorHandler will be called. This object talks to
              rule engines to generate symbols and search symbols specific to the standard.
              Warning: You must call RT_SymbolDictionary_destroy on the return value.
            </remarks>
            <param name="dictionaryPath">physical location of the .stylx file. Need to provide the full path(e.g. ../../../mil2525c/mil2525c.stylx)</param>
            <param name="specificationType">name of the dictionary(stylx) to be created.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.ConfigurationProperties">
            <summary>
              Returns the map of configuration attributes and it's current value. It is specific to a rule engine and its standard
              implementation associated to the symbol dictionary.
            </summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.DictionaryPath">
            <summary>Returns the location of the dictionary (.stylx file)</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.LoadError">
            <summary>Returns the error code for the load is there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SpecificationType">
            <summary>Returns the name of the dictionary (.stylx file), such as "mil2525d"</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SymbologyFieldNames">
            <summary>
              Returns the string list of symbology attributes required to obtain a symbol from a rule engine associated to a symbol
              dictionary.
            </summary>
            <remarks>
              For example, mil2525d would include "identity", "symbolset", "symbolentity", and "modifier1", among many others.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.TextFieldNames">
            <summary>
              Rreturns the string list of text attributes required to obtain text and placement for symbol from a rule engine
              associated to a symbol dictionary.
            </summary>
            <remarks>
              For example, mil2525d would include "combateffectiveness", "credibility", "reliability", and "staffcomment", among many
              others.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.CancelLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.FindSymbolAsync(RuntimeCoreNet.GeneratedWrappers.CoreDictionary)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.GetAllStyleSymbolSearchParametersAsync">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.GetSpecificationTypes">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.Load">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.RetryLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSymbolDictionary.SearchSymbolsAsync(RuntimeCoreNet.GeneratedWrappers.CoreStyleSymbolSearchParameters)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType">
            <summary>The list of possible symbol types.</summary>
            <remarks>
              This is used to determine the symbol type.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.SimpleFillSymbol">
            <summary>Simple fill symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.SimpleLineSymbol">
            <summary>Simple line symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.SimpleMarkerSymbol">
            <summary>Simple marker symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.PictureMarkerSymbol">
            <summary>Picture marker symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.TextSymbol">
            <summary>Text symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.CIMPointSymbol">
            <summary>CIM point symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.CIMLineSymbol">
            <summary>CIM line symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.CIMPolygonSymbol">
            <summary>CIM polygon symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.CIMTextSymbol">
            <summary>CIM text symbol.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.SimpleMarkerSceneSymbol">
            <summary>Simple marker scene symbol</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.ModelMarkerSymbol">
            <summary>Model marker symbol</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.DistanceCompositeSceneSymbol">
            <summary>Distance composite symbol</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSymbolType.Unknown">
            <summary>Unknown symbol type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities">
            <summary>A handle that identifies the various synchronization capabilities of an ArcGIS Feature Service.</summary>
            <remarks>
              You need to pass this handle to all sync capabilities functions. You will get this handle from various functions and the
              handle must be destroyed from RT_SyncCapabilities_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncCapabilities class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncCapabilities instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsAsync">
            <summary>Returns true if asynchronous operations are supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsRegisteringExistingData">
            <summary>Returns true if registering existing data is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsRollbackOnFailure">
            <summary>Gets if rollback on failure is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsSyncDirectionControl">
            <summary>Gets if synchronization direction control is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsSyncModelGeodatabase">
            <summary>Gets if per replica synchronization is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsSyncModelLayer">
            <summary>Gets if per layer synchronization is supported.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncCapabilities.SupportsSyncModelNone">
            <summary>Gets if a sync model is supported.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection">
            <summary>The direction to synchronize as part of geodatabase sync task.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection.None">
            <summary>There is no specified sync direction</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection.Download">
            <summary>The geodatabase changes are downloaded only.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection.Upload">
            <summary>The geodatabase changes are uploaded only.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection.Bidirectional">
            <summary>The geodatabase changes are both uploaded and downloaded.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseJob">
            <summary>A RT_JobHandle that synchronizes changes to a local geodatabase back to a feature service.</summary>
            <remarks>
              The handle must be destroyed with RT_Job_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseJob.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseJob.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncGeodatabaseJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncGeodatabaseJob instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseJob.PrivateCreateFromHandleInternal_CoreSyncGeodatabaseJob(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncGeodatabaseJob class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncGeodatabaseJob instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseJob.Result">
            <summary>
              For a successfully completed job the result returns an array of RT_SyncLayerResultHandle instances if there were any
              sync errors reported by the server.
            </summary>
            <remarks>
              If the job is in progress then a NULL result is returned.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters">
            <summary>A handle that represents parameters to sync geodatabase task.</summary>
            <remarks>
              You need to pass this handle to all sync geodatabase parameters functions. You will get this handle from various
              functions and the handle must be destroyed from RT_SyncGeodatabaseParameters_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncGeodatabaseParameters class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncGeodatabaseParameters instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.#ctor">
            <summary>Create a parameters object for use with the sync method on the geodatabase sync task.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function
              RT_SyncGeodatabaseParameters_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_SyncGeodatabaseParameters_destroy on the return value.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.GeodatabaseSyncDirection">
            <summary>The synchronization direction that will be used when synchronizing the geodatabase.</summary>
            <remarks>
              This is only used if the Geodatabase has a sync model of RT_SyncModel_geodatabase, it is ignored for RT_SyncModel_layer
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.LayerOptions">
            <summary>The list of sync layer options to include in the sync operation</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncGeodatabaseParameters.RollbackOnFailure">
            <summary>Indicates if a sync should roll back on a failure.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption">
            <summary>The can be used in conjunction with RT_SyncGeodatabaseParametersHandle to specify per layer synchronization options.</summary>
            <remarks>
              You need to pass this handle to all layer sync info methods. You can get this handle from various functions and the
              handle must be destroyed from RT_SyncLayerOption_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncLayerOption class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncLayerOption instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.#ctor">
            <summary>Creates a new sync layer option.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_SyncLayerOption_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_SyncLayerOption_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.#ctor(System.Int64)">
            <summary>Creates a new sync layer option with a layer id.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_SyncLayerOption_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_SyncLayerOption_destroy on the return value.
            </remarks>
            <param name="layerId">A layer id to sync.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.#ctor(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreSyncDirection)">
            <summary>Creates a new sync layer option with layer id and sync direction.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_SyncLayerOption_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_SyncLayerOption_destroy on the return value.
            </remarks>
            <param name="layerId">A layer id to sync.</param>
            <param name="syncDirection">the direction to sync the layer.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.LayerId">
            <summary>The layer or table Id to specify sync direction</summary>
            <remarks>
              The Ids used here must match Ids used in the synchronized geodatabase. If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.SyncDirection">
            <summary>The sync direction for the specified layer Id</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerOption.Clone">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult">
            <summary>A handle that represents the result of sync operation on a table or layer.</summary>
            <remarks>
              The handle must be destroyed with RT_SyncLayerResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreSyncLayerResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreSyncLayerResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.EditResults">
            <summary>Returns an array of any errors from sync feature edit results representing the result of a sync</summary>
            <remarks>
              If there's an error the return value is NULL.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.LayerId">
            <summary>The layer or table Id</summary>
            <remarks>
              If there's an error the return value is -1.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreSyncLayerResult.TableName">
            <summary>The table name for the sync result</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreSyncModel">
            <summary>The various types of sync models.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncModel.None">
            <summary>The geodatabase is not sync enabled.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncModel.Geodatabase">
            <summary>The whole Geodatabase must be synchronized together.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreSyncModel.Layer">
            <summary>Layers and tables within the geodatabase can be synchronized independently.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTask">
            <summary>The Task object.</summary>
            <remarks>
              A task object represents work that can be completed asynchronously, and concurrently with other tasks. It produces a
              result of type RT_ElementHandle on successful completion. Tasks which return void will produce a result that returns a
              boolean. A task can be waited upon and canceled independently of other tasks. Completion notification is available
              through the callback RT_Task_completed_fn. You need to pass this handle to all Task functions. You will get this handle
              from various functions and the handle must be destroyed from RT_Task_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTask class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTask instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTask.InstanceId">
            <summary>*Internal Use* Get the instance id of the object referenced by the specified handle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.SetTaskCompletedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Task_Completed)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.Cancel">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.Get">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.GetError">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.IsCanceled">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.IsDone">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTask.Wait">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTaskStatus">
            <summary>The different terminal states for task.</summary>
            <remarks>
              Each of the different terminal states for task.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTaskStatus.Completed">
            <summary>The task has completed.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTaskStatus.Canceled">
            <summary>The task was canceled.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTaskStatus.NotComplete">
            <summary>The task has not completed and is not canceled.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTaskStatus.Unknown">
            <summary>The task status is unknown. Used for error conditions.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTextAntialiasingMode">
            <summary>An enumeration of the different text antialiasing modes.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTextAntialiasingMode.Unknown">
            <summary>An unknown antialiasing mode.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTextAntialiasingMode.None">
            <summary>No text antialiasing is performed.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTextAntialiasingMode.Normal">
            <summary>Text antialiasing is performed as determined by the font.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTextAntialiasingMode.Force">
            <summary>Text is always drawn with antialiasing regardless of individual font parameters.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification">
            <summary>*Internal Use* A class defines notification to play guidance text.</summary>
            <remarks>
              A class contains text of text guidance instruction which can be played by voice guidance engine. You need to pass this
              handle to all text guidance notification methods. It must be destroyed by calling RT_TextGuidanceNotification_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTextGuidanceNotification class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTextGuidanceNotification instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.TextGuidance">
            <summary>*Internal Use* Gets text guidance.</summary>
            <remarks>
              Return string presentation of text guidance instruction.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextGuidanceNotification.Type">
            <summary>*Internal Use* Gets text guidance notification type.</summary>
            <remarks>
              Returns a type of text guidance notification.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol">
            <summary>Used to display text at points on a layer.</summary>
            <remarks>
              Text symbols are used to display text for graphics. The graphics can be based on any type of geometry - point,
              multipoint, polyline, or polygon. It must be destroyed by calling RT_Symbol_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTextSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTextSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.PrivateCreateFromHandleInternal_CoreTextSymbol(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTextSymbol class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTextSymbol instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.#ctor">
            <summary>Creates a text symbol object.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.#ctor(System.String,RuntimeCoreNet.GeneratedWrappers.CoreColor,System.Single,RuntimeCoreNet.GeneratedWrappers.CoreHorizontalAlignment,RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment)">
            <summary>Creates a text symbol object with some initial values.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Symbol_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Symbol_destroy on the return value.
            </remarks>
            <param name="color">The color of the text symbol.</param>
            <param name="hAlign">The horizontal alignment of the text.</param>
            <param name="size">The size of the text symbol.</param>
            <param name="text">The text to be displayed for a the associated graphic.</param>
            <param name="vAlign">The vertical alignment of the text.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.Color">
            <summary>Get the color for the text symbol.</summary>
            <remarks>
              Get the color for the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.FontDecoration">
            <summary>Get the type of font decoration for the text symbol.</summary>
            <remarks>
              Get the type of font decoration for the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.FontFamily">
            <summary>Get the font family of the text symbol.</summary>
            <remarks>
              Get the font family of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.FontStyle">
            <summary>Get the font style of the text symbol.</summary>
            <remarks>
              Get the font style of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.FontWeight">
            <summary>Get the font weight of the text symbol.</summary>
            <remarks>
              Get the font weight of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.HorizontalAlignment">
            <summary>Get the horizontal alignment of the text symbol.</summary>
            <remarks>
              Get the horizontal alignment of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.Size">
            <summary>Get the font size of the text symbol.</summary>
            <remarks>
              Get the font size of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.Text">
            <summary>Get the text of the text symbol.</summary>
            <remarks>
              Get the text of the text symbol.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.VerticalAlignment">
            <summary>Get the vertical alignment of the text symbol.</summary>
            <remarks>
              Get the vertical alignment of the text symbol.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreTextSymbol)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTileCache">
            <summary>Metadata for a local cache of pre-rendered map tiles that can be used to create a layer.</summary>
            <remarks>
              Local tile caches are ideal for providing basemaps or less frequently changing contextual layers, where network access
              is limited or non-existent. They can be created and downloaded onto a device by using an RT_ExportTileCacheJobHandle, or
              alternatively can be provisioned directly to local storage. The supported types of cache are: Tile package (.tpk) - a
              map and the tile cache of the data contained within it, packaged into one convenient, portable file, ideal for offline
              sharing or complete map documents in a disconnected environment or via a portal. Compact Cache - a directory structure
              where groups of tiles are combined into larger .bundle files, preserving performance and reducing copy times and the
              size on disk of the cache. Exploded Cache - a directory structure where map tiles are stored as individual files. A
              TileCache is often used as a basemap, but can also be used to create an RT_ArcGISTiledLayerHandle that is added to a map
              as an operational layer.
              Date: 05/25/2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTileCache class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTileCache instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.#ctor(System.String)">
            <summary>Create a tile cache from the specified tile cache path.</summary>
            <remarks>
              Creates a tile cache from the given local path to a tile package (.tpk file), or directory containing a compact or
              exploded cache.
              Date: 05/25/2016
              Error Types: RT_ErrorType_commonInvalidArgument The path is invalid
              Warning: You must call RT_TileCache_destroy on the return value.
            </remarks>
            <param name="path">The path to the tile cache.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.InstanceId">
            <summary>*Internal Use* Get the instance id of the TileCache referenced by the specified RT_TileCacheHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.LoadError">
            <summary>Returns the error code for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.LoadStatus">
            <summary>Returns the current load status of the tile cache.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.Path">
            <summary>Returns the path of the tile cache.</summary>
            <remarks>
              For caches based on tile packages (.tpk files) this is the full path of the .tpk file; for caches based on compact or
              exploded caches this is the path of the directory containing the cache.
              Date: 05/25/2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.TileInfo">
            <summary>Returns information about the the tiling scheme used by this tile cache.</summary>
            <remarks>
              For example, the tiling scheme indicates the origin of the cached tiles, the levels of detail available, and the size of
              each tile.
              Date: 05/25/2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.CancelLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.Clone">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.GetHash">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreTileCache)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.Load">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileCache.RetryLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo">
            <summary>Represents the tiling scheme used by a cached map service.</summary>
            <remarks>
              For example, ArcGIS Server cached map service, Bing Maps, etc. The tiling scheme contains information about how a map is
              broken up into tiles of images and how a client can use these tiles to display a map.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTileInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTileInfo instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreSpatialReference,RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Int32,System.Int32,System.Int32,RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreEnvelope)">
            <summary>Create tile information.</summary>
            <remarks>
              Use this object to create a tile info object. This object must be destroyed by calling function RT_TileInfo_destroy. If
              an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_TileInfo_destroy on the return value.
            </remarks>
            <param name="dPI">The DPI of each tile.</param>
            <param name="fullExtent">The full extent of the tiles..</param>
            <param name="levelsOfDetail">A RT_VectorHandle of RT_ElementType_levelOfDetail. Contents of the vector are copied.</param>
            <param name="origin">The origin of the tiles.</param>
            <param name="spatialReference">The spatial reference of the tiles.</param>
            <param name="tileHeight">Height of a tile, in pixels.</param>
            <param name="tileWidth">Width of a tile, in pixels.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.DPI">
            <summary>Returns the DPI (dots per inch) of the tiles.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.FullExtent">
            <summary>Returns the full extent of the tiles.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.LevelsOfDetail">
            <summary>Returns a list of LevelOfDetail instances. Each one has properties for its particular resolution and scale.</summary>
            <remarks>
              A RT_ArrayHandle with RT_LevelOfDetailHandle
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.Origin">
            <summary>Returns the origin of the tile info within the spatial reference.</summary>
            <remarks>
              The origin is the upper left corner of the tiling scheme grid.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.SpatialReference">
            <summary>Returns the spatial reference for the tile info.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.TileHeight">
            <summary>Returns the height of each tile in pixels.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileInfo.TileWidth">
            <summary>Returns the width of each tile in pixels.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTileKey">
            <summary>A handle that represents a tile key identified by a level, a column and a row.</summary>
            <remarks>
              You need to pass this handle to all tile key functions. The handle must be destroyed from RT_TileKey_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTileKey class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTileKey instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Create a tile key from the specified level, column and row</summary>
            <remarks>
              Create a tile key from the specified level, column and row. This object must be destroyed by calling function
              RT_TileKey_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_TileKey_destroy on the return value.
            </remarks>
            <param name="column">The column of the tile key.</param>
            <param name="level">The level of the tile key.</param>
            <param name="row">The row of the tile key.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.Column">
            <summary>Returns the column of the tile key.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.Level">
            <summary>Returns the level of the tile key.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.Row">
            <summary>Returns the row of the tile key.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.GetHash">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileKey.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreTileKey)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest">
            <summary>Represents a request for a tile.</summary>
            <remarks>
              Information needs to be retrieved. You need to pass this handle to all request functions. It must be destroyed by
              calling RT_Request_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTileRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTileRequest instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.PrivateCreateFromHandleInternal_CoreTileRequest(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTileRequest class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTileRequest instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.IsNoDataTile">
            <summary>*Internal Use* Returns a flag indicating if the requested tile should return a no data tile.</summary>
            <remarks>
              APIs should get the etag of the server response, store this etag as 'NoDataTile' etag and call
              RT_TileRequest_handleResponseNoDataTile. Then for each further tile request returning a tile with this etag,
              RT_TileRequest_handleResponseNoDataTile should be called instead of RT_Request_handleResponse.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.TileKey">
            <summary>The key of the requested tile (includes level, column and row).</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTileRequest.HandleResponseNoDataTile">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay">
            <summary>How time is displayed.</summary>
            <remarks>
              You need to pass this handle to all map time display functions. It represents an instance of a time display. You cannot
              directly access time display properties. You can get this handle from RT_TimeDisplay_create and the handle must be
              destroyed from RT_TimeDisplay_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTimeDisplay class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTimeDisplay instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeDisplay.#ctor">
            <summary>Creates a time display object.</summary>
            <remarks>
              Use this method to create a time display object. This object must be destroyed by calling function
              RT_TimeDisplay_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_TimeDisplay_destroy on the return value.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent">
            <summary>How time is displayed.</summary>
            <remarks>
              Represents a span of time between a start time and end time.To create a time extent which represents an instant in time set the start time and end time to the same time value. The
              RT_TimeExtentHandle is returned in the meta-data for time-aware services and layers. It is often used to create a time
              slider ranging from a start time to an end time.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTimeExtent class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTimeExtent instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.#ctor">
            <summary>Creates a time extent with default start and end times.</summary>
            <remarks>
              The default in milliseconds is start time of Long.MIN_VALUE and end time of long.MAX_VALUE.
              Date: May 26th 2016
              Warning: You must call RT_TimeExtent_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.#ctor(System.Int64,System.Int64)">
            <summary>Creates a time extent with the given start and end times.</summary>
            <remarks>
              Date: May 26th 2016
              Warning: You must call RT_TimeExtent_destroy on the return value.
            </remarks>
            <param name="endTime">The end time.</param>
            <param name="startTime">The start time.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.EndTime">
            <summary>Gets the end time of this time extent.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.IsInfinite">
            <summary>Indicates if the time extent is infinite.</summary>
            <remarks>
              An infinite time extent has start time of Long.MIN_VALUE and end time of Long.MAX_VALUE (in milliseconds).
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.StartTime">
            <summary>Gets the start time of this time extent.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.UnlimitedEndTime">
            <summary>Indicates if the end time is unlimited. An unlimited end time extent has an end time of Long.MAX_VALUE milliseconds.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.UnlimitedStartTime">
            <summary>
              Indicates if the start time is unlimited. An unlimited start time extent has a start time of Long.MIN_VALUE
              milliseconds.
            </summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.Contains(System.Int64)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent.Intersects(RuntimeCoreNet.GeneratedWrappers.CoreTimeExtent)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions">
            <summary>A handle that defines various time options.</summary>
            <remarks>
              You need to pass this handle to all time options functions. You will get this handle from various functions and the
              handle must be destroyed from RT_TimeOptions_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTimeOptions class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTimeOptions instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.IsTimeDataCumulative">
            <summary>Gets if the time data is cumulative.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.TimeOffset">
            <summary>Gets the time offset value.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.TimeOffsetUnit">
            <summary>Gets the units of the time offset.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeOptions.UseTime">
            <summary>Gets if time should be used.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference">
            <summary>Represents information about the reference units for time values. See RT_LayerTimeInfo_getTimeReference.</summary>
            <remarks>
              Includes information about the time zone and if the time respects daylight savings which allows ArcGIS to integrate
              datasets that were recorded in different time zones.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTimeReference class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTimeReference instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.RespectsDaylightSavings">
            <summary>Indicates whether the referenced time respects Daylight Savings Time.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTimeReference.TimeZone">
            <summary>Gets the time zone information associated with the time reference.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeRelation">
            <summary>Indicates how the start and end time of the time slider extent are processed.</summary>
            <remarks>
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeRelation.Unknown">
            <summary>Unknown time relation.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeRelation.Overlaps">
            <summary>When start and end time of the time slider are included.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeRelation.AfterStartOverlapsEnd">
            <summary>When start time is included and end time is excluded.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeRelation.OverlapsStartWithinEnd">
            <summary>When start time is excluded and end time is included.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit">
            <summary>The units of time used in a service, layer or sublayer which support time based operations.</summary>
            <remarks>
              This is used to determine what the unit of time measurement is.
              Date: May 26th 2016
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Unknown">
            <summary>Unknown unit of time.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Centuries">
            <summary>Centuries</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Days">
            <summary>Days</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Decades">
            <summary>Decades</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Hours">
            <summary>Hours</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Milliseconds">
            <summary>Milliseconds</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Minutes">
            <summary>Minutes</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Months">
            <summary>Months</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Seconds">
            <summary>Seconds</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Weeks">
            <summary>Weeks</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTimeUnit.Years">
            <summary>Years</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult">
            <summary>*Internal Use* Defines route tracking current status data.</summary>
            <remarks>
              You need to pass this handle to all route tracking status changes methods. Contains info about route tracker status.
              This is an opaque handle. It must be destroyed by calling RT_TrackingResult_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTrackingResult class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTrackingResult instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.CurrentManeuver">
            <summary>*Internal Use* Gets current maneuver index.</summary>
            <remarks>
              The index of current maneuver. Invalid value is -1.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.CurrentRoutePart">
            <summary>*Internal Use* Gets current route part.</summary>
            <remarks>
              The invalid value for route part is -1.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.DestinationStatus">
            <summary>*Internal Use* Gets destination status.</summary>
            <remarks>
              For getting event about destination status changes subscribe to RT_RouteTrackerListener_onDestinationStatusChanged_fn.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.DistanceToDestination">
            <summary>*Internal Use* Gets distance to destination.</summary>
            <remarks>
              Miles or kilometers to destination. Unit depends on RT_RouteTracker_setResult() distance unit.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.DistanceToNextManeuver">
            <summary>*Internal Use* Gets distance to next maneuver.</summary>
            <remarks>
              Miles or kilometers to next maneuver. Unit depends on RT_RouteTracker_setResult() distance unit.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.IsRouteCalculating">
            <summary>*Internal Use* Gets is route calculating status.</summary>
            <remarks>
              For getting event about route calculating start subcribe to RT_RouteTrackerListener_onRerouteStarted_fn. Also failed
              status can be checked by RT_RouteTrackerListener_onRerouteFailed_fn callback.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.MinutesToDestination">
            <summary>*Internal Use* Gets minutes to destination.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.MinutesToNextManeuver">
            <summary>*Internal Use* Gets minutes to next maneuver.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.MyLocation">
            <summary>*Internal Use* Gets adjusted my location.</summary>
            <remarks>
              Returns adjusted(snapped to route) location and bearing. If current location is in RT_TrackingStatus_offRoute status,
              then only bearing will be adjusted and location will returned as is in gps location.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.PassedGeometry">
            <summary>*Internal Use* Gets passed route geometry.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.RemainingGeometry">
            <summary>*Internal Use* Gets remainig route geometry.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.RouteResult">
            <summary>*Internal Use* Gets route result.</summary>
            <remarks>
              For getting new route result from callback subcribe to RT_RouteTrackerListener_onRerouteFinished_fn.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.TextGuidanceNotification">
            <summary>*Internal Use* Gets text guidance notification.</summary>
            <remarks>
              For getting text guidance notification from event subcsribe to RT_RouteTrackerListener_onNewTextGuidance_fn callback.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTrackingResult.TrackingStatus">
            <summary>*Internal Use* Gets tracking status.</summary>
            <remarks>
              For getting event about tracking status changes subscribe to RT_RouteTrackerListener_onTrackingStatusChanged_fn.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTrackingStatus">
            <summary>*Internal Use* The list of route tracking my current location statuses.</summary>
            <remarks>
              This is used to determine status of my current location.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTrackingStatus.AtStart">
            <summary>At start my location status.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTrackingStatus.OnRoute">
            <summary>On route my location status.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreTrackingStatus.OffRoute">
            <summary>Off route my location status.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset">
            <summary>Transportation network dataset.</summary>
            <remarks>
              The handle must be destroyed with RT_TransportationNetworkDataset_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTransportationNetworkDataset class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTransportationNetworkDataset instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.Alias">
            <summary>Gets alias of transportation network dataset.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.Geodatabase">
            <summary>Gets geodatabase from transportation network dataset.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.Name">
            <summary>Gets name of transportation network dataset.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTransportationNetworkDataset.Type">
            <summary>Gets type of transportation network dataset.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode">
            <summary>A handle that represents a travel mode.</summary>
            <remarks>
              You need to pass this handle to all query parameter methods. You can get this handle from various functions and the
              handle must be destroyed from RT_TravelMode_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreTravelMode class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreTravelMode instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.#ctor">
            <summary>Creates a travel mode.</summary>
            <returns>A new travel mode object.
              
              Creates a travel mode object. This object must be destroyed by calling function RT_TravelMode_destroy. If an error occurs the error handler RT_ErrorHandler will be called.</returns>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.AttributeParameterValues">
            <summary>Gets attribute parameter values.</summary>
            <remarks>
              Gets the attribute parameter values e.g. Vehicle Weight, Vehicle Height, etc. Attribute parameter values are useful for
              customizing individual restrictions ("Don't travel on a roads weight limits below 6 tons").
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.Description">
            <summary>Gets travel mode's description.</summary>
            <remarks>
              Gets a description of the travel mode.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.DistanceAttributeName">
            <summary>Get distance attribute name.</summary>
            <remarks>
              Gets travel mode's distance attribute name.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.ImpedanceAttributeName">
            <summary>Gets impedance attribute name.</summary>
            <remarks>
              This is the attribute that the route will be optimized for e.g. "TravelTime" or "Distance". The object cannot be used
              after it has been destroyed. The memory is deleted. If an error occurs the error handler RT_ErrorHandler will be called.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.Name">
            <summary>Gets travel mode's name.</summary>
            <remarks>
              Gets the name of travel mode.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.OutputGeometryPrecision">
            <summary>Gets output geometry precision in meters.</summary>
            <remarks>
              Gets output geometry precision in meters. Precision is useful for reducing the response size while sacrificing route
              shape quality.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.RestrictionAttributeNames">
            <summary>Gets restriction attribute names.</summary>
            <remarks>
              Gets travel mode's restriction attribute name.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.TimeAttributeName">
            <summary>Gets time attribute name.</summary>
            <remarks>
              Gets travel mode's time attribute.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.Type">
            <summary>Gets travel mode's type.</summary>
            <remarks>
              Gets travel mode's type.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.UTurnPolicy">
            <summary>Gets uturn policy.</summary>
            <remarks>
              Returns the enumeration value for the u-turn policy e.g. no u-turns, u-turns at stops, etc.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreTravelMode.UseHierarchy">
            <summary>Gets use hierarchy.</summary>
            <remarks>
              Returns the solver hierarchy setting. A hierarchical solve tends to prefer higher-order streets such a freeways.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue">
            <summary>A unique value object.</summary>
            <remarks>
              You need to pass this handle to all unique value functions.  This is an opaque handle. It must be destroyed by calling
              RT_UniqueValue_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUniqueValue class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUniqueValue instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.#ctor">
            <summary>Creates a new class break object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_UniqueValue_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_UniqueValue_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.#ctor(System.String,System.String,RuntimeCoreNet.GeneratedWrappers.CoreSymbol,RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>Creates a new class break object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_UniqueValue_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_UniqueValue_destroy on the return value.
            </remarks>
            <param name="description">The description.</param>
            <param name="label">The label.</param>
            <param name="symbol">The symbol.</param>
            <param name="values">An RT_VectorHandle containing RT_ElementType_variant types.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.Description">
            <summary>Gets the unique value's description.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.InstanceId">
            <summary>*Internal Use* Get the instance id of the UniqueValue referenced by the specified RT_UniqueValueHandle</summary>
            <remarks>
              Error Types: RT_ErrorType_commonNullPtr
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.Label">
            <summary>Returns the unique value's label.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.Symbol">
            <summary>Gets the unique value's symbol.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.Values">
            <summary>Gets the unique value's value.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.Clone">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.FromJSON(System.String)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.GetHash">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValue.ToJSON">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer">
            <summary>A Unique Value Renderer object.</summary>
            <remarks>
              You need to pass this handle to all unique value renderer functions. This is an opaque handle. It must be destroyed by
              calling RT_Renderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUniqueValueRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUniqueValueRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.PrivateCreateFromHandleInternal_CoreUniqueValueRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUniqueValueRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUniqueValueRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.#ctor">
            <summary>Creates a new unique value renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreVector,RuntimeCoreNet.GeneratedWrappers.CoreVector,System.String,RuntimeCoreNet.GeneratedWrappers.CoreSymbol)">
            <summary>Creates a new unique value renderer object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_Renderer_destroy. If an error
              occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_Renderer_destroy on the return value.
            </remarks>
            <param name="defaultLabel">The default label.</param>
            <param name="defaultSymbol">The symbol.</param>
            <param name="fieldNames">An RT_VectorHandle containing RT_ElementType_string types.</param>
            <param name="uniqueValues">An RT_VectorHandle containing RT_ElementType_uniqueValue types.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.DefaultLabel">
            <summary>Gets the renderer's default label.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.DefaultSymbol">
            <summary>Gets the default symbol of this renderer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.FieldNames">
            <summary>Gets the field names of this renderer.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUniqueValueRenderer.UniqueValues">
            <summary>Returns a list of all the unique values in this renderer.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUnit">
            <summary>Defines a unit of measurement.</summary>
            <remarks>
              You need to pass this handle to all unit functions. This is an opaque handle. It must be destroyed by calling
              RT_Unit_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnit instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.PrivateCreateFromHandleInternal_CoreUnit(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnit class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnit instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.Abbreviation">
            <summary>Retrieve the abbreviation of the unit.</summary>
            <remarks>
              Retrieve the abbreviation for a specific unit. Will return nullptr if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.DisplayName">
            <summary>Retrieve the display name of the unit.</summary>
            <remarks>
              Retrieve the display name for a specific unit. Will return nullptr if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.Name">
            <summary>Retrieve the name of the unit.</summary>
            <remarks>
              Retrieve the name for a specific unit. Will return nullptr if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.PluralDisplayName">
            <summary>Retrieve the display name of the unit.</summary>
            <remarks>
              Retrieve the display name for a specific unit. Will return nullptr if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.UnitID">
            <summary>Retrieve the id of the unit.</summary>
            <remarks>
              Retrieve the id for a specific unit. Will return -1 if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUnit.UnitType">
            <summary>Retrieve the type of the unit.</summary>
            <remarks>
              Retrieve the unit type for a specific unit. Will return RT_UnitType_unknown if an error occurs.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnit.FromUnitId(System.Int32)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUnitType">
            <summary>The different types of unit.</summary>
            <remarks>
              Each of different supported unit types. Can get the type by calling RT_Unit_getObjectType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUnitType.LinearUnit">
            <summary>A linear unit of measure.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUnitType.AngularUnit">
            <summary>An angular unit of measure.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUnitType.AreaUnit">
            <summary>An area unit of measure.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUnitType.Unknown">
            <summary>An unknown unit type.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUnknownLayer">
            <summary>An instance of this class represents a layer whose type could not be determined.</summary>
            <remarks>
              The layer will not be persisted in the string returned by RT_Map_toJSON, and will not be drawn by the map view. It must
              be destroyed by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnknownLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnknownLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnknownLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnknownLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnknownLayer.PrivateCreateFromHandleInternal_CoreUnknownLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnknownLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnknownLayer instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedLayer">
            <summary>An instance of this class represents a layer type that is not currently supported.</summary>
            <remarks>
              The layer will be persisted in the string returned by RT_Map_toJSON, but will not be drawn by the map view. It must be
              destroyed by calling RT_Layer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedLayer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedLayer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnsupportedLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnsupportedLayer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedLayer.PrivateCreateFromHandleInternal_CoreUnsupportedLayer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnsupportedLayer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnsupportedLayer instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedRenderer">
            <summary>An instance of this class represents a renderer type that is not currently supported.</summary>
            <remarks>
              The renderer will be persisted in the string returned by RT_Renderer_toJSON, but cannot be used to draw a layer in the
              map view. It must be destroyed by calling RT_Renderer_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedRenderer.#ctor(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            If you have to create wrappers around IntPtrs (eg when using generated 
            wrappers from hand-written wrapper code), always use the PrivateCreateFromHandle factory method,
            to ensure that the correct derived class is instantiated.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedRenderer.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
             Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnsupportedRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnsupportedRenderer instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUnsupportedRenderer.PrivateCreateFromHandleInternal_CoreUnsupportedRenderer(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUnsupportedRenderer class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUnsupportedRenderer instance.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential">
            <summary>An object that holds credential information about the current user.</summary>
            <remarks>
              You need to pass this handle to all user credential functions. You will get this handle from various functions and the
              handle must be destroyed from RT_UserCredential_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreUserCredential class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreUserCredential instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new user credential object.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_UserCredential_destroy. If an
              error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_UserCredential_destroy on the return value.
            </remarks>
            <param name="domain">The domain.</param>
            <param name="password">The user's password.</param>
            <param name="userName">The user's name.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.Domain">
            <summary>Returns the domain of the credential</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.Password">
            <summary>Returns the password of the credential</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreUserCredential.UserName">
            <summary>Returns the user name of the credential</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreUTurnPolicy">
            <summary>Type of backtracking allowed when querying for adjacencies in a network view.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUTurnPolicy.NotAllowed">
            <summary>Not allow backtracking.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUTurnPolicy.AllowedAtDeadEnds">
            <summary>Allow backtracking at dead ends.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUTurnPolicy.AllowedAtIntersections">
            <summary>Allow backtracking at intersections.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreUTurnPolicy.AllowedAtDeadEndsAndIntersections">
            <summary>Allow backtracking ad dead ends and intersections.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreVector">
            <summary>Defines a dynamic array that provides callbacks when elements are added or removed.</summary>
            <remarks>
              The RT_ElementHandle object can be reused for multiple calls while adding/inserting/updating values within the collection. So you can instantiate one RT_ElementHandle and iteratively change it's value and call add/update/insert on the collection to modify the values of the collection.
              If the overhead of creating these RT_ElementHandle does become too much for a specific value type, then consider subclassing the collection type and provide "overloaded" methods that would accept that value type directly. This would eliminate the overhead of instantiating these RT_ElementHandle objects.You need to pass this handle to all vector functions. You will get this handle from various functions and the handle
              must be destroyed from RT_Vector_destroy. The vector holds RT_ElementHandle objects. Use RT_Vector_getValueType to
              determine what type of RT_ElementHandle objects are being stored in the vector. A RT_ElementHandle that has been
              retrieved from the vector can be converted to its underlying type by calling (for example) int32_t int_value =
              RT_Element_getValueAsInt32(element_handle, error_handler);  There are a couple of performance optimizations to consider
              with the generic collection type:
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreVector class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreVector instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreElementType)">
            <summary>*Internal Use* Creates a vector. This allocates memory that must be deleted.</summary>
            <remarks>
              This object must be destroyed by calling function RT_Vector_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Warning: You must call RT_Vector_destroy on the return value.
            </remarks>
            <param name="valueType">The type of the values this vector holds.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVector.Size">
            <summary>*Internal Use* Determines the number of values in the vector.</summary>
            <remarks>
              Retrieves the number of values in the vector. If an error occurs a 0 will be returned.
              Error Types: RT_ErrorType_unknown Unknown error
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVector.ValueType">
            <summary>*Internal Use* Returns the type of the values this vector holds.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.SetElementAddedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Vector_ElementAdded)">
            <summary>*Internal Use* Callback invoked when an element has been added to the vector.</summary>
            <param name="itemAdded">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.SetElementRemovedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Vector_ElementRemoved)">
            <summary>*Internal Use* Callback invoked when an element has been removed from the vector.</summary>
            <param name="itemRemoved">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Add(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Add a value to the vector.</summary>
            <remarks>
              Add a value to the vector.
            </remarks>
            <param name="value">The value that is to be added.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Add(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>*Internal Use* Appends a vector to a vector.</summary>
            <remarks>
              Appends a vector to a vector.
              Non-overloaded method: AddArray
            </remarks>
            <param name="vector2">A vector object that contains the values to append.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.At(System.Int64)">
            <summary>*Internal Use* Get a value at a specific position.</summary>
            <remarks>
              Retrieves the value at the specified position.
            </remarks>
            <param name="position">The position which you want to get the value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Contains(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Does the vector contain the given value.</summary>
            <remarks>
              Does the vector contain a specific value.
            </remarks>
            <param name="value">The value you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.First">
            <summary>*Internal Use* Get the first value in the vector.</summary>
            <remarks>
              Get the first value in the vector.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.IndexOf(RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Retrieves the position of the given value in the vector.</summary>
            <remarks>
              Retrieves the position of the given value in the vector.
            </remarks>
            <param name="value">The value you want to find.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Insert(System.Int64,RuntimeCoreNet.GeneratedWrappers.CoreElement)">
            <summary>*Internal Use* Insert a value at the specified position in the vector.</summary>
            <remarks>
              Insert a value at a specified position to the vector.
            </remarks>
            <param name="position">The position which you want to insert the value.</param>
            <param name="value">The value that is to be added.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.IsEmpty">
            <summary>*Internal Use* Determines if there are any values in the vector.</summary>
            <remarks>
              Check if the vector object has any values in it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreVector)">
            <summary>*Internal Use* Returns true if the two vectors are equal, false otherwise.</summary>
            <param name="vector2">The second vector.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Last">
            <summary>*Internal Use* Get the last value in the vector.</summary>
            <remarks>
              Get the last value in the vector.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Move(System.Int64,System.Int64)">
            <summary>*Internal Use* Move a value from the current position to a new position in the string vector.</summary>
            <remarks>
              Move a value from the current position to a new position in the vector.
            </remarks>
            <param name="newPosition">The position which you want to move the value to.</param>
            <param name="oldPosition">The current position of the value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Npos">
            <summary>*Internal Use* Returns a value indicating a bad position within the vector.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.Remove(System.Int64)">
            <summary>*Internal Use* Remove a value at a specific position in the vector.</summary>
            <remarks>
              Remove a value at a specific position in the vector.
            </remarks>
            <param name="position">The position which you want to remove the value.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVector.RemoveAll">
            <summary>*Internal Use* Remove all values from the vector.</summary>
            <remarks>
              Remove all values from the vector.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo">
            <summary>This object represents the source metadata for a vector tile layer.</summary>
            <remarks>
              You need to pass this handle to all vector tile source info functions. You can get this handle from various functions
              and the handle must be destroyed using RT_VectorTileSourceInfo_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreVectorTileSourceInfo class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreVectorTileSourceInfo instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.#ctor(System.String)">
            <summary>Creates a vector tile source info object which contains metadata about the vector tile source.</summary>
            <remarks>
              Use this object to create a vector tile source info from a URI. This object must be destroyed by calling function
              RT_VectorTileSourceInfo_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_unknown Unknown error
              Warning: You must call RT_VectorTileSourceInfo_destroy on the return value.
            </remarks>
            <param name="uRI">The URI that identifies the service or local data source.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.URI">
            <summary>Returns the vector tile source URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.DefaultStyle">
            <summary>Returns the default style object.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.DefaultStyleURI">
            <summary>Returns the current the default style URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.ExportTilesAllowed">
            <summary>Determines if this source supports exporting tiles.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.FullExtent">
            <summary>The full extent of the source data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.InitialExtent">
            <summary>The initial extent of the source data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.LoadError">
            <summary>Returns the error code for the load if there is one.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.LoadStatus">
            <summary>Returns the current load status.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.MaxScale">
            <summary>Returns the maximum scale.</summary>
            <remarks>
              Returns the maximum scale. Will return an undefined float if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.MinScale">
            <summary>Returns the minimum scale.</summary>
            <remarks>
              Returns the minimum scale. Will return an undefined float if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.Name">
            <summary>Returns the source name.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.Origin">
            <summary>The origin of the source data</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.SpatialReference">
            <summary>Gets the spatial reference of the source data.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.Version">
            <summary>Returns the source version.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.CancelLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.Load">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileSourceInfo.RetryLoad">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle">
            <summary>This object represents the style information for a vector tile layer.</summary>
            <remarks>
              You need to pass this handle to all vector tile style functions. You can get this handle from
              RT_VectorTileSourceInfo_getDefaultStyle and the handle must be destroyed using RT_VectorTileStyle_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreVectorTileStyle class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreVectorTileStyle instance.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.URI">
            <summary>Returns the vector tile source URI.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.Version">
            <summary>Returns the style version.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreVectorTileStyle.ToJSON">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment">
            <summary>The list of possible vertical alignments.</summary>
            <remarks>
              Specifies how a text symbol should be vertically aligned.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment.Baseline">
            <summary>Baseline alignment.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment.Bottom">
            <summary>The text is bottom aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment.Middle">
            <summary>The text is middle aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment.Top">
            <summary>The text is top aligned.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreVerticalAlignment.Unknown">
            <summary>Unknown vertical alignment.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties">
            <summary>A view label properties object.</summary>
            <remarks>
              This is used to change labels for a view. You need to pass this handle to all padding functions. This is an opaque
              handle. It must be destroyed by calling RT_ViewLabelProperties_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreViewLabelProperties class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreViewLabelProperties instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.#ctor">
            <summary>Create a view label property.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_ViewLabelProperties_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ViewLabelProperties_destroy on the return value.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.#ctor(System.Boolean,System.Boolean)">
            <summary>Create a view label property with specified parameters.</summary>
            <remarks>
              Use this method to create an object. This object must be destroyed by calling function RT_ViewLabelProperties_destroy.
              If an error occurs the error handler RT_ErrorHandler will be called.
              Warning: You must call RT_ViewLabelProperties_destroy on the return value.
            </remarks>
            <param name="animationEnabled">true to enable, false to disable the animation.</param>
            <param name="labelingEnabled">true to enable, false to disable the labeling.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.IsAnimationEnabled">
            <summary>Retrieve view label properties get animation enabled.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewLabelProperties.IsLabelingEnabled">
            <summary>Retrieve view label properties get labeling enabled.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint">
            <summary>A location on a view.</summary>
            <remarks>
              An immutable object used to set a location on a view. You must destroy this object using RT_Viewpoint_destroy.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(System.IntPtr)">
            <summary>Constructor to takes ownership of the handle, called from PrivateCreateFromHandle</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.PrivateDestroyHandle(System.IntPtr@)">
            <summary>Called by base class when native object is to be released</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.DisposeCallbacks">
            <summary>Releases any callbacks in this class or any derived classes. This is only called by Dispose, not the Finalizer</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.PrivateCreateFromHandle(System.IntPtr)">
            <summary>
            Do not call this method from hand-written code. (may be necessary in hand-written interop code).
            </summary>
            <remarks>
            Creates a CoreViewpoint class wrapping and owning the native handle.
            NB: Must not be passed a native handle that is taken from an existing CoreViewpoint instance.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double)">
            <summary>Create a viewpoint with center point and scale.</summary>
            <remarks>
              Create a Viewpoint with a center point and scale. The spatial reference will be the same as the center point. This
              object must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="center">The center point.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double)">
            <summary>Create a viewpoint with center point, scale and rotation.</summary>
            <remarks>
              Create a Viewpoint with a center point, scale and rotation. The spatial reference will be the same as the center point.
              This object must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="center">The center point.</param>
            <param name="rotation">The rotation angle in degrees between 0 and 360.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Create a viewpoint with center point, scale, rotation and Camera.</summary>
            <remarks>
              Create a Viewpoint with a center point, scale, rotation and Camera. The spatial reference will be the same as the center
              point. This object must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="camera">A Camera</param>
            <param name="center">The center point.</param>
            <param name="rotation">The rotation angle in degrees between 0 and 360.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry)">
            <summary>Create a viewpoint with a bounding extent.</summary>
            <remarks>
              Create a Viewpoint with a bounding extent. The spatial reference will be that same as the extent. This object must be
              destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The target envelope is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="targetExtent">The extent.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Create a viewpoint with a bounding extent and Camera.</summary>
            <remarks>
              Create a Viewpoint with a bounding extent and Camera. The spatial reference will be that same as the extent. This object
              must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler will be
              called.
              Error Types: RT_ErrorType_commonInvalidArgument The target envelope is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="camera">A Camera</param>
            <param name="targetExtent">The extent.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double)">
            <summary>Create a viewpoint with a bounding extent and rotation.</summary>
            <remarks>
              Create a Viewpoint with a bounding extent and rotation. The spatial reference will be that same as the extent. This
              object must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler
              will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The target envelope is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="rotation">The rotation angle in degrees between 0 and 360.</param>
            <param name="targetExtent">The extent.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CoreGeometry,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Create a viewpoint with a bounding extent, rotation and Camera.</summary>
            <remarks>
              Create a Viewpoint with a bounding extent, rotation and Camera. The spatial reference will be that same as the extent.
              This object must be destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler
              RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The target envelope is invalid.
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="camera">A Camera</param>
            <param name="rotation">The rotation angle in degrees between 0 and 360.</param>
            <param name="targetExtent">The extent.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>Create a viewpoint with latitude, longitude and scale.</summary>
            <remarks>
              Create a Viewpoint with a latitude, longitude and scale. The spatial reference will be WGS84. This object must be
              destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(System.Double,System.Double,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Create a viewpoint with latitude, longitude, scale and Camera</summary>
            <remarks>
              Create a Viewpoint with latitude, longitude, scale and camera. The spatial reference will be WGS84. This object must be
              destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="camera">A Camera</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.#ctor(RuntimeCoreNet.GeneratedWrappers.CorePoint,System.Double,RuntimeCoreNet.GeneratedWrappers.CoreCamera)">
            <summary>Create a viewpoint with center point, scale and Camera.</summary>
            <remarks>
              Create a Viewpoint with center point, scale and Camera. The spatial reference will be WGS84. This object must be
              destroyed by calling function RT_Viewpoint_destroy. If an error occurs the error handler RT_ErrorHandler will be called.
              Error Types: RT_ErrorType_commonInvalidArgument The scale is invalid RT_ErrorType_commonInvalidArgument The target point is invalid
              Warning: You must call RT_Viewpoint_destroy on the return value.
            </remarks>
            <param name="camera">A Camera</param>
            <param name="center">The center point.</param>
            <param name="scale">The ratio between a distance on the map and the corresponding distance on the ground.</param>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.Camera">
            <summary>Retrieve the viewpoint's Camera.</summary>
            <remarks>
              The camera for the viewpoint.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.ObjectType">
            <summary>Retrieve the viewpoint's type.</summary>
            <remarks>
              The type for the viewpoint.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.Rotation">
            <summary>Retrieve the viewpoint rotation.</summary>
            <remarks>
              The rotation angle in degrees between 0 and 360.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.TargetGeometry">
            <summary>Retrieve the viewpoint target geometry.</summary>
            <remarks>
              The target geometry will either be a point or an envelope based on the type.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.TargetScale">
            <summary>Retrieve the viewpoint's target scale.</summary>
            <remarks>
              The target scale for the viewpoint.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.FromJSON(System.String)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.GetHash">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.IsEqual(RuntimeCoreNet.GeneratedWrappers.CoreViewpoint)">
            <summary>no summary documentation found</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.CoreViewpoint.ToJSON">
            <summary>no summary documentation found</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreViewpointType">
            <summary>The different types of Viewpoints.</summary>
            <remarks>
              Each of different supported viewpoint types. Can get the type by calling RT_ViewpointType.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreViewpointType.CenterAndScale">
            <summary>A center point and scale.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreViewpointType.BoundingGeometry">
            <summary>A visible area.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreViewpointType.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreWrapAroundMode">
            <summary>Should wrap around be used or not.</summary>
            <remarks>
              Allows you to change the wrap around mode.
            </remarks>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreWrapAroundMode.EnabledWhenSupported">
            <summary>Enable wrap around is supported. Not all data supports wrap around.</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreWrapAroundMode.Disabled">
            <summary>Disable wrap around.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreGeodatabaseDataset">
            <summary>A interface for geodatabase dataset.</summary>
            <remarks>
              Describes common part of functionality for all geodatabase datasets. Supports types of geodabase datasets presents in
              RT_GeodatabaseDatasetType enum.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreGeodatabaseDataset.Geodatabase">
            <summary>Returns the geodatabase.</summary>
            <remarks>
              Returns instance of geodatabase. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreGeodatabaseDataset.Name">
            <summary>Returns the name of geodatabase dataset.</summary>
            <remarks>
              Returns the geodatabase dataset's name. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreGeodatabaseDataset.Type">
            <summary>Returns the type of geodatabase dataset.</summary>
            <remarks>
              Returns the type of geodatabase dataset. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreGeoElement">
            <summary>A marker interface implemented by objects that can be returned from an identify operation.</summary>
            <remarks>
              Objects returned by RT_GeoView_identifyGraphicsOverlay implement this interface. Objects returned by
              RT_IdentifyGraphicsOverlayResult_getGraphics implement this interface. Objects returned by
              RT_IdentifyLayerResult_getGeoElements implement this interface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreGeoElement.Attributes">
            <summary>Gets all attributes of the geoelement.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreGeoElement.Geometry">
            <summary>Gets the geometry of a geoelement.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreInstanceId">
            <summary>*Internal Use* An interface for retrieving the instance id of an object.</summary>
            <remarks>
              This interface will be used when there is a need to compare the ID values of two objects to see if they are the same
              underlying object. These methods return an ID value and not the interface RT_InstanceIdInterface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreInstanceId.InstanceId">
            <summary>*Internal Use* Retrieve InstanceId</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreJSONSerializable">
            <summary>A interface for reading and writing JSON.</summary>
            <remarks>
              This interface will be used when an Object needs to be read or written to JSON. These methods return a specific object
              and not the interface RT_JSONSerializableInterface. Objects implementing this interface have the ability to persist
              custom data to the JSON output. This custom data is stored as a RT_DictionaryHandle where the keys are strings that
              represent properties on the Object, and the values are strings that represent the JSON value for that corresponding
              property. Any custom data that causes malformed JSON when the Object is persisted will not be included in the JSON
              output. For example, if a key from the custom data matches a property on the Object and both were written out to JSON,
              it would result in malformed JSON. So in this example, the key in the custom data causing the malformed JSON would not
              be persisted.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreJSONSerializable.CustomData">
            <summary>Retrieve custom data.</summary>
            <remarks>
              Custom data is a dictionary of strings that will be persisted.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreJSONSerializable.ToJSON">
            <summary>Convert an object to JSON string.</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent">
            <summary>A interface for building a Table of Contents.</summary>
            <remarks>
              This interface is implemented by RT_LayerHandle, RT_ArcGISSublayerHandle and RT_KMLFeatureHandle
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.CanChangeVisibility">
            <summary>Returns a flag indicating whether the layer content's visibility can be changed.</summary>
            <remarks>
              Returns a flag indicating whether the layer content visibility can be changed. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.IsVisible">
            <summary>Returns the layer content's visibility.</summary>
            <remarks>
              Returns the layer content visibility. Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.Name">
            <summary>Returns the layer content's name.</summary>
            <remarks>
              Returns the layer content name. Will return NULL if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.ShowInLegend">
            <summary>Get whether the layer content participates in the legend.</summary>
            <remarks>
              Get whether the layer content is shown in the legend.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.SubLayerContents">
            <summary>Get the sub layer contents of a layer content.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.FetchLegendInfos">
            <summary>Fetches the list of legend info.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLayerContent.IsVisibleAtScale(System.Double)">
            <summary>Returns the layer content's effective visibility at the specified scale.</summary>
            <remarks>
              Returns the effective layer content visibility. This effective visibility takes care of the effective visibility of the
              parents at the specified scale. Will return false if an error occurs.
            </remarks>
            <param name="scale">The scale the visibility has to be calculated for.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable">
            <summary>A interface for loading meta-data for an object.</summary>
            <remarks>
              A resource that is capable of loading its meta-data asynchronously is referred to as a loadable. It could represent a
              remote service, or a dataset on disk. These methods return a specific object and not the interface RT_LoadableInterface.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.LoadError">
            <summary>Retrieve the load error.</summary>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.LoadStatus">
            <summary>Retrieve the load status.</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.SetDoneLoadingCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_DoneLoading)">
            <summary>Callback, called when the object is done loading.</summary>
            <param name="doneLoading">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.SetLoadStatusChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Loadable_LoadStatusChanged)">
            <summary>Callback, called when the loadable load status changed.</summary>
            <param name="loadStatusChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.CancelLoad">
            <summary>Cancel loading meta-data for the object.</summary>
            <remarks>
              Will cancel loading the meta-data if the object is loading. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.Load">
            <summary>Load the meta-data for the object asynchronously.</summary>
            <remarks>
              Will load the meta-data if the object is not loaded. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreLoadable.RetryLoad">
            <summary>Load or retry loading meta-data for the object asynchronously.</summary>
            <remarks>
              Will retry loading the meta-data if the object is failed to load. Will load the object if the object is not loaded. Will
              not retry to load the object if the object is loaded. Will always call the done loading if this is called.
            </remarks>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreNotifyStateChanged">
            <summary>A interface for being notified of state changed events.</summary>
            <remarks>
              This interface is implemented by RT_GeoViewHandle, RT_GraphicsOverlayHandle, RT_LayerHandle, RT_ArcGISSublayerHandle and
              RT_KMLFeatureHandle
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreNotifyStateChanged.SetStateChangedCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_NotifyStateChanged_StateChanged)">
            <summary>Callback invoked when the state of an object implementing RT_NotifyStateChangedInterface has changed.</summary>
            <param name="stateChanged">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICorePopupSource">
            <summary>
              An interface to type any classes such as RT_ArcGISSublayerHandle and RT_FeatureLayerHandle that support popup and have
              PopupDefinition.
            </summary>
            <remarks>
              This interface is implemented by RT_FeatureLayerHandle, RT_RasterLayerHandle, RT_ArcGISSublayerHandle and
              RT_GraphicsOverlayHandle.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICorePopupSource.IsPopupEnabled">
            <summary>Gets a flag indicating whether the RT_PopupDefinitionHandle defined on the RT_PopupSourceInterface is enable / disable.</summary>
            <remarks>
              Will return false if an error occurs.
            </remarks>
        </member>
        <member name="P:RuntimeCoreNet.GeneratedWrappers.ICorePopupSource.PopupDefinition">
            <summary>Gets the pop-up definition</summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.ICoreRequestable">
            <summary>*Internal Use* A interface for requesting data.</summary>
            <remarks>
              This interface will be used when an Object needs to be request data. This interface should not be exposed publicly.
              These methods return a specific object and not the interface RT_RequestableInterface.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.ICoreRequestable.SetRequestRequiredCallback(RuntimeCoreNet.GeneratedWrappers.ICoreCallback_Request_RequestRequired)">
            <summary>Callback, called when the request-able objects set request required.</summary>
            <remarks>
              The function pointer is called when data is required. Retrieving the data should happen on a different thread. Once the
              data is retrieved RT_Request_handleResponse should be called. If an error occurs while retrieving the data you still
              need to call RT_Request_handleResponse. If this method is not called on an object, then the global request handler will
              be used instead (RT_Environment_setRequestRequiredHandler). Some objects may need to wrap their requestable "child"
              objects to ensure a proper context for requests. A list of objects that may need to do this is available here .
            </remarks>
            <param name="requestRequired">The function to invoke. Can be NULL to disconnect the callback.</param>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.CoreInteropString">
            <summary>Structure for passing a string out of native code.
            It contains the handle, pointer to bytes and size.
            The handle must be destroyed by the RT_Strint_destroy method
            </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropString.stringHandle">
            <summary>Optional CoreString handle, if present this must be owned then destroyed to prevent a handle leak </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropString.bytes">
            <summary>UTF8 bytes in core that represent the string </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropString.count">
            <summary>count of bytes </summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropBytes.byteArrayHandle">
            <summary>Optional CoreByteArray handle, if present this must be owned then destroyed to prevent a handle leak</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropBytes.bytes">
            <summary>bytes in core to be retrieved</summary>
        </member>
        <member name="F:RuntimeCoreNet.GeneratedWrappers.CoreInteropBytes.count">
            <summary>count of bytes </summary>
        </member>
        <member name="T:RuntimeCoreNet.GeneratedWrappers.Interop">
            <summary>Utility methods for Interop</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.SetCoreErrorHandler(RuntimeCoreNet.GeneratedWrappers.Interop.CoreErrorHandler)">
            <summary>
            Call this during API initialization to ensure there's a managed function to check core errors and throw exceptions if needed.
            </summary>
            <remarks>
            Notes for the HandleCoreError implementation: 
            If throwErrorOnFailure is true then funciton can throw a managed exception
            If false, then it'll be in a finalizer or a situation where it's best not to throw, so writing to Debug.WriteLine is good enough.
            If the CoreError instance is no longer used it should be disposed to save the finalizer from releasing it.
            </remarks>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.CheckError(System.IntPtr,System.Boolean)">
            <summary>Checks if there's been an RTC error on this thread, if so it retrieves the error details and throws an exception</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.ConvertString(RuntimeCoreNet.GeneratedWrappers.CoreInteropString)">
            <summary>Converts a CoreInteropString structure into a .Net string.
            Note the CoreInteropString content is invalid after this method completes</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.ConvertStringToUTF8Bytes(System.String)">
            <summary>Converts a .Net string to UTF8 encoded byte array with a 0 terminator
            ready to pass into a C-API interop</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.ConvertByteArray(RuntimeCoreNet.GeneratedWrappers.CoreInteropBytes)">
            <summary>Converts a CoreInteropByteArray structure into a .Net byte[].
            Note the CoreInteropByteArray content is invalid after this method completes</summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.SetClientReferenceReleaseHandler(RuntimeCoreNet.GeneratedWrappers.Interop.CoreClientReference_Release)">
            <summary>
            Call this during API initialization to ensure there's a managed function to ClientReferences after they are not needed.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.ClearClientReferenceReleaseHandler">
            <summary>
            Call this during API shutdown to remove the callback to releases
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.CoreRT_Environment_setClientReferenceReleaseHandler(RuntimeCoreNet.GeneratedWrappers.Interop.CoreClientReference_Release,System.IntPtr@)">
            <summary>
            Sets a static delegate to release the IntPtr inside ClientReference instances.
            </summary>
        </member>
        <member name="M:RuntimeCoreNet.GeneratedWrappers.Interop.CoreRT_ClientReference_createFromHandle(System.IntPtr,System.IntPtr@)">
            <summary>
            Used to hide creation of ClientReferece methods to ensure it uses a consistent userDefinedFailure IntPtr made from GCHandle
            </summary>
        </member>
    </members>
</doc>
